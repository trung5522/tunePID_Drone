
flyF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a344  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800a4d0  0800a4d0  0001a4d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a62c  0800a62c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a62c  0800a62c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a634  0800a634  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a638  0800a638  0001a638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a63c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000684  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000704  20000704  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013837  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027b6  00000000  00000000  0003392a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001320  00000000  00000000  000360e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f11  00000000  00000000  00037400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021010  00000000  00000000  00038311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016b24  00000000  00000000  00059321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6a10  00000000  00000000  0006fe45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d2c  00000000  00000000  00136858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0013c584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a4b4 	.word	0x0800a4b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800a4b4 	.word	0x0800a4b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b970 	b.w	8000e38 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460f      	mov	r7, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d965      	bls.n	8000c52 <__udivmoddi4+0xe2>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b143      	cbz	r3, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	409f      	lsls	r7, r3
 8000b96:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	409c      	lsls	r4, r3
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fa1f f58c 	uxth.w	r5, ip
 8000ba6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000baa:	0c22      	lsrs	r2, r4, #16
 8000bac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb4:	fb01 f005 	mul.w	r0, r1, r5
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc4:	f080 811c 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f240 8119 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4462      	add	r2, ip
 8000bd2:	1a12      	subs	r2, r2, r0
 8000bd4:	b2a4      	uxth	r4, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be2:	fb00 f505 	mul.w	r5, r0, r5
 8000be6:	42a5      	cmp	r5, r4
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x90>
 8000bea:	eb1c 0404 	adds.w	r4, ip, r4
 8000bee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x294>
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x294>
 8000bfc:	4464      	add	r4, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11e      	cbz	r6, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40dc      	lsrs	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0xbc>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80ed 	beq.w	8000dfa <__udivmoddi4+0x28a>
 8000c20:	2100      	movs	r1, #0
 8000c22:	e9c6 0500 	strd	r0, r5, [r6]
 8000c26:	4608      	mov	r0, r1
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	fab3 f183 	clz	r1, r3
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d149      	bne.n	8000cc8 <__udivmoddi4+0x158>
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	d302      	bcc.n	8000c3e <__udivmoddi4+0xce>
 8000c38:	4282      	cmp	r2, r0
 8000c3a:	f200 80f8 	bhi.w	8000e2e <__udivmoddi4+0x2be>
 8000c3e:	1a84      	subs	r4, r0, r2
 8000c40:	eb65 0203 	sbc.w	r2, r5, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	4617      	mov	r7, r2
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d0e2      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c50:	e7df      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xe6>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f382 	clz	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c70:	fb07 2015 	mls	r0, r7, r5, r2
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7a:	fb0e f005 	mul.w	r0, lr, r5
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c82:	eb1c 0202 	adds.w	r2, ip, r2
 8000c86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f200 80cb 	bhi.w	8000e28 <__udivmoddi4+0x2b8>
 8000c92:	4645      	mov	r5, r8
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca8:	45a6      	cmp	lr, r4
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x14e>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x14c>
 8000cb6:	45a6      	cmp	lr, r4
 8000cb8:	f200 80bb 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc6:	e79f      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0720 	rsb	r7, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cda:	fa20 f307 	lsr.w	r3, r0, r7
 8000cde:	40fd      	lsrs	r5, r7
 8000ce0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf2:	0c1c      	lsrs	r4, r3, #16
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cfc:	42a5      	cmp	r5, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	fa00 f001 	lsl.w	r0, r0, r1
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d10:	f080 8088 	bcs.w	8000e24 <__udivmoddi4+0x2b4>
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	f240 8085 	bls.w	8000e24 <__udivmoddi4+0x2b4>
 8000d1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1e:	4464      	add	r4, ip
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	b29d      	uxth	r5, r3
 8000d24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d28:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d40:	d26c      	bcs.n	8000e1c <__udivmoddi4+0x2ac>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d96a      	bls.n	8000e1c <__udivmoddi4+0x2ac>
 8000d46:	3b02      	subs	r3, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	42ac      	cmp	r4, r5
 8000d58:	46c8      	mov	r8, r9
 8000d5a:	46ae      	mov	lr, r5
 8000d5c:	d356      	bcc.n	8000e0c <__udivmoddi4+0x29c>
 8000d5e:	d053      	beq.n	8000e08 <__udivmoddi4+0x298>
 8000d60:	b156      	cbz	r6, 8000d78 <__udivmoddi4+0x208>
 8000d62:	ebb0 0208 	subs.w	r2, r0, r8
 8000d66:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6e:	40ca      	lsrs	r2, r1
 8000d70:	40cc      	lsrs	r4, r1
 8000d72:	4317      	orrs	r7, r2
 8000d74:	e9c6 7400 	strd	r7, r4, [r6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	f1c3 0120 	rsb	r1, r3, #32
 8000d84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d88:	fa20 f201 	lsr.w	r2, r0, r1
 8000d8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d90:	409d      	lsls	r5, r3
 8000d92:	432a      	orrs	r2, r5
 8000d94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1510 	mls	r5, r7, r0, r1
 8000da4:	0c11      	lsrs	r1, r2, #16
 8000da6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000daa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dae:	428d      	cmp	r5, r1
 8000db0:	fa04 f403 	lsl.w	r4, r4, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x258>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbe:	d22f      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc0:	428d      	cmp	r5, r1
 8000dc2:	d92d      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1b49      	subs	r1, r1, r5
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ddc:	4291      	cmp	r1, r2
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x282>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de8:	d216      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000dea:	4291      	cmp	r1, r2
 8000dec:	d914      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000dee:	3d02      	subs	r5, #2
 8000df0:	4462      	add	r2, ip
 8000df2:	1a52      	subs	r2, r2, r1
 8000df4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df8:	e738      	b.n	8000c6c <__udivmoddi4+0xfc>
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000e00:	4639      	mov	r1, r7
 8000e02:	e6e6      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000e04:	4610      	mov	r0, r2
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x90>
 8000e08:	4548      	cmp	r0, r9
 8000e0a:	d2a9      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e14:	3b01      	subs	r3, #1
 8000e16:	e7a3      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	e7ea      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e794      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e20:	4640      	mov	r0, r8
 8000e22:	e7d1      	b.n	8000dc8 <__udivmoddi4+0x258>
 8000e24:	46d0      	mov	r8, sl
 8000e26:	e77b      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e28:	3d02      	subs	r5, #2
 8000e2a:	4462      	add	r2, ip
 8000e2c:	e732      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e70a      	b.n	8000c48 <__udivmoddi4+0xd8>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e742      	b.n	8000cbe <__udivmoddi4+0x14e>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <Encode_Msg_AHRS>:

extern UART_HandleTypeDef huart2;


void Encode_Msg_AHRS(unsigned char* telemetry_tx_buf)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]


			  telemetry_tx_buf[0] = 0x46;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2246      	movs	r2, #70	; 0x46
 8000e48:	701a      	strb	r2, [r3, #0]
			  telemetry_tx_buf[1] = 0x43;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2243      	movs	r2, #67	; 0x43
 8000e50:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[2] = 0x10;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3302      	adds	r3, #2
 8000e56:	2210      	movs	r2, #16
 8000e58:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[3] = (short)(KalmanAngleRoll*100);
 8000e5a:	4b9c      	ldr	r3, [pc, #624]	; (80010cc <Encode_Msg_AHRS+0x290>)
 8000e5c:	edd3 7a00 	vldr	s15, [r3]
 8000e60:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e6c:	ee17 3a90 	vmov	r3, s15
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3303      	adds	r3, #3
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	701a      	strb	r2, [r3, #0]
			  telemetry_tx_buf[4] = ((short)(KalmanAngleRoll*100))>>8;
 8000e7a:	4b94      	ldr	r3, [pc, #592]	; (80010cc <Encode_Msg_AHRS+0x290>)
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8c:	ee17 3a90 	vmov	r3, s15
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	121b      	asrs	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[5] = (short)(KalmanAnglePitch*100);
 8000e9e:	4b8d      	ldr	r3, [pc, #564]	; (80010d4 <Encode_Msg_AHRS+0x298>)
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb0:	ee17 3a90 	vmov	r3, s15
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3305      	adds	r3, #5
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	701a      	strb	r2, [r3, #0]
			  telemetry_tx_buf[6] = ((short)(KalmanAnglePitch*100))>>8;
 8000ebe:	4b85      	ldr	r3, [pc, #532]	; (80010d4 <Encode_Msg_AHRS+0x298>)
 8000ec0:	edd3 7a00 	vldr	s15, [r3]
 8000ec4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed0:	ee17 3a90 	vmov	r3, s15
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	121b      	asrs	r3, r3, #8
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3306      	adds	r3, #6
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[7] = (unsigned short)(AngleYaw*100);
 8000ee2:	4b7d      	ldr	r3, [pc, #500]	; (80010d8 <Encode_Msg_AHRS+0x29c>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef4:	ee17 3a90 	vmov	r3, s15
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3307      	adds	r3, #7
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	701a      	strb	r2, [r3, #0]
			  telemetry_tx_buf[8] = ((unsigned short)(AngleYaw*100))>>8;
 8000f02:	4b75      	ldr	r3, [pc, #468]	; (80010d8 <Encode_Msg_AHRS+0x29c>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f14:	ee17 3a90 	vmov	r3, s15
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3308      	adds	r3, #8
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[9] = 0x00;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3309      	adds	r3, #9
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
			  telemetry_tx_buf[10] = 0x00;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	330a      	adds	r3, #10
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[11] = (short)((ch.ch[0]-1500)*0.1f*100);
 8000f36:	4b69      	ldr	r3, [pc, #420]	; (80010dc <Encode_Msg_AHRS+0x2a0>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f48:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80010e0 <Encode_Msg_AHRS+0x2a4>
 8000f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f50:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5c:	ee17 3a90 	vmov	r3, s15
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	330b      	adds	r3, #11
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]
			  telemetry_tx_buf[12] = ((short)((ch.ch[0]-1500)*0.1f*100))>>8;
 8000f6a:	4b5c      	ldr	r3, [pc, #368]	; (80010dc <Encode_Msg_AHRS+0x2a0>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80010e0 <Encode_Msg_AHRS+0x2a4>
 8000f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f84:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f90:	ee17 3a90 	vmov	r3, s15
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	121b      	asrs	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	330c      	adds	r3, #12
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[13] = (short)((ch.ch[1]-1500)*0.1f*100);
 8000fa2:	4b4e      	ldr	r3, [pc, #312]	; (80010dc <Encode_Msg_AHRS+0x2a0>)
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80010e0 <Encode_Msg_AHRS+0x2a4>
 8000fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fbc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc8:	ee17 3a90 	vmov	r3, s15
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	330d      	adds	r3, #13
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	701a      	strb	r2, [r3, #0]
			  telemetry_tx_buf[14] = ((short)((ch.ch[1]-1500)*0.1f*100))>>8;
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <Encode_Msg_AHRS+0x2a0>)
 8000fd8:	885b      	ldrh	r3, [r3, #2]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe8:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80010e0 <Encode_Msg_AHRS+0x2a4>
 8000fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8000ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffc:	ee17 3a90 	vmov	r3, s15
 8001000:	b21b      	sxth	r3, r3
 8001002:	121b      	asrs	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	330e      	adds	r3, #14
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[15] = (unsigned short)((ch.ch[3]-1000)*0.36f*100);
 800100e:	4b33      	ldr	r3, [pc, #204]	; (80010dc <Encode_Msg_AHRS+0x2a0>)
 8001010:	88db      	ldrh	r3, [r3, #6]
 8001012:	b29b      	uxth	r3, r3
 8001014:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001020:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80010e4 <Encode_Msg_AHRS+0x2a8>
 8001024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001028:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80010d0 <Encode_Msg_AHRS+0x294>
 800102c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001034:	ee17 3a90 	vmov	r3, s15
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	330f      	adds	r3, #15
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	701a      	strb	r2, [r3, #0]
			  telemetry_tx_buf[16] = ((unsigned short)((ch.ch[3]-1000)*0.36f*100))>>8;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <Encode_Msg_AHRS+0x2a0>)
 8001044:	88db      	ldrh	r3, [r3, #6]
 8001046:	b29b      	uxth	r3, r3
 8001048:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001054:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80010e4 <Encode_Msg_AHRS+0x2a8>
 8001058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80010d0 <Encode_Msg_AHRS+0x294>
 8001060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001068:	ee17 3a90 	vmov	r3, s15
 800106c:	b29b      	uxth	r3, r3
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3310      	adds	r3, #16
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[17] = 0x00;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3311      	adds	r3, #17
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
			  telemetry_tx_buf[18] = 0x00;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3312      	adds	r3, #18
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]

			  telemetry_tx_buf[19] = 0xff;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3313      	adds	r3, #19
 800108e:	22ff      	movs	r2, #255	; 0xff
 8001090:	701a      	strb	r2, [r3, #0]

			  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e00e      	b.n	80010b6 <Encode_Msg_AHRS+0x27a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3313      	adds	r3, #19
 800109c:	7819      	ldrb	r1, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3313      	adds	r3, #19
 80010aa:	1a8a      	subs	r2, r1, r2
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	dded      	ble.n	8001098 <Encode_Msg_AHRS+0x25c>

}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000234 	.word	0x20000234
 80010d0:	42c80000 	.word	0x42c80000
 80010d4:	20000238 	.word	0x20000238
 80010d8:	20000230 	.word	0x20000230
 80010dc:	20000210 	.word	0x20000210
 80010e0:	3dcccccd 	.word	0x3dcccccd
 80010e4:	3eb851ec 	.word	0x3eb851ec

080010e8 <Encode_Msg_PID_Gain>:
//
//	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
//}

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6178      	str	r0, [r7, #20]
 80010f0:	460b      	mov	r3, r1
 80010f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80010f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80010fa:	ed87 1a01 	vstr	s2, [r7, #4]
 80010fe:	74fb      	strb	r3, [r7, #19]
	  telemetry_tx_buf[0] = 0x46;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2246      	movs	r2, #70	; 0x46
 8001104:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	2243      	movs	r2, #67	; 0x43
 800110c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = id;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3302      	adds	r3, #2
 8001112:	7cfa      	ldrb	r2, [r7, #19]
 8001114:	701a      	strb	r2, [r3, #0]

//	  memcpy(&telemetry_tx_buf[3], &p, 4);
//	  memcpy(&telemetry_tx_buf[7], &i, 4);
//	  memcpy(&telemetry_tx_buf[11], &d, 4);

	  *(float*)&telemetry_tx_buf[3] = p;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3303      	adds	r3, #3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[7] = i;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3307      	adds	r3, #7
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[11] = d;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	330b      	adds	r3, #11
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	601a      	str	r2, [r3, #0]

	  telemetry_tx_buf[15] = 0x00;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	330f      	adds	r3, #15
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = 0x00;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3310      	adds	r3, #16
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3311      	adds	r3, #17
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3312      	adds	r3, #18
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3313      	adds	r3, #19
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e00e      	b.n	800117a <Encode_Msg_PID_Gain+0x92>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3313      	adds	r3, #19
 8001160:	7819      	ldrb	r1, [r3, #0]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	4413      	add	r3, r2
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3313      	adds	r3, #19
 800116e:	1a8a      	subs	r2, r1, r2
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3301      	adds	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2b12      	cmp	r3, #18
 800117e:	dded      	ble.n	800115c <Encode_Msg_PID_Gain+0x74>
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_UART_RxCpltCallback>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;

	if(huart->Instance == USART2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <HAL_UART_RxCpltCallback+0xc4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d154      	bne.n	800124c <HAL_UART_RxCpltCallback+0xbc>
	{
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	492c      	ldr	r1, [pc, #176]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 80011a6:	482d      	ldr	r0, [pc, #180]	; (800125c <HAL_UART_RxCpltCallback+0xcc>)
 80011a8:	f007 f813 	bl	80081d2 <HAL_UART_Receive_IT>

		switch(cnt)
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b13      	cmp	r3, #19
 80011b2:	d02e      	beq.n	8001212 <HAL_UART_RxCpltCallback+0x82>
 80011b4:	2b13      	cmp	r3, #19
 80011b6:	dc3a      	bgt.n	800122e <HAL_UART_RxCpltCallback+0x9e>
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <HAL_UART_RxCpltCallback+0x32>
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d012      	beq.n	80011e6 <HAL_UART_RxCpltCallback+0x56>
 80011c0:	e035      	b.n	800122e <HAL_UART_RxCpltCallback+0x9e>
		{
		case 0:
			if(uart2_rx_data == 0x47)
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b47      	cmp	r3, #71	; 0x47
 80011c8:	d13f      	bne.n	800124a <HAL_UART_RxCpltCallback+0xba>
			{
				telemetry_rx_buf[cnt] = uart2_rx_data;
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 80011d2:	7819      	ldrb	r1, [r3, #0]
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_UART_RxCpltCallback+0xd4>)
 80011d6:	5499      	strb	r1, [r3, r2]
				cnt++;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011e2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80011e4:	e031      	b.n	800124a <HAL_UART_RxCpltCallback+0xba>
		case 1:
			if(uart2_rx_data == 0x53)
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b53      	cmp	r3, #83	; 0x53
 80011ec:	d10d      	bne.n	800120a <HAL_UART_RxCpltCallback+0x7a>
			{
				telemetry_rx_buf[cnt] = uart2_rx_data;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 80011f6:	7819      	ldrb	r1, [r3, #0]
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_UART_RxCpltCallback+0xd4>)
 80011fa:	5499      	strb	r1, [r3, r2]
				cnt++;
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 8001206:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8001208:	e020      	b.n	800124c <HAL_UART_RxCpltCallback+0xbc>
				cnt = 0;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
			break;
 8001210:	e01c      	b.n	800124c <HAL_UART_RxCpltCallback+0xbc>
		case 19:
			telemetry_rx_buf[cnt] = uart2_rx_data;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 800121a:	7819      	ldrb	r1, [r3, #0]
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_RxCpltCallback+0xd4>)
 800121e:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_UART_RxCpltCallback+0xd8>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
			break;
 800122c:	e00e      	b.n	800124c <HAL_UART_RxCpltCallback+0xbc>
		default:
			telemetry_rx_buf[cnt] = uart2_rx_data;
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 8001236:	7819      	ldrb	r1, [r3, #0]
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_UART_RxCpltCallback+0xd4>)
 800123a:	5499      	strb	r1, [r3, r2]
			cnt++;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 8001246:	701a      	strb	r2, [r3, #0]
			break;
 8001248:	e000      	b.n	800124c <HAL_UART_RxCpltCallback+0xbc>
			break;
 800124a:	bf00      	nop
//	  }
//	  else
//	  {
//
//	  }
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40004400 	.word	0x40004400
 8001258:	2000009d 	.word	0x2000009d
 800125c:	20000404 	.word	0x20000404
 8001260:	2000044c 	.word	0x2000044c
 8001264:	200000c8 	.word	0x200000c8
 8001268:	200000dc 	.word	0x200000dc

0800126c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	if(htim->Instance == htim4.Instance)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x60>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d11f      	bne.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x54>
	 {

				tim7_20ms_count++;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800128a:	701a      	strb	r2, [r3, #0]
				if(tim7_20ms_count == 20)
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b14      	cmp	r3, #20
 8001292:	d105      	bne.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x34>
				{
					tim7_20ms_count = 0;
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
					tim7_20ms_flag = 1;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
				}

				tim7_100ms_count++;
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80012aa:	701a      	strb	r2, [r3, #0]
				if(tim7_100ms_count == 100)
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	d105      	bne.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x54>
				{
					tim7_100ms_count = 0;
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
					tim7_100ms_flag = 1;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
				}
	 }
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	2000032c 	.word	0x2000032c
 80012d0:	2000044d 	.word	0x2000044d
 80012d4:	2000023c 	.word	0x2000023c
 80012d8:	2000044e 	.word	0x2000044e
 80012dc:	2000023d 	.word	0x2000023d

080012e0 <gyro_get_data>:
  KalmanState=KalmanState+KalmanGain * (KalmanMeasurement-KalmanState);
  KalmanUncertainty=(1-KalmanGain) * KalmanUncertainty;
  Kalman1DOutput[0]=KalmanState;
  Kalman1DOutput[1]=KalmanUncertainty;
}
void gyro_get_data(){
 80012e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e4:	af00      	add	r7, sp, #0
	 update_accel_gyro(&mpu);
 80012e6:	48a8      	ldr	r0, [pc, #672]	; (8001588 <gyro_get_data+0x2a8>)
 80012e8:	f001 fe8e 	bl	8003008 <update_accel_gyro>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80012ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f0:	48a6      	ldr	r0, [pc, #664]	; (800158c <gyro_get_data+0x2ac>)
 80012f2:	f004 f940 	bl	8005576 <HAL_GPIO_TogglePin>
	 gyro_x=mpu.g[0]-(2.9);
 80012f6:	4ba4      	ldr	r3, [pc, #656]	; (8001588 <gyro_get_data+0x2a8>)
 80012f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f8c8 	bl	8000490 <__aeabi_f2d>
 8001300:	a397      	add	r3, pc, #604	; (adr r3, 8001560 <gyro_get_data+0x280>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7fe ff63 	bl	80001d0 <__aeabi_dsub>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fbc5 	bl	8000aa0 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	4a9d      	ldr	r2, [pc, #628]	; (8001590 <gyro_get_data+0x2b0>)
 800131a:	6013      	str	r3, [r2, #0]
	 gyro_y=mpu.g[1]-(-2.15);
 800131c:	4b9a      	ldr	r3, [pc, #616]	; (8001588 <gyro_get_data+0x2a8>)
 800131e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8b5 	bl	8000490 <__aeabi_f2d>
 8001326:	a390      	add	r3, pc, #576	; (adr r3, 8001568 <gyro_get_data+0x288>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7fe ff52 	bl	80001d4 <__adddf3>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fbb2 	bl	8000aa0 <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
 800133e:	4a95      	ldr	r2, [pc, #596]	; (8001594 <gyro_get_data+0x2b4>)
 8001340:	6013      	str	r3, [r2, #0]
	 gyro_z=mpu.g[2]-(0.1);
 8001342:	4b91      	ldr	r3, [pc, #580]	; (8001588 <gyro_get_data+0x2a8>)
 8001344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8a1 	bl	8000490 <__aeabi_f2d>
 800134e:	a388      	add	r3, pc, #544	; (adr r3, 8001570 <gyro_get_data+0x290>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7fe ff3c 	bl	80001d0 <__aeabi_dsub>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fb9e 	bl	8000aa0 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	4a8c      	ldr	r2, [pc, #560]	; (8001598 <gyro_get_data+0x2b8>)
 8001368:	6013      	str	r3, [r2, #0]


	  AccX=mpu.a[0];
 800136a:	4b87      	ldr	r3, [pc, #540]	; (8001588 <gyro_get_data+0x2a8>)
 800136c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800136e:	4a8b      	ldr	r2, [pc, #556]	; (800159c <gyro_get_data+0x2bc>)
 8001370:	6013      	str	r3, [r2, #0]
	  AccY=mpu.a[1];
 8001372:	4b85      	ldr	r3, [pc, #532]	; (8001588 <gyro_get_data+0x2a8>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001376:	4a8a      	ldr	r2, [pc, #552]	; (80015a0 <gyro_get_data+0x2c0>)
 8001378:	6013      	str	r3, [r2, #0]
	  AccZ=mpu.a[2];
 800137a:	4b83      	ldr	r3, [pc, #524]	; (8001588 <gyro_get_data+0x2a8>)
 800137c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137e:	4a89      	ldr	r2, [pc, #548]	; (80015a4 <gyro_get_data+0x2c4>)
 8001380:	6013      	str	r3, [r2, #0]
	  AngleRoll=atan(AccY/sqrt(AccX*AccX+AccZ*AccZ))*1/(3.142/180);
 8001382:	4b87      	ldr	r3, [pc, #540]	; (80015a0 <gyro_get_data+0x2c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f882 	bl	8000490 <__aeabi_f2d>
 800138c:	4680      	mov	r8, r0
 800138e:	4689      	mov	r9, r1
 8001390:	4b82      	ldr	r3, [pc, #520]	; (800159c <gyro_get_data+0x2bc>)
 8001392:	ed93 7a00 	vldr	s14, [r3]
 8001396:	4b81      	ldr	r3, [pc, #516]	; (800159c <gyro_get_data+0x2bc>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a0:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <gyro_get_data+0x2c4>)
 80013a2:	edd3 6a00 	vldr	s13, [r3]
 80013a6:	4b7f      	ldr	r3, [pc, #508]	; (80015a4 <gyro_get_data+0x2c4>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	ee17 0a90 	vmov	r0, s15
 80013b8:	f7ff f86a 	bl	8000490 <__aeabi_f2d>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	ec43 2b10 	vmov	d0, r2, r3
 80013c4:	f008 fb2c 	bl	8009a20 <sqrt>
 80013c8:	ec53 2b10 	vmov	r2, r3, d0
 80013cc:	4640      	mov	r0, r8
 80013ce:	4649      	mov	r1, r9
 80013d0:	f7ff f9e0 	bl	8000794 <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	ec43 2b17 	vmov	d7, r2, r3
 80013dc:	eeb0 0a47 	vmov.f32	s0, s14
 80013e0:	eef0 0a67 	vmov.f32	s1, s15
 80013e4:	f008 fb48 	bl	8009a78 <atan>
 80013e8:	ec51 0b10 	vmov	r0, r1, d0
 80013ec:	a362      	add	r3, pc, #392	; (adr r3, 8001578 <gyro_get_data+0x298>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f9cf 	bl	8000794 <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fb4f 	bl	8000aa0 <__aeabi_d2f>
 8001402:	4603      	mov	r3, r0
 8001404:	4a68      	ldr	r2, [pc, #416]	; (80015a8 <gyro_get_data+0x2c8>)
 8001406:	6013      	str	r3, [r2, #0]
	  AnglePitch=-atan(AccX/sqrt(AccY*AccY+AccZ*AccZ))*1/(3.142/180);
 8001408:	4b64      	ldr	r3, [pc, #400]	; (800159c <gyro_get_data+0x2bc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f83f 	bl	8000490 <__aeabi_f2d>
 8001412:	4680      	mov	r8, r0
 8001414:	4689      	mov	r9, r1
 8001416:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <gyro_get_data+0x2c0>)
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	4b60      	ldr	r3, [pc, #384]	; (80015a0 <gyro_get_data+0x2c0>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001426:	4b5f      	ldr	r3, [pc, #380]	; (80015a4 <gyro_get_data+0x2c4>)
 8001428:	edd3 6a00 	vldr	s13, [r3]
 800142c:	4b5d      	ldr	r3, [pc, #372]	; (80015a4 <gyro_get_data+0x2c4>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143a:	ee17 0a90 	vmov	r0, s15
 800143e:	f7ff f827 	bl	8000490 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ec43 2b10 	vmov	d0, r2, r3
 800144a:	f008 fae9 	bl	8009a20 <sqrt>
 800144e:	ec53 2b10 	vmov	r2, r3, d0
 8001452:	4640      	mov	r0, r8
 8001454:	4649      	mov	r1, r9
 8001456:	f7ff f99d 	bl	8000794 <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	ec43 2b17 	vmov	d7, r2, r3
 8001462:	eeb0 0a47 	vmov.f32	s0, s14
 8001466:	eef0 0a67 	vmov.f32	s1, s15
 800146a:	f008 fb05 	bl	8009a78 <atan>
 800146e:	ec53 2b10 	vmov	r2, r3, d0
 8001472:	4614      	mov	r4, r2
 8001474:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001478:	a33f      	add	r3, pc, #252	; (adr r3, 8001578 <gyro_get_data+0x298>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7ff f987 	bl	8000794 <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fb07 	bl	8000aa0 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <gyro_get_data+0x2cc>)
 8001496:	6013      	str	r3, [r2, #0]
	  AngleYaw=atan(AccZ/sqrt(AccY*AccY+AccX*AccX))*1/(3.142/180);
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <gyro_get_data+0x2c4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe fff7 	bl	8000490 <__aeabi_f2d>
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <gyro_get_data+0x2c0>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <gyro_get_data+0x2c0>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b6:	4b39      	ldr	r3, [pc, #228]	; (800159c <gyro_get_data+0x2bc>)
 80014b8:	edd3 6a00 	vldr	s13, [r3]
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <gyro_get_data+0x2bc>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ca:	ee17 0a90 	vmov	r0, s15
 80014ce:	f7fe ffdf 	bl	8000490 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ec43 2b10 	vmov	d0, r2, r3
 80014da:	f008 faa1 	bl	8009a20 <sqrt>
 80014de:	ec53 2b10 	vmov	r2, r3, d0
 80014e2:	4620      	mov	r0, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7ff f955 	bl	8000794 <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	ec43 2b17 	vmov	d7, r2, r3
 80014f2:	eeb0 0a47 	vmov.f32	s0, s14
 80014f6:	eef0 0a67 	vmov.f32	s1, s15
 80014fa:	f008 fabd 	bl	8009a78 <atan>
 80014fe:	ec51 0b10 	vmov	r0, r1, d0
 8001502:	a31d      	add	r3, pc, #116	; (adr r3, 8001578 <gyro_get_data+0x298>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f944 	bl	8000794 <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fac4 	bl	8000aa0 <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	4a25      	ldr	r2, [pc, #148]	; (80015b0 <gyro_get_data+0x2d0>)
 800151c:	6013      	str	r3, [r2, #0]
	  AnglePitch-=2.5;
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <gyro_get_data+0x2cc>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <gyro_get_data+0x2cc>)
 800152e:	edc3 7a00 	vstr	s15, [r3]
	  AngleRoll-=(-0.7);
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <gyro_get_data+0x2c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ffaa 	bl	8000490 <__aeabi_f2d>
 800153c:	a310      	add	r3, pc, #64	; (adr r3, 8001580 <gyro_get_data+0x2a0>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7fe fe47 	bl	80001d4 <__adddf3>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff faa7 	bl	8000aa0 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <gyro_get_data+0x2c8>)
 8001556:	6013      	str	r3, [r2, #0]

	//gyro_x *= -1;
//	gyro_y *= -1;
	//gyro_z *= -1;

}
 8001558:	bf00      	nop
 800155a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800155e:	bf00      	nop
 8001560:	33333333 	.word	0x33333333
 8001564:	40073333 	.word	0x40073333
 8001568:	33333333 	.word	0x33333333
 800156c:	40013333 	.word	0x40013333
 8001570:	9999999a 	.word	0x9999999a
 8001574:	3fb99999 	.word	0x3fb99999
 8001578:	80fa7e3f 	.word	0x80fa7e3f
 800157c:	3f91dfde 	.word	0x3f91dfde
 8001580:	66666666 	.word	0x66666666
 8001584:	3fe66666 	.word	0x3fe66666
 8001588:	20000150 	.word	0x20000150
 800158c:	40020800 	.word	0x40020800
 8001590:	20000138 	.word	0x20000138
 8001594:	2000013c 	.word	0x2000013c
 8001598:	20000140 	.word	0x20000140
 800159c:	20000144 	.word	0x20000144
 80015a0:	20000148 	.word	0x20000148
 80015a4:	2000014c 	.word	0x2000014c
 80015a8:	20000228 	.word	0x20000228
 80015ac:	2000022c 	.word	0x2000022c
 80015b0:	20000230 	.word	0x20000230

080015b4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c4:	d149      	bne.n	800165a <HAL_GPIO_EXTI_Callback+0xa6>
		flag_ppm = 1;
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_GPIO_EXTI_Callback+0xb4>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
		tick = __HAL_TIM_GET_COUNTER(&htim5);
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_GPIO_EXTI_Callback+0xb8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_GPIO_EXTI_Callback+0xbc>)
 80015d6:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5,0);
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_GPIO_EXTI_Callback+0xb8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
		if(tick < 2108){
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_GPIO_EXTI_Callback+0xbc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f640 023b 	movw	r2, #2107	; 0x83b
 80015e8:	4293      	cmp	r3, r2
 80015ea:	dc2f      	bgt.n	800164c <HAL_GPIO_EXTI_Callback+0x98>

			if(pulse==2){
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <HAL_GPIO_EXTI_Callback+0xc0>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d109      	bne.n	8001608 <HAL_GPIO_EXTI_Callback+0x54>
				//if(tick<1000 || abs(tick - ch.ch[pulse])>200) ch.ch[pulse]=ch.ch[pulse];
				//else
					ch.ch[pulse]= tick;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_GPIO_EXTI_Callback+0xbc>)
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_GPIO_EXTI_Callback+0xc0>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	b289      	uxth	r1, r1
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001602:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001606:	e01a      	b.n	800163e <HAL_GPIO_EXTI_Callback+0x8a>
			}
			else if((pulse ==4) || (pulse ==5)){
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_GPIO_EXTI_Callback+0xc0>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_EXTI_Callback+0x64>
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d109      	bne.n	800162c <HAL_GPIO_EXTI_Callback+0x78>
				ch.ch[pulse]= tick;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_GPIO_EXTI_Callback+0xbc>)
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_GPIO_EXTI_Callback+0xc0>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	b289      	uxth	r1, r1
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001626:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800162a:	e008      	b.n	800163e <HAL_GPIO_EXTI_Callback+0x8a>
//				if(tick<1200 || tick >1700 ) ch[pulse]=ch[pulse];
//				else
				//if(tick<1000 || abs(tick - ch.ch[pulse])>200) ch.ch[pulse]=ch.ch[pulse];
				//else
				//	ch.ch[pulse]= mapValue(tick, 1200, 1700, 1000, 2000);
				ch.ch[pulse]= tick;
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_GPIO_EXTI_Callback+0xbc>)
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	b289      	uxth	r1, r1
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_GPIO_EXTI_Callback+0xc4>)
 800163a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}

			//ch[pulse]= tick;
			pulse++;
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001648:	701a      	strb	r2, [r3, #0]
			pulse = 0;
		}

	}

}
 800164a:	e006      	b.n	800165a <HAL_GPIO_EXTI_Callback+0xa6>
			__HAL_TIM_SET_COUNTER(&htim5,0);
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_GPIO_EXTI_Callback+0xb8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
			pulse = 0;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2000009c 	.word	0x2000009c
 800166c:	20000374 	.word	0x20000374
 8001670:	20000224 	.word	0x20000224
 8001674:	20000222 	.word	0x20000222
 8001678:	20000210 	.word	0x20000210

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001682:	f003 fb89 	bl	8004d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001686:	f000 ff37 	bl	80024f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168a:	f001 f9a5 	bl	80029d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800168e:	f000 ff9d 	bl	80025cc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001692:	f001 f977 	bl	8002984 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001696:	f001 f813 	bl	80026c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800169a:	f001 f8a9 	bl	80027f0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800169e:	f001 f8f5 	bl	800288c <MX_TIM5_Init>
  MX_TIM2_Init();
 80016a2:	f000 ffc1 	bl	8002628 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80016a6:	f001 f93f 	bl	8002928 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 80016aa:	48bc      	ldr	r0, [pc, #752]	; (800199c <main+0x320>)
 80016ac:	f005 fc38 	bl	8006f20 <HAL_TIM_Base_Start>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	48ba      	ldr	r0, [pc, #744]	; (80019a0 <main+0x324>)
 80016b6:	f003 ff45 	bl	8005544 <HAL_GPIO_WritePin>
  	//HAL_UART_Receive_IT(&huart1, rx_data4, 1);

  	HAL_TIM_Base_Start_IT(&htim4);
 80016ba:	48ba      	ldr	r0, [pc, #744]	; (80019a4 <main+0x328>)
 80016bc:	f005 fc98 	bl	8006ff0 <HAL_TIM_Base_Start_IT>
	while(flag_ppm==0) {
 80016c0:	e01e      	b.n	8001700 <main+0x84>
      	 HAL_Delay(100);
 80016c2:	2064      	movs	r0, #100	; 0x64
 80016c4:	f003 fbda 	bl	8004e7c <HAL_Delay>
      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	48b5      	ldr	r0, [pc, #724]	; (80019a0 <main+0x324>)
 80016cc:	f003 ff53 	bl	8005576 <HAL_GPIO_TogglePin>
      	 HAL_Delay(100);
 80016d0:	2064      	movs	r0, #100	; 0x64
 80016d2:	f003 fbd3 	bl	8004e7c <HAL_Delay>
      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	48b1      	ldr	r0, [pc, #708]	; (80019a0 <main+0x324>)
 80016da:	f003 ff4c 	bl	8005576 <HAL_GPIO_TogglePin>
      	 HAL_Delay(100);
 80016de:	2064      	movs	r0, #100	; 0x64
 80016e0:	f003 fbcc 	bl	8004e7c <HAL_Delay>
      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	48ae      	ldr	r0, [pc, #696]	; (80019a0 <main+0x324>)
 80016e8:	f003 ff45 	bl	8005576 <HAL_GPIO_TogglePin>
      	 HAL_Delay(100);
 80016ec:	2064      	movs	r0, #100	; 0x64
 80016ee:	f003 fbc5 	bl	8004e7c <HAL_Delay>
      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	48aa      	ldr	r0, [pc, #680]	; (80019a0 <main+0x324>)
 80016f6:	f003 ff3e 	bl	8005576 <HAL_GPIO_TogglePin>
      	 printf("\nPPM failed. Program shutting down...\n");
 80016fa:	48ab      	ldr	r0, [pc, #684]	; (80019a8 <main+0x32c>)
 80016fc:	f007 fdfa 	bl	80092f4 <puts>
	while(flag_ppm==0) {
 8001700:	4baa      	ldr	r3, [pc, #680]	; (80019ac <main+0x330>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0dc      	beq.n	80016c2 <main+0x46>

   	      }
   	printf("PPM OK!\n\n");
 8001708:	48a9      	ldr	r0, [pc, #676]	; (80019b0 <main+0x334>)
 800170a:	f007 fdf3 	bl	80092f4 <puts>

  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800170e:	2100      	movs	r1, #0
 8001710:	48a8      	ldr	r0, [pc, #672]	; (80019b4 <main+0x338>)
 8001712:	f005 fd37 	bl	8007184 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001716:	2104      	movs	r1, #4
 8001718:	48a6      	ldr	r0, [pc, #664]	; (80019b4 <main+0x338>)
 800171a:	f005 fd33 	bl	8007184 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800171e:	2108      	movs	r1, #8
 8001720:	48a4      	ldr	r0, [pc, #656]	; (80019b4 <main+0x338>)
 8001722:	f005 fd2f 	bl	8007184 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001726:	210c      	movs	r1, #12
 8001728:	48a2      	ldr	r0, [pc, #648]	; (80019b4 <main+0x338>)
 800172a:	f005 fd2b 	bl	8007184 <HAL_TIM_PWM_Start>
  	//HAL_Delay(10);
  	if(ch.ch[4] < 1100){
 800172e:	4ba2      	ldr	r3, [pc, #648]	; (80019b8 <main+0x33c>)
 8001730:	891b      	ldrh	r3, [r3, #8]
 8001732:	b29b      	uxth	r3, r3
 8001734:	f240 424b 	movw	r2, #1099	; 0x44b
 8001738:	4293      	cmp	r3, r2
 800173a:	d827      	bhi.n	800178c <main+0x110>
  			TIM3->CCR1 = 21000;
 800173c:	4b9f      	ldr	r3, [pc, #636]	; (80019bc <main+0x340>)
 800173e:	f245 2208 	movw	r2, #21000	; 0x5208
 8001742:	635a      	str	r2, [r3, #52]	; 0x34
  	    	TIM3->CCR2 = 21000;
 8001744:	4b9d      	ldr	r3, [pc, #628]	; (80019bc <main+0x340>)
 8001746:	f245 2208 	movw	r2, #21000	; 0x5208
 800174a:	639a      	str	r2, [r3, #56]	; 0x38
  	    	TIM3->CCR3 = 21000;
 800174c:	4b9b      	ldr	r3, [pc, #620]	; (80019bc <main+0x340>)
 800174e:	f245 2208 	movw	r2, #21000	; 0x5208
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c
  	    	TIM3->CCR4 = 21000;
 8001754:	4b99      	ldr	r3, [pc, #612]	; (80019bc <main+0x340>)
 8001756:	f245 2208 	movw	r2, #21000	; 0x5208
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
  	      HAL_Delay(7000);
 800175c:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001760:	f003 fb8c 	bl	8004e7c <HAL_Delay>
  	      	TIM3->CCR1 = 10500;
 8001764:	4b95      	ldr	r3, [pc, #596]	; (80019bc <main+0x340>)
 8001766:	f642 1204 	movw	r2, #10500	; 0x2904
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
  	      	TIM3->CCR2 = 10500;
 800176c:	4b93      	ldr	r3, [pc, #588]	; (80019bc <main+0x340>)
 800176e:	f642 1204 	movw	r2, #10500	; 0x2904
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
  	      	TIM3->CCR3 = 10500;
 8001774:	4b91      	ldr	r3, [pc, #580]	; (80019bc <main+0x340>)
 8001776:	f642 1204 	movw	r2, #10500	; 0x2904
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
  	      	TIM3->CCR4 = 10500;
 800177c:	4b8f      	ldr	r3, [pc, #572]	; (80019bc <main+0x340>)
 800177e:	f642 1204 	movw	r2, #10500	; 0x2904
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
  	      HAL_Delay(8000);
 8001784:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001788:	f003 fb78 	bl	8004e7c <HAL_Delay>
//      __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
//      __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
//      __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
//      __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);

   	 HAL_Delay(1000);
 800178c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001790:	f003 fb74 	bl	8004e7c <HAL_Delay>
   	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	4882      	ldr	r0, [pc, #520]	; (80019a0 <main+0x324>)
 8001798:	f003 feed 	bl	8005576 <HAL_GPIO_TogglePin>
   	 HAL_Delay(1000);
 800179c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a0:	f003 fb6c 	bl	8004e7c <HAL_Delay>
   	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	487e      	ldr	r0, [pc, #504]	; (80019a0 <main+0x324>)
 80017a8:	f003 fee5 	bl	8005576 <HAL_GPIO_TogglePin>
   	 HAL_Delay(1000);
 80017ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b0:	f003 fb64 	bl	8004e7c <HAL_Delay>
   	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	487a      	ldr	r0, [pc, #488]	; (80019a0 <main+0x324>)
 80017b8:	f003 fedd 	bl	8005576 <HAL_GPIO_TogglePin>
   	 HAL_Delay(1000);
 80017bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c0:	f003 fb5c 	bl	8004e7c <HAL_Delay>
   	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	4876      	ldr	r0, [pc, #472]	; (80019a0 <main+0x324>)
 80017c8:	f003 fed5 	bl	8005576 <HAL_GPIO_TogglePin>
   	 printf("Checking sensor connection..\n");
 80017cc:	487c      	ldr	r0, [pc, #496]	; (80019c0 <main+0x344>)
 80017ce:	f007 fd91 	bl	80092f4 <puts>

   	 MPU9250SetDefault(&mpu);
 80017d2:	487c      	ldr	r0, [pc, #496]	; (80019c4 <main+0x348>)
 80017d4:	f001 ffd8 	bl	8003788 <MPU9250SetDefault>
   	while(!(setupMPU(&mpu, MPU9250_ADDRESS)==1)) {
 80017d8:	e01e      	b.n	8001818 <main+0x19c>
      	 HAL_Delay(100);
 80017da:	2064      	movs	r0, #100	; 0x64
 80017dc:	f003 fb4e 	bl	8004e7c <HAL_Delay>
      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	486f      	ldr	r0, [pc, #444]	; (80019a0 <main+0x324>)
 80017e4:	f003 fec7 	bl	8005576 <HAL_GPIO_TogglePin>
      	 HAL_Delay(100);
 80017e8:	2064      	movs	r0, #100	; 0x64
 80017ea:	f003 fb47 	bl	8004e7c <HAL_Delay>
      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	486b      	ldr	r0, [pc, #428]	; (80019a0 <main+0x324>)
 80017f2:	f003 fec0 	bl	8005576 <HAL_GPIO_TogglePin>
      	 HAL_Delay(100);
 80017f6:	2064      	movs	r0, #100	; 0x64
 80017f8:	f003 fb40 	bl	8004e7c <HAL_Delay>
      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	4868      	ldr	r0, [pc, #416]	; (80019a0 <main+0x324>)
 8001800:	f003 feb9 	bl	8005576 <HAL_GPIO_TogglePin>
      	 HAL_Delay(100);
 8001804:	2064      	movs	r0, #100	; 0x64
 8001806:	f003 fb39 	bl	8004e7c <HAL_Delay>
      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800180a:	2180      	movs	r1, #128	; 0x80
 800180c:	4864      	ldr	r0, [pc, #400]	; (80019a0 <main+0x324>)
 800180e:	f003 feb2 	bl	8005576 <HAL_GPIO_TogglePin>
      	 printf("\nMPU9250 failed. Program shutting down...\n");
 8001812:	486d      	ldr	r0, [pc, #436]	; (80019c8 <main+0x34c>)
 8001814:	f007 fd6e 	bl	80092f4 <puts>
   	while(!(setupMPU(&mpu, MPU9250_ADDRESS)==1)) {
 8001818:	21d0      	movs	r1, #208	; 0xd0
 800181a:	486a      	ldr	r0, [pc, #424]	; (80019c4 <main+0x348>)
 800181c:	f001 f957 	bl	8002ace <setupMPU>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d1d9      	bne.n	80017da <main+0x15e>

   	      }
   	printf("All sensors OK!\n\n");
 8001826:	4869      	ldr	r0, [pc, #420]	; (80019cc <main+0x350>)
 8001828:	f007 fd64 	bl	80092f4 <puts>


      HAL_Delay(10);
 800182c:	200a      	movs	r0, #10
 800182e:	f003 fb25 	bl	8004e7c <HAL_Delay>


  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0],0,roll_in_kp,roll_in_ki,roll_in_kd);
 8001832:	4b67      	ldr	r3, [pc, #412]	; (80019d0 <main+0x354>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <main+0x358>)
 800183a:	ed93 7a00 	vldr	s14, [r3]
 800183e:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <main+0x35c>)
 8001840:	edd3 6a00 	vldr	s13, [r3]
 8001844:	eeb0 1a66 	vmov.f32	s2, s13
 8001848:	eef0 0a47 	vmov.f32	s1, s14
 800184c:	eeb0 0a67 	vmov.f32	s0, s15
 8001850:	2100      	movs	r1, #0
 8001852:	4862      	ldr	r0, [pc, #392]	; (80019dc <main+0x360>)
 8001854:	f7ff fc48 	bl	80010e8 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8001858:	230a      	movs	r3, #10
 800185a:	2214      	movs	r2, #20
 800185c:	495f      	ldr	r1, [pc, #380]	; (80019dc <main+0x360>)
 800185e:	4860      	ldr	r0, [pc, #384]	; (80019e0 <main+0x364>)
 8001860:	f006 fbf6 	bl	8008050 <HAL_UART_Transmit>

  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll_out_kp, roll_out_ki, roll_out_kd);
 8001864:	4b5f      	ldr	r3, [pc, #380]	; (80019e4 <main+0x368>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <main+0x36c>)
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <main+0x370>)
 8001872:	edd3 6a00 	vldr	s13, [r3]
 8001876:	eeb0 1a66 	vmov.f32	s2, s13
 800187a:	eef0 0a47 	vmov.f32	s1, s14
 800187e:	eeb0 0a67 	vmov.f32	s0, s15
 8001882:	2101      	movs	r1, #1
 8001884:	4855      	ldr	r0, [pc, #340]	; (80019dc <main+0x360>)
 8001886:	f7ff fc2f 	bl	80010e8 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 800188a:	230a      	movs	r3, #10
 800188c:	2214      	movs	r2, #20
 800188e:	4953      	ldr	r1, [pc, #332]	; (80019dc <main+0x360>)
 8001890:	4853      	ldr	r0, [pc, #332]	; (80019e0 <main+0x364>)
 8001892:	f006 fbdd 	bl	8008050 <HAL_UART_Transmit>

  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8001896:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <main+0x374>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <main+0x378>)
 800189e:	ed93 7a00 	vldr	s14, [r3]
 80018a2:	4b55      	ldr	r3, [pc, #340]	; (80019f8 <main+0x37c>)
 80018a4:	edd3 6a00 	vldr	s13, [r3]
 80018a8:	eeb0 1a66 	vmov.f32	s2, s13
 80018ac:	eef0 0a47 	vmov.f32	s1, s14
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	2102      	movs	r1, #2
 80018b6:	4849      	ldr	r0, [pc, #292]	; (80019dc <main+0x360>)
 80018b8:	f7ff fc16 	bl	80010e8 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 80018bc:	230a      	movs	r3, #10
 80018be:	2214      	movs	r2, #20
 80018c0:	4946      	ldr	r1, [pc, #280]	; (80019dc <main+0x360>)
 80018c2:	4847      	ldr	r0, [pc, #284]	; (80019e0 <main+0x364>)
 80018c4:	f006 fbc4 	bl	8008050 <HAL_UART_Transmit>

  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch_out_kp, pitch_out_ki, pitch_out_kd);
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <main+0x380>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <main+0x384>)
 80018d0:	ed93 7a00 	vldr	s14, [r3]
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <main+0x388>)
 80018d6:	edd3 6a00 	vldr	s13, [r3]
 80018da:	eeb0 1a66 	vmov.f32	s2, s13
 80018de:	eef0 0a47 	vmov.f32	s1, s14
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	2103      	movs	r1, #3
 80018e8:	483c      	ldr	r0, [pc, #240]	; (80019dc <main+0x360>)
 80018ea:	f7ff fbfd 	bl	80010e8 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 80018ee:	230a      	movs	r3, #10
 80018f0:	2214      	movs	r2, #20
 80018f2:	493a      	ldr	r1, [pc, #232]	; (80019dc <main+0x360>)
 80018f4:	483a      	ldr	r0, [pc, #232]	; (80019e0 <main+0x364>)
 80018f6:	f006 fbab 	bl	8008050 <HAL_UART_Transmit>

  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <main+0x38c>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <main+0x390>)
 8001902:	ed93 7a00 	vldr	s14, [r3]
 8001906:	4b42      	ldr	r3, [pc, #264]	; (8001a10 <main+0x394>)
 8001908:	edd3 6a00 	vldr	s13, [r3]
 800190c:	eeb0 1a66 	vmov.f32	s2, s13
 8001910:	eef0 0a47 	vmov.f32	s1, s14
 8001914:	eeb0 0a67 	vmov.f32	s0, s15
 8001918:	2104      	movs	r1, #4
 800191a:	4830      	ldr	r0, [pc, #192]	; (80019dc <main+0x360>)
 800191c:	f7ff fbe4 	bl	80010e8 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8001920:	230a      	movs	r3, #10
 8001922:	2214      	movs	r2, #20
 8001924:	492d      	ldr	r1, [pc, #180]	; (80019dc <main+0x360>)
 8001926:	482e      	ldr	r0, [pc, #184]	; (80019e0 <main+0x364>)
 8001928:	f006 fb92 	bl	8008050 <HAL_UART_Transmit>

  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <main+0x398>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <main+0x39c>)
 8001934:	ed93 7a00 	vldr	s14, [r3]
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <main+0x3a0>)
 800193a:	edd3 6a00 	vldr	s13, [r3]
 800193e:	eeb0 1a66 	vmov.f32	s2, s13
 8001942:	eef0 0a47 	vmov.f32	s1, s14
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	2105      	movs	r1, #5
 800194c:	4823      	ldr	r0, [pc, #140]	; (80019dc <main+0x360>)
 800194e:	f7ff fbcb 	bl	80010e8 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8001952:	230a      	movs	r3, #10
 8001954:	2214      	movs	r2, #20
 8001956:	4921      	ldr	r1, [pc, #132]	; (80019dc <main+0x360>)
 8001958:	4821      	ldr	r0, [pc, #132]	; (80019e0 <main+0x364>)
 800195a:	f006 fb79 	bl	8008050 <HAL_UART_Transmit>
      //HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
      HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	492f      	ldr	r1, [pc, #188]	; (8001a20 <main+0x3a4>)
 8001962:	481f      	ldr	r0, [pc, #124]	; (80019e0 <main+0x364>)
 8001964:	f006 fc35 	bl	80081d2 <HAL_UART_Receive_IT>
      HAL_Delay(10);
 8001968:	200a      	movs	r0, #10
 800196a:	f003 fa87 	bl	8004e7c <HAL_Delay>

      for(int i=0;i<100;i++){
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e00f      	b.n	8001994 <main+0x318>
           if(updateMPU(&mpu)==1){
 8001974:	4813      	ldr	r0, [pc, #76]	; (80019c4 <main+0x348>)
 8001976:	f001 f943 	bl	8002c00 <updateMPU>
 800197a:	4603      	mov	r3, r0
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <main+0x312>
          	 //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,0);
          	 HAL_Delay(100);
 8001980:	2064      	movs	r0, #100	; 0x64
 8001982:	f003 fa7b 	bl	8004e7c <HAL_Delay>
          	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001986:	2140      	movs	r1, #64	; 0x40
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <main+0x324>)
 800198a:	f003 fdf4 	bl	8005576 <HAL_GPIO_TogglePin>
      for(int i=0;i<100;i++){
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3301      	adds	r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b63      	cmp	r3, #99	; 0x63
 8001998:	ddec      	ble.n	8001974 <main+0x2f8>
           }
       }
      while(!(ch.ch[4] > 1100 && ch.ch[2] <1010 )){
 800199a:	e062      	b.n	8001a62 <main+0x3e6>
 800199c:	20000374 	.word	0x20000374
 80019a0:	40020800 	.word	0x40020800
 80019a4:	2000032c 	.word	0x2000032c
 80019a8:	0800a4d0 	.word	0x0800a4d0
 80019ac:	2000009c 	.word	0x2000009c
 80019b0:	0800a4f8 	.word	0x0800a4f8
 80019b4:	200002e4 	.word	0x200002e4
 80019b8:	20000210 	.word	0x20000210
 80019bc:	40000400 	.word	0x40000400
 80019c0:	0800a504 	.word	0x0800a504
 80019c4:	20000150 	.word	0x20000150
 80019c8:	0800a524 	.word	0x0800a524
 80019cc:	0800a550 	.word	0x0800a550
 80019d0:	200000e0 	.word	0x200000e0
 80019d4:	200000e4 	.word	0x200000e4
 80019d8:	200000e8 	.word	0x200000e8
 80019dc:	200000a0 	.word	0x200000a0
 80019e0:	20000404 	.word	0x20000404
 80019e4:	200000ec 	.word	0x200000ec
 80019e8:	200000f0 	.word	0x200000f0
 80019ec:	200000f4 	.word	0x200000f4
 80019f0:	200000f8 	.word	0x200000f8
 80019f4:	200000fc 	.word	0x200000fc
 80019f8:	20000100 	.word	0x20000100
 80019fc:	20000104 	.word	0x20000104
 8001a00:	20000108 	.word	0x20000108
 8001a04:	2000010c 	.word	0x2000010c
 8001a08:	20000110 	.word	0x20000110
 8001a0c:	20000114 	.word	0x20000114
 8001a10:	20000118 	.word	0x20000118
 8001a14:	2000011c 	.word	0x2000011c
 8001a18:	20000120 	.word	0x20000120
 8001a1c:	20000124 	.word	0x20000124
 8001a20:	2000009d 	.word	0x2000009d
    	  	  	  	 HAL_Delay(100);
 8001a24:	2064      	movs	r0, #100	; 0x64
 8001a26:	f003 fa29 	bl	8004e7c <HAL_Delay>
    	        	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	48a4      	ldr	r0, [pc, #656]	; (8001cc0 <main+0x644>)
 8001a2e:	f003 fda2 	bl	8005576 <HAL_GPIO_TogglePin>
    	        	 HAL_Delay(100);
 8001a32:	2064      	movs	r0, #100	; 0x64
 8001a34:	f003 fa22 	bl	8004e7c <HAL_Delay>
    	        	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	48a1      	ldr	r0, [pc, #644]	; (8001cc0 <main+0x644>)
 8001a3c:	f003 fd9b 	bl	8005576 <HAL_GPIO_TogglePin>
    	        	 HAL_Delay(100);
 8001a40:	2064      	movs	r0, #100	; 0x64
 8001a42:	f003 fa1b 	bl	8004e7c <HAL_Delay>
    	        	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	489d      	ldr	r0, [pc, #628]	; (8001cc0 <main+0x644>)
 8001a4a:	f003 fd94 	bl	8005576 <HAL_GPIO_TogglePin>
    	        	 HAL_Delay(100);
 8001a4e:	2064      	movs	r0, #100	; 0x64
 8001a50:	f003 fa14 	bl	8004e7c <HAL_Delay>
    	        	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	489a      	ldr	r0, [pc, #616]	; (8001cc0 <main+0x644>)
 8001a58:	f003 fd8d 	bl	8005576 <HAL_GPIO_TogglePin>
    	        	 printf("\nControl don't ready. Program shutting down...\n");
 8001a5c:	4899      	ldr	r0, [pc, #612]	; (8001cc4 <main+0x648>)
 8001a5e:	f007 fc49 	bl	80092f4 <puts>
      while(!(ch.ch[4] > 1100 && ch.ch[2] <1010 )){
 8001a62:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <main+0x64c>)
 8001a64:	891b      	ldrh	r3, [r3, #8]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f240 424c 	movw	r2, #1100	; 0x44c
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d9d9      	bls.n	8001a24 <main+0x3a8>
 8001a70:	4b95      	ldr	r3, [pc, #596]	; (8001cc8 <main+0x64c>)
 8001a72:	889b      	ldrh	r3, [r3, #4]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d8d2      	bhi.n	8001a24 <main+0x3a8>

      }
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2140      	movs	r1, #64	; 0x40
 8001a82:	488f      	ldr	r0, [pc, #572]	; (8001cc0 <main+0x644>)
 8001a84:	f003 fd5e 	bl	8005544 <HAL_GPIO_WritePin>
      HAL_TIM_Base_Start(&htim2);
 8001a88:	4890      	ldr	r0, [pc, #576]	; (8001ccc <main+0x650>)
 8001a8a:	f005 fa49 	bl	8006f20 <HAL_TIM_Base_Start>
      loop_timer = __HAL_TIM_GET_COUNTER(&htim2);
 8001a8e:	4b8f      	ldr	r3, [pc, #572]	; (8001ccc <main+0x650>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	4a8e      	ldr	r2, [pc, #568]	; (8001cd0 <main+0x654>)
 8001a96:	6013      	str	r3, [r2, #0]
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a9e:	4888      	ldr	r0, [pc, #544]	; (8001cc0 <main+0x644>)
 8001aa0:	f003 fd50 	bl	8005544 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  time1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001aa4:	4b89      	ldr	r3, [pc, #548]	; (8001ccc <main+0x650>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	4a8a      	ldr	r2, [pc, #552]	; (8001cd4 <main+0x658>)
 8001aac:	6013      	str	r3, [r2, #0]
	  //ch.ch[5]=1000;
//tranfer
	  if((ch.ch[4] < 1600 && ch.ch[4] > 1400) && ch.ch[2] < 1005 )
 8001aae:	4b86      	ldr	r3, [pc, #536]	; (8001cc8 <main+0x64c>)
 8001ab0:	891b      	ldrh	r3, [r3, #8]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001ab8:	f080 834a 	bcs.w	8002150 <main+0xad4>
 8001abc:	4b82      	ldr	r3, [pc, #520]	; (8001cc8 <main+0x64c>)
 8001abe:	891b      	ldrh	r3, [r3, #8]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001ac6:	f240 8343 	bls.w	8002150 <main+0xad4>
 8001aca:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <main+0x64c>)
 8001acc:	889b      	ldrh	r3, [r3, #4]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 8001ad4:	f200 833c 	bhi.w	8002150 <main+0xad4>
	  {
			TIM3->CCR1 = 10500;
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <main+0x65c>)
 8001ada:	f642 1204 	movw	r2, #10500	; 0x2904
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 10500;
 8001ae0:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <main+0x65c>)
 8001ae2:	f642 1204 	movw	r2, #10500	; 0x2904
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 10500;
 8001ae8:	4b7b      	ldr	r3, [pc, #492]	; (8001cd8 <main+0x65c>)
 8001aea:	f642 1204 	movw	r2, #10500	; 0x2904
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR4 = 10500;
 8001af0:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <main+0x65c>)
 8001af2:	f642 1204 	movw	r2, #10500	; 0x2904
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
			if(telemetry_rx_cplt_flag == 1)
 8001af8:	4b78      	ldr	r3, [pc, #480]	; (8001cdc <main+0x660>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 8327 	bne.w	8002150 <main+0xad4>
			{
				telemetry_rx_cplt_flag = 0;
 8001b02:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <main+0x660>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]



			  unsigned char chksum = 0xff;
 8001b08:	23ff      	movs	r3, #255	; 0xff
 8001b0a:	72fb      	strb	r3, [r7, #11]
			  for(int i=0;i<19;i++) chksum = chksum - telemetry_rx_buf[i];
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	e009      	b.n	8001b26 <main+0x4aa>
 8001b12:	4a73      	ldr	r2, [pc, #460]	; (8001ce0 <main+0x664>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	7afa      	ldrb	r2, [r7, #11]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	72fb      	strb	r3, [r7, #11]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3301      	adds	r3, #1
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b12      	cmp	r3, #18
 8001b2a:	ddf2      	ble.n	8001b12 <main+0x496>

			  if(chksum == telemetry_rx_buf[19])
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <main+0x664>)
 8001b2e:	7cdb      	ldrb	r3, [r3, #19]
 8001b30:	7afa      	ldrb	r2, [r7, #11]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	f040 830c 	bne.w	8002150 <main+0xad4>
//				  TIM3->PSC = 1000;
//				  HAL_Delay(10);
//
//				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);

				  switch(telemetry_rx_buf[2])
 8001b38:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <main+0x664>)
 8001b3a:	789b      	ldrb	r3, [r3, #2]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	f200 8307 	bhi.w	8002150 <main+0xad4>
 8001b42:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <main+0x4cc>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001b8d 	.word	0x08001b8d
 8001b4c:	08001bf3 	.word	0x08001bf3
 8001b50:	08001c59 	.word	0x08001c59
 8001b54:	08001d25 	.word	0x08001d25
 8001b58:	08001d8b 	.word	0x08001d8b
 8001b5c:	08001df1 	.word	0x08001df1
 8001b60:	08002151 	.word	0x08002151
 8001b64:	08002151 	.word	0x08002151
 8001b68:	08002151 	.word	0x08002151
 8001b6c:	08002151 	.word	0x08002151
 8001b70:	08002151 	.word	0x08002151
 8001b74:	08002151 	.word	0x08002151
 8001b78:	08002151 	.word	0x08002151
 8001b7c:	08002151 	.word	0x08002151
 8001b80:	08002151 	.word	0x08002151
 8001b84:	08002151 	.word	0x08002151
 8001b88:	08001e57 	.word	0x08001e57
				  {
				  case 0:
					  roll_in_kp = *(float*)&telemetry_rx_buf[3];
 8001b8c:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <main+0x668>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a55      	ldr	r2, [pc, #340]	; (8001ce8 <main+0x66c>)
 8001b92:	6013      	str	r3, [r2, #0]
					  roll_in_ki = *(float*)&telemetry_rx_buf[7];
 8001b94:	4b55      	ldr	r3, [pc, #340]	; (8001cec <main+0x670>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a55      	ldr	r2, [pc, #340]	; (8001cf0 <main+0x674>)
 8001b9a:	6013      	str	r3, [r2, #0]
					  roll_in_kd = *(float*)&telemetry_rx_buf[11];
 8001b9c:	4b55      	ldr	r3, [pc, #340]	; (8001cf4 <main+0x678>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a55      	ldr	r2, [pc, #340]	; (8001cf8 <main+0x67c>)
 8001ba2:	6013      	str	r3, [r2, #0]
					  roll.in.kp = *(float*)&telemetry_rx_buf[3];
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <main+0x668>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a54      	ldr	r2, [pc, #336]	; (8001cfc <main+0x680>)
 8001baa:	6013      	str	r3, [r2, #0]
					  roll.in.ki = *(float*)&telemetry_rx_buf[7];
 8001bac:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <main+0x670>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <main+0x680>)
 8001bb2:	6053      	str	r3, [r2, #4]
					  roll.in.kd = *(float*)&telemetry_rx_buf[11];
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <main+0x678>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a50      	ldr	r2, [pc, #320]	; (8001cfc <main+0x680>)
 8001bba:	6093      	str	r3, [r2, #8]
					  //EP_PIDGain_Write(telemetry_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
					  //EP_PIDGain_Read(telemetry_rx_buf[2], &roll_in_kp, &roll_in_ki, &roll_in_kd);
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
 8001bbc:	4b48      	ldr	r3, [pc, #288]	; (8001ce0 <main+0x664>)
 8001bbe:	789b      	ldrb	r3, [r3, #2]
 8001bc0:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <main+0x66c>)
 8001bc2:	edd2 7a00 	vldr	s15, [r2]
 8001bc6:	4a4a      	ldr	r2, [pc, #296]	; (8001cf0 <main+0x674>)
 8001bc8:	ed92 7a00 	vldr	s14, [r2]
 8001bcc:	4a4a      	ldr	r2, [pc, #296]	; (8001cf8 <main+0x67c>)
 8001bce:	edd2 6a00 	vldr	s13, [r2]
 8001bd2:	eeb0 1a66 	vmov.f32	s2, s13
 8001bd6:	eef0 0a47 	vmov.f32	s1, s14
 8001bda:	eeb0 0a67 	vmov.f32	s0, s15
 8001bde:	4619      	mov	r1, r3
 8001be0:	4847      	ldr	r0, [pc, #284]	; (8001d00 <main+0x684>)
 8001be2:	f7ff fa81 	bl	80010e8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart2, &telemetry_tx_buf[0], 20);
 8001be6:	2214      	movs	r2, #20
 8001be8:	4945      	ldr	r1, [pc, #276]	; (8001d00 <main+0x684>)
 8001bea:	4846      	ldr	r0, [pc, #280]	; (8001d04 <main+0x688>)
 8001bec:	f006 fabb 	bl	8008166 <HAL_UART_Transmit_IT>
					  break;
 8001bf0:	e2ae      	b.n	8002150 <main+0xad4>
				  case 1:
					  roll_out_kp = *(float*)&telemetry_rx_buf[3];
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <main+0x668>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a44      	ldr	r2, [pc, #272]	; (8001d08 <main+0x68c>)
 8001bf8:	6013      	str	r3, [r2, #0]
					  roll_out_ki = *(float*)&telemetry_rx_buf[7];
 8001bfa:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <main+0x670>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <main+0x690>)
 8001c00:	6013      	str	r3, [r2, #0]
					  roll_out_kd = *(float*)&telemetry_rx_buf[11];
 8001c02:	4b3c      	ldr	r3, [pc, #240]	; (8001cf4 <main+0x678>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a42      	ldr	r2, [pc, #264]	; (8001d10 <main+0x694>)
 8001c08:	6013      	str	r3, [r2, #0]
					  roll.out.kp = *(float*)&telemetry_rx_buf[3];
 8001c0a:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <main+0x668>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a3b      	ldr	r2, [pc, #236]	; (8001cfc <main+0x680>)
 8001c10:	6393      	str	r3, [r2, #56]	; 0x38
					  roll.out.ki = *(float*)&telemetry_rx_buf[7];
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <main+0x670>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <main+0x680>)
 8001c18:	63d3      	str	r3, [r2, #60]	; 0x3c
					  roll.out.kd = *(float*)&telemetry_rx_buf[11];
 8001c1a:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <main+0x678>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a37      	ldr	r2, [pc, #220]	; (8001cfc <main+0x680>)
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
					  //EP_PIDGain_Write(telemetry_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
					 // EP_PIDGain_Read(telemetry_rx_buf[2], &roll_out_kp, &roll_out_ki, &roll_out_kd);
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <main+0x664>)
 8001c24:	789b      	ldrb	r3, [r3, #2]
 8001c26:	4a38      	ldr	r2, [pc, #224]	; (8001d08 <main+0x68c>)
 8001c28:	edd2 7a00 	vldr	s15, [r2]
 8001c2c:	4a37      	ldr	r2, [pc, #220]	; (8001d0c <main+0x690>)
 8001c2e:	ed92 7a00 	vldr	s14, [r2]
 8001c32:	4a37      	ldr	r2, [pc, #220]	; (8001d10 <main+0x694>)
 8001c34:	edd2 6a00 	vldr	s13, [r2]
 8001c38:	eeb0 1a66 	vmov.f32	s2, s13
 8001c3c:	eef0 0a47 	vmov.f32	s1, s14
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	4619      	mov	r1, r3
 8001c46:	482e      	ldr	r0, [pc, #184]	; (8001d00 <main+0x684>)
 8001c48:	f7ff fa4e 	bl	80010e8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart2, &telemetry_tx_buf[0], 20);
 8001c4c:	2214      	movs	r2, #20
 8001c4e:	492c      	ldr	r1, [pc, #176]	; (8001d00 <main+0x684>)
 8001c50:	482c      	ldr	r0, [pc, #176]	; (8001d04 <main+0x688>)
 8001c52:	f006 fa88 	bl	8008166 <HAL_UART_Transmit_IT>
					  break;
 8001c56:	e27b      	b.n	8002150 <main+0xad4>
				  case 2:
					  pitch_in_kp = *(float*)&telemetry_rx_buf[3];
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <main+0x668>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a2d      	ldr	r2, [pc, #180]	; (8001d14 <main+0x698>)
 8001c5e:	6013      	str	r3, [r2, #0]
					  pitch_in_ki = *(float*)&telemetry_rx_buf[7];
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <main+0x670>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a2c      	ldr	r2, [pc, #176]	; (8001d18 <main+0x69c>)
 8001c66:	6013      	str	r3, [r2, #0]
					  pitch_in_kd = *(float*)&telemetry_rx_buf[11];
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <main+0x678>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a2b      	ldr	r2, [pc, #172]	; (8001d1c <main+0x6a0>)
 8001c6e:	6013      	str	r3, [r2, #0]
					  pitch.in.kp = *(float*)&telemetry_rx_buf[3];
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <main+0x668>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <main+0x6a4>)
 8001c76:	6013      	str	r3, [r2, #0]
					  pitch.in.ki = *(float*)&telemetry_rx_buf[7];
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <main+0x670>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a28      	ldr	r2, [pc, #160]	; (8001d20 <main+0x6a4>)
 8001c7e:	6053      	str	r3, [r2, #4]
					  pitch.in.kd = *(float*)&telemetry_rx_buf[11];
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <main+0x678>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <main+0x6a4>)
 8001c86:	6093      	str	r3, [r2, #8]
					  //EP_PIDGain_Write(telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
					  //EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_in_kp, &pitch_in_ki, &pitch_in_kd);
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <main+0x664>)
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <main+0x698>)
 8001c8e:	edd2 7a00 	vldr	s15, [r2]
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <main+0x69c>)
 8001c94:	ed92 7a00 	vldr	s14, [r2]
 8001c98:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <main+0x6a0>)
 8001c9a:	edd2 6a00 	vldr	s13, [r2]
 8001c9e:	eeb0 1a66 	vmov.f32	s2, s13
 8001ca2:	eef0 0a47 	vmov.f32	s1, s14
 8001ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8001caa:	4619      	mov	r1, r3
 8001cac:	4814      	ldr	r0, [pc, #80]	; (8001d00 <main+0x684>)
 8001cae:	f7ff fa1b 	bl	80010e8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart2, &telemetry_tx_buf[0], 20);
 8001cb2:	2214      	movs	r2, #20
 8001cb4:	4912      	ldr	r1, [pc, #72]	; (8001d00 <main+0x684>)
 8001cb6:	4813      	ldr	r0, [pc, #76]	; (8001d04 <main+0x688>)
 8001cb8:	f006 fa55 	bl	8008166 <HAL_UART_Transmit_IT>
					  break;
 8001cbc:	e248      	b.n	8002150 <main+0xad4>
 8001cbe:	bf00      	nop
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	0800a564 	.word	0x0800a564
 8001cc8:	20000210 	.word	0x20000210
 8001ccc:	2000029c 	.word	0x2000029c
 8001cd0:	20000128 	.word	0x20000128
 8001cd4:	20000130 	.word	0x20000130
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	200000dc 	.word	0x200000dc
 8001ce0:	200000c8 	.word	0x200000c8
 8001ce4:	200000cb 	.word	0x200000cb
 8001ce8:	200000e0 	.word	0x200000e0
 8001cec:	200000cf 	.word	0x200000cf
 8001cf0:	200000e4 	.word	0x200000e4
 8001cf4:	200000d3 	.word	0x200000d3
 8001cf8:	200000e8 	.word	0x200000e8
 8001cfc:	20000460 	.word	0x20000460
 8001d00:	200000a0 	.word	0x200000a0
 8001d04:	20000404 	.word	0x20000404
 8001d08:	200000ec 	.word	0x200000ec
 8001d0c:	200000f0 	.word	0x200000f0
 8001d10:	200000f4 	.word	0x200000f4
 8001d14:	200000f8 	.word	0x200000f8
 8001d18:	200000fc 	.word	0x200000fc
 8001d1c:	20000100 	.word	0x20000100
 8001d20:	200004d0 	.word	0x200004d0
				  case 3:
					  pitch_out_kp = *(float*)&telemetry_rx_buf[3];
 8001d24:	4bab      	ldr	r3, [pc, #684]	; (8001fd4 <main+0x958>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4aab      	ldr	r2, [pc, #684]	; (8001fd8 <main+0x95c>)
 8001d2a:	6013      	str	r3, [r2, #0]
					  pitch_out_ki = *(float*)&telemetry_rx_buf[7];
 8001d2c:	4bab      	ldr	r3, [pc, #684]	; (8001fdc <main+0x960>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4aab      	ldr	r2, [pc, #684]	; (8001fe0 <main+0x964>)
 8001d32:	6013      	str	r3, [r2, #0]
					  pitch_out_kd = *(float*)&telemetry_rx_buf[11];
 8001d34:	4bab      	ldr	r3, [pc, #684]	; (8001fe4 <main+0x968>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4aab      	ldr	r2, [pc, #684]	; (8001fe8 <main+0x96c>)
 8001d3a:	6013      	str	r3, [r2, #0]
					  pitch.out.kp = *(float*)&telemetry_rx_buf[3];
 8001d3c:	4ba5      	ldr	r3, [pc, #660]	; (8001fd4 <main+0x958>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4aaa      	ldr	r2, [pc, #680]	; (8001fec <main+0x970>)
 8001d42:	6393      	str	r3, [r2, #56]	; 0x38
					  pitch.out.ki = *(float*)&telemetry_rx_buf[7];
 8001d44:	4ba5      	ldr	r3, [pc, #660]	; (8001fdc <main+0x960>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4aa8      	ldr	r2, [pc, #672]	; (8001fec <main+0x970>)
 8001d4a:	63d3      	str	r3, [r2, #60]	; 0x3c
					  pitch.out.kd = *(float*)&telemetry_rx_buf[11];
 8001d4c:	4ba5      	ldr	r3, [pc, #660]	; (8001fe4 <main+0x968>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4aa6      	ldr	r2, [pc, #664]	; (8001fec <main+0x970>)
 8001d52:	6413      	str	r3, [r2, #64]	; 0x40
					  //EP_PIDGain_Write(telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
					  //EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_out_kp, &pitch_out_ki, &pitch_out_kd);
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 8001d54:	4ba6      	ldr	r3, [pc, #664]	; (8001ff0 <main+0x974>)
 8001d56:	789b      	ldrb	r3, [r3, #2]
 8001d58:	4a9f      	ldr	r2, [pc, #636]	; (8001fd8 <main+0x95c>)
 8001d5a:	edd2 7a00 	vldr	s15, [r2]
 8001d5e:	4aa0      	ldr	r2, [pc, #640]	; (8001fe0 <main+0x964>)
 8001d60:	ed92 7a00 	vldr	s14, [r2]
 8001d64:	4aa0      	ldr	r2, [pc, #640]	; (8001fe8 <main+0x96c>)
 8001d66:	edd2 6a00 	vldr	s13, [r2]
 8001d6a:	eeb0 1a66 	vmov.f32	s2, s13
 8001d6e:	eef0 0a47 	vmov.f32	s1, s14
 8001d72:	eeb0 0a67 	vmov.f32	s0, s15
 8001d76:	4619      	mov	r1, r3
 8001d78:	489e      	ldr	r0, [pc, #632]	; (8001ff4 <main+0x978>)
 8001d7a:	f7ff f9b5 	bl	80010e8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart2, &telemetry_tx_buf[0], 20);
 8001d7e:	2214      	movs	r2, #20
 8001d80:	499c      	ldr	r1, [pc, #624]	; (8001ff4 <main+0x978>)
 8001d82:	489d      	ldr	r0, [pc, #628]	; (8001ff8 <main+0x97c>)
 8001d84:	f006 f9ef 	bl	8008166 <HAL_UART_Transmit_IT>
					  break;
 8001d88:	e1e2      	b.n	8002150 <main+0xad4>
				  case 4:
					  yaw_heading_kp = *(float*)&telemetry_rx_buf[3];
 8001d8a:	4b92      	ldr	r3, [pc, #584]	; (8001fd4 <main+0x958>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a9b      	ldr	r2, [pc, #620]	; (8001ffc <main+0x980>)
 8001d90:	6013      	str	r3, [r2, #0]
					  yaw_heading_ki = *(float*)&telemetry_rx_buf[7];
 8001d92:	4b92      	ldr	r3, [pc, #584]	; (8001fdc <main+0x960>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a9a      	ldr	r2, [pc, #616]	; (8002000 <main+0x984>)
 8001d98:	6013      	str	r3, [r2, #0]
					  yaw_heading_kd = *(float*)&telemetry_rx_buf[11];
 8001d9a:	4b92      	ldr	r3, [pc, #584]	; (8001fe4 <main+0x968>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a99      	ldr	r2, [pc, #612]	; (8002004 <main+0x988>)
 8001da0:	6013      	str	r3, [r2, #0]
					  yaw_heading.kp = *(float*)&telemetry_rx_buf[3];
 8001da2:	4b8c      	ldr	r3, [pc, #560]	; (8001fd4 <main+0x958>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a98      	ldr	r2, [pc, #608]	; (8002008 <main+0x98c>)
 8001da8:	6013      	str	r3, [r2, #0]
					  yaw_heading.ki = *(float*)&telemetry_rx_buf[7];
 8001daa:	4b8c      	ldr	r3, [pc, #560]	; (8001fdc <main+0x960>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a96      	ldr	r2, [pc, #600]	; (8002008 <main+0x98c>)
 8001db0:	6053      	str	r3, [r2, #4]
					  yaw_heading.kd = *(float*)&telemetry_rx_buf[11];
 8001db2:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <main+0x968>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a94      	ldr	r2, [pc, #592]	; (8002008 <main+0x98c>)
 8001db8:	6093      	str	r3, [r2, #8]
					  //EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
					  //EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd);
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8001dba:	4b8d      	ldr	r3, [pc, #564]	; (8001ff0 <main+0x974>)
 8001dbc:	789b      	ldrb	r3, [r3, #2]
 8001dbe:	4a8f      	ldr	r2, [pc, #572]	; (8001ffc <main+0x980>)
 8001dc0:	edd2 7a00 	vldr	s15, [r2]
 8001dc4:	4a8e      	ldr	r2, [pc, #568]	; (8002000 <main+0x984>)
 8001dc6:	ed92 7a00 	vldr	s14, [r2]
 8001dca:	4a8e      	ldr	r2, [pc, #568]	; (8002004 <main+0x988>)
 8001dcc:	edd2 6a00 	vldr	s13, [r2]
 8001dd0:	eeb0 1a66 	vmov.f32	s2, s13
 8001dd4:	eef0 0a47 	vmov.f32	s1, s14
 8001dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4885      	ldr	r0, [pc, #532]	; (8001ff4 <main+0x978>)
 8001de0:	f7ff f982 	bl	80010e8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart2, &telemetry_tx_buf[0], 20);
 8001de4:	2214      	movs	r2, #20
 8001de6:	4983      	ldr	r1, [pc, #524]	; (8001ff4 <main+0x978>)
 8001de8:	4883      	ldr	r0, [pc, #524]	; (8001ff8 <main+0x97c>)
 8001dea:	f006 f9bc 	bl	8008166 <HAL_UART_Transmit_IT>
					  break;
 8001dee:	e1af      	b.n	8002150 <main+0xad4>
				  case 5:
					  yaw_rate_kp = *(float*)&telemetry_rx_buf[3];
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <main+0x958>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a85      	ldr	r2, [pc, #532]	; (800200c <main+0x990>)
 8001df6:	6013      	str	r3, [r2, #0]
					  yaw_rate_ki = *(float*)&telemetry_rx_buf[7];
 8001df8:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <main+0x960>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a84      	ldr	r2, [pc, #528]	; (8002010 <main+0x994>)
 8001dfe:	6013      	str	r3, [r2, #0]
					  yaw_rate_kd = *(float*)&telemetry_rx_buf[11];
 8001e00:	4b78      	ldr	r3, [pc, #480]	; (8001fe4 <main+0x968>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a83      	ldr	r2, [pc, #524]	; (8002014 <main+0x998>)
 8001e06:	6013      	str	r3, [r2, #0]
					  yaw_rate.kp = *(float*)&telemetry_rx_buf[3];
 8001e08:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <main+0x958>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a82      	ldr	r2, [pc, #520]	; (8002018 <main+0x99c>)
 8001e0e:	6013      	str	r3, [r2, #0]
					  yaw_rate.ki = *(float*)&telemetry_rx_buf[7];
 8001e10:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <main+0x960>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a80      	ldr	r2, [pc, #512]	; (8002018 <main+0x99c>)
 8001e16:	6053      	str	r3, [r2, #4]
					  yaw_rate.kd = *(float*)&telemetry_rx_buf[11];
 8001e18:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <main+0x968>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a7e      	ldr	r2, [pc, #504]	; (8002018 <main+0x99c>)
 8001e1e:	6093      	str	r3, [r2, #8]
					  //EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
					  //EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd);
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8001e20:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <main+0x974>)
 8001e22:	789b      	ldrb	r3, [r3, #2]
 8001e24:	4a79      	ldr	r2, [pc, #484]	; (800200c <main+0x990>)
 8001e26:	edd2 7a00 	vldr	s15, [r2]
 8001e2a:	4a79      	ldr	r2, [pc, #484]	; (8002010 <main+0x994>)
 8001e2c:	ed92 7a00 	vldr	s14, [r2]
 8001e30:	4a78      	ldr	r2, [pc, #480]	; (8002014 <main+0x998>)
 8001e32:	edd2 6a00 	vldr	s13, [r2]
 8001e36:	eeb0 1a66 	vmov.f32	s2, s13
 8001e3a:	eef0 0a47 	vmov.f32	s1, s14
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	4619      	mov	r1, r3
 8001e44:	486b      	ldr	r0, [pc, #428]	; (8001ff4 <main+0x978>)
 8001e46:	f7ff f94f 	bl	80010e8 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart2, &telemetry_tx_buf[0], 20);
 8001e4a:	2214      	movs	r2, #20
 8001e4c:	4969      	ldr	r1, [pc, #420]	; (8001ff4 <main+0x978>)
 8001e4e:	486a      	ldr	r0, [pc, #424]	; (8001ff8 <main+0x97c>)
 8001e50:	f006 f989 	bl	8008166 <HAL_UART_Transmit_IT>
					  break;
 8001e54:	e17c      	b.n	8002150 <main+0xad4>
				  case 0x10:
					  switch(telemetry_rx_buf[3])
 8001e56:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <main+0x974>)
 8001e58:	78db      	ldrb	r3, [r3, #3]
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	f200 8177 	bhi.w	800214e <main+0xad2>
 8001e60:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <main+0x7ec>)
 8001e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001e85 	.word	0x08001e85
 8001e6c:	08001ebd 	.word	0x08001ebd
 8001e70:	08001ef5 	.word	0x08001ef5
 8001e74:	08001f2d 	.word	0x08001f2d
 8001e78:	08001f65 	.word	0x08001f65
 8001e7c:	08001f9d 	.word	0x08001f9d
 8001e80:	08002021 	.word	0x08002021
					  {

					  case 0:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.in.kp, roll.in.ki, roll.in.kd);
 8001e84:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <main+0x974>)
 8001e86:	78db      	ldrb	r3, [r3, #3]
 8001e88:	4a64      	ldr	r2, [pc, #400]	; (800201c <main+0x9a0>)
 8001e8a:	edd2 7a00 	vldr	s15, [r2]
 8001e8e:	4a63      	ldr	r2, [pc, #396]	; (800201c <main+0x9a0>)
 8001e90:	ed92 7a01 	vldr	s14, [r2, #4]
 8001e94:	4a61      	ldr	r2, [pc, #388]	; (800201c <main+0x9a0>)
 8001e96:	edd2 6a02 	vldr	s13, [r2, #8]
 8001e9a:	eeb0 1a66 	vmov.f32	s2, s13
 8001e9e:	eef0 0a47 	vmov.f32	s1, s14
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4852      	ldr	r0, [pc, #328]	; (8001ff4 <main+0x978>)
 8001eaa:	f7ff f91d 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8001eae:	230a      	movs	r3, #10
 8001eb0:	2214      	movs	r2, #20
 8001eb2:	4950      	ldr	r1, [pc, #320]	; (8001ff4 <main+0x978>)
 8001eb4:	4850      	ldr	r0, [pc, #320]	; (8001ff8 <main+0x97c>)
 8001eb6:	f006 f8cb 	bl	8008050 <HAL_UART_Transmit>
						  break;
 8001eba:	e148      	b.n	800214e <main+0xad2>
					  case 1:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.out.kp, roll.out.ki, roll.out.kd);
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <main+0x974>)
 8001ebe:	78db      	ldrb	r3, [r3, #3]
 8001ec0:	4a56      	ldr	r2, [pc, #344]	; (800201c <main+0x9a0>)
 8001ec2:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8001ec6:	4a55      	ldr	r2, [pc, #340]	; (800201c <main+0x9a0>)
 8001ec8:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8001ecc:	4a53      	ldr	r2, [pc, #332]	; (800201c <main+0x9a0>)
 8001ece:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 8001ed2:	eeb0 1a66 	vmov.f32	s2, s13
 8001ed6:	eef0 0a47 	vmov.f32	s1, s14
 8001eda:	eeb0 0a67 	vmov.f32	s0, s15
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4844      	ldr	r0, [pc, #272]	; (8001ff4 <main+0x978>)
 8001ee2:	f7ff f901 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	2214      	movs	r2, #20
 8001eea:	4942      	ldr	r1, [pc, #264]	; (8001ff4 <main+0x978>)
 8001eec:	4842      	ldr	r0, [pc, #264]	; (8001ff8 <main+0x97c>)
 8001eee:	f006 f8af 	bl	8008050 <HAL_UART_Transmit>
						  break;
 8001ef2:	e12c      	b.n	800214e <main+0xad2>
					  case 2:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8001ef4:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <main+0x974>)
 8001ef6:	78db      	ldrb	r3, [r3, #3]
 8001ef8:	4a3c      	ldr	r2, [pc, #240]	; (8001fec <main+0x970>)
 8001efa:	edd2 7a00 	vldr	s15, [r2]
 8001efe:	4a3b      	ldr	r2, [pc, #236]	; (8001fec <main+0x970>)
 8001f00:	ed92 7a01 	vldr	s14, [r2, #4]
 8001f04:	4a39      	ldr	r2, [pc, #228]	; (8001fec <main+0x970>)
 8001f06:	edd2 6a02 	vldr	s13, [r2, #8]
 8001f0a:	eeb0 1a66 	vmov.f32	s2, s13
 8001f0e:	eef0 0a47 	vmov.f32	s1, s14
 8001f12:	eeb0 0a67 	vmov.f32	s0, s15
 8001f16:	4619      	mov	r1, r3
 8001f18:	4836      	ldr	r0, [pc, #216]	; (8001ff4 <main+0x978>)
 8001f1a:	f7ff f8e5 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8001f1e:	230a      	movs	r3, #10
 8001f20:	2214      	movs	r2, #20
 8001f22:	4934      	ldr	r1, [pc, #208]	; (8001ff4 <main+0x978>)
 8001f24:	4834      	ldr	r0, [pc, #208]	; (8001ff8 <main+0x97c>)
 8001f26:	f006 f893 	bl	8008050 <HAL_UART_Transmit>
						  break;
 8001f2a:	e110      	b.n	800214e <main+0xad2>
					  case 3:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8001f2c:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <main+0x974>)
 8001f2e:	78db      	ldrb	r3, [r3, #3]
 8001f30:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <main+0x970>)
 8001f32:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8001f36:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <main+0x970>)
 8001f38:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <main+0x970>)
 8001f3e:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 8001f42:	eeb0 1a66 	vmov.f32	s2, s13
 8001f46:	eef0 0a47 	vmov.f32	s1, s14
 8001f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4828      	ldr	r0, [pc, #160]	; (8001ff4 <main+0x978>)
 8001f52:	f7ff f8c9 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8001f56:	230a      	movs	r3, #10
 8001f58:	2214      	movs	r2, #20
 8001f5a:	4926      	ldr	r1, [pc, #152]	; (8001ff4 <main+0x978>)
 8001f5c:	4826      	ldr	r0, [pc, #152]	; (8001ff8 <main+0x97c>)
 8001f5e:	f006 f877 	bl	8008050 <HAL_UART_Transmit>
						  break;
 8001f62:	e0f4      	b.n	800214e <main+0xad2>
					  case 4:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <main+0x974>)
 8001f66:	78db      	ldrb	r3, [r3, #3]
 8001f68:	4a27      	ldr	r2, [pc, #156]	; (8002008 <main+0x98c>)
 8001f6a:	edd2 7a00 	vldr	s15, [r2]
 8001f6e:	4a26      	ldr	r2, [pc, #152]	; (8002008 <main+0x98c>)
 8001f70:	ed92 7a01 	vldr	s14, [r2, #4]
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <main+0x98c>)
 8001f76:	edd2 6a02 	vldr	s13, [r2, #8]
 8001f7a:	eeb0 1a66 	vmov.f32	s2, s13
 8001f7e:	eef0 0a47 	vmov.f32	s1, s14
 8001f82:	eeb0 0a67 	vmov.f32	s0, s15
 8001f86:	4619      	mov	r1, r3
 8001f88:	481a      	ldr	r0, [pc, #104]	; (8001ff4 <main+0x978>)
 8001f8a:	f7ff f8ad 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8001f8e:	230a      	movs	r3, #10
 8001f90:	2214      	movs	r2, #20
 8001f92:	4918      	ldr	r1, [pc, #96]	; (8001ff4 <main+0x978>)
 8001f94:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <main+0x97c>)
 8001f96:	f006 f85b 	bl	8008050 <HAL_UART_Transmit>
						  break;
 8001f9a:	e0d8      	b.n	800214e <main+0xad2>
					  case 5:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <main+0x974>)
 8001f9e:	78db      	ldrb	r3, [r3, #3]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <main+0x99c>)
 8001fa2:	edd2 7a00 	vldr	s15, [r2]
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <main+0x99c>)
 8001fa8:	ed92 7a01 	vldr	s14, [r2, #4]
 8001fac:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <main+0x99c>)
 8001fae:	edd2 6a02 	vldr	s13, [r2, #8]
 8001fb2:	eeb0 1a66 	vmov.f32	s2, s13
 8001fb6:	eef0 0a47 	vmov.f32	s1, s14
 8001fba:	eeb0 0a67 	vmov.f32	s0, s15
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <main+0x978>)
 8001fc2:	f7ff f891 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	2214      	movs	r2, #20
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <main+0x978>)
 8001fcc:	480a      	ldr	r0, [pc, #40]	; (8001ff8 <main+0x97c>)
 8001fce:	f006 f83f 	bl	8008050 <HAL_UART_Transmit>
						  break;
 8001fd2:	e0bc      	b.n	800214e <main+0xad2>
 8001fd4:	200000cb 	.word	0x200000cb
 8001fd8:	20000104 	.word	0x20000104
 8001fdc:	200000cf 	.word	0x200000cf
 8001fe0:	20000108 	.word	0x20000108
 8001fe4:	200000d3 	.word	0x200000d3
 8001fe8:	2000010c 	.word	0x2000010c
 8001fec:	200004d0 	.word	0x200004d0
 8001ff0:	200000c8 	.word	0x200000c8
 8001ff4:	200000a0 	.word	0x200000a0
 8001ff8:	20000404 	.word	0x20000404
 8001ffc:	20000110 	.word	0x20000110
 8002000:	20000114 	.word	0x20000114
 8002004:	20000118 	.word	0x20000118
 8002008:	20000540 	.word	0x20000540
 800200c:	2000011c 	.word	0x2000011c
 8002010:	20000120 	.word	0x20000120
 8002014:	20000124 	.word	0x20000124
 8002018:	20000578 	.word	0x20000578
 800201c:	20000460 	.word	0x20000460
					  case 6:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 8002020:	4b55      	ldr	r3, [pc, #340]	; (8002178 <main+0xafc>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	4b54      	ldr	r3, [pc, #336]	; (8002178 <main+0xafc>)
 8002028:	ed93 7a01 	vldr	s14, [r3, #4]
 800202c:	4b52      	ldr	r3, [pc, #328]	; (8002178 <main+0xafc>)
 800202e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002032:	eeb0 1a66 	vmov.f32	s2, s13
 8002036:	eef0 0a47 	vmov.f32	s1, s14
 800203a:	eeb0 0a67 	vmov.f32	s0, s15
 800203e:	2100      	movs	r1, #0
 8002040:	484e      	ldr	r0, [pc, #312]	; (800217c <main+0xb00>)
 8002042:	f7ff f851 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8002046:	230a      	movs	r3, #10
 8002048:	2214      	movs	r2, #20
 800204a:	494c      	ldr	r1, [pc, #304]	; (800217c <main+0xb00>)
 800204c:	484c      	ldr	r0, [pc, #304]	; (8002180 <main+0xb04>)
 800204e:	f005 ffff 	bl	8008050 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 8002052:	4b49      	ldr	r3, [pc, #292]	; (8002178 <main+0xafc>)
 8002054:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002058:	4b47      	ldr	r3, [pc, #284]	; (8002178 <main+0xafc>)
 800205a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800205e:	4b46      	ldr	r3, [pc, #280]	; (8002178 <main+0xafc>)
 8002060:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002064:	eeb0 1a66 	vmov.f32	s2, s13
 8002068:	eef0 0a47 	vmov.f32	s1, s14
 800206c:	eeb0 0a67 	vmov.f32	s0, s15
 8002070:	2101      	movs	r1, #1
 8002072:	4842      	ldr	r0, [pc, #264]	; (800217c <main+0xb00>)
 8002074:	f7ff f838 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8002078:	230a      	movs	r3, #10
 800207a:	2214      	movs	r2, #20
 800207c:	493f      	ldr	r1, [pc, #252]	; (800217c <main+0xb00>)
 800207e:	4840      	ldr	r0, [pc, #256]	; (8002180 <main+0xb04>)
 8002080:	f005 ffe6 	bl	8008050 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <main+0xb08>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <main+0xb08>)
 800208c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <main+0xb08>)
 8002092:	edd3 6a02 	vldr	s13, [r3, #8]
 8002096:	eeb0 1a66 	vmov.f32	s2, s13
 800209a:	eef0 0a47 	vmov.f32	s1, s14
 800209e:	eeb0 0a67 	vmov.f32	s0, s15
 80020a2:	2102      	movs	r1, #2
 80020a4:	4835      	ldr	r0, [pc, #212]	; (800217c <main+0xb00>)
 80020a6:	f7ff f81f 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 80020aa:	230a      	movs	r3, #10
 80020ac:	2214      	movs	r2, #20
 80020ae:	4933      	ldr	r1, [pc, #204]	; (800217c <main+0xb00>)
 80020b0:	4833      	ldr	r0, [pc, #204]	; (8002180 <main+0xb04>)
 80020b2:	f005 ffcd 	bl	8008050 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <main+0xb08>)
 80020b8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <main+0xb08>)
 80020be:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80020c2:	4b30      	ldr	r3, [pc, #192]	; (8002184 <main+0xb08>)
 80020c4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80020c8:	eeb0 1a66 	vmov.f32	s2, s13
 80020cc:	eef0 0a47 	vmov.f32	s1, s14
 80020d0:	eeb0 0a67 	vmov.f32	s0, s15
 80020d4:	2103      	movs	r1, #3
 80020d6:	4829      	ldr	r0, [pc, #164]	; (800217c <main+0xb00>)
 80020d8:	f7ff f806 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 80020dc:	230a      	movs	r3, #10
 80020de:	2214      	movs	r2, #20
 80020e0:	4926      	ldr	r1, [pc, #152]	; (800217c <main+0xb00>)
 80020e2:	4827      	ldr	r0, [pc, #156]	; (8002180 <main+0xb04>)
 80020e4:	f005 ffb4 	bl	8008050 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <main+0xb0c>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <main+0xb0c>)
 80020f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <main+0xb0c>)
 80020f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80020fa:	eeb0 1a66 	vmov.f32	s2, s13
 80020fe:	eef0 0a47 	vmov.f32	s1, s14
 8002102:	eeb0 0a67 	vmov.f32	s0, s15
 8002106:	2104      	movs	r1, #4
 8002108:	481c      	ldr	r0, [pc, #112]	; (800217c <main+0xb00>)
 800210a:	f7fe ffed 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 800210e:	230a      	movs	r3, #10
 8002110:	2214      	movs	r2, #20
 8002112:	491a      	ldr	r1, [pc, #104]	; (800217c <main+0xb00>)
 8002114:	481a      	ldr	r0, [pc, #104]	; (8002180 <main+0xb04>)
 8002116:	f005 ff9b 	bl	8008050 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <main+0xb10>)
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <main+0xb10>)
 8002122:	ed93 7a01 	vldr	s14, [r3, #4]
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <main+0xb10>)
 8002128:	edd3 6a02 	vldr	s13, [r3, #8]
 800212c:	eeb0 1a66 	vmov.f32	s2, s13
 8002130:	eef0 0a47 	vmov.f32	s1, s14
 8002134:	eeb0 0a67 	vmov.f32	s0, s15
 8002138:	2105      	movs	r1, #5
 800213a:	4810      	ldr	r0, [pc, #64]	; (800217c <main+0xb00>)
 800213c:	f7fe ffd4 	bl	80010e8 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart2, &telemetry_tx_buf[0], 20, 10);
 8002140:	230a      	movs	r3, #10
 8002142:	2214      	movs	r2, #20
 8002144:	490d      	ldr	r1, [pc, #52]	; (800217c <main+0xb00>)
 8002146:	480e      	ldr	r0, [pc, #56]	; (8002180 <main+0xb04>)
 8002148:	f005 ff82 	bl	8008050 <HAL_UART_Transmit>
						  break;
 800214c:	bf00      	nop
					  }
					  break;
 800214e:	bf00      	nop
				  }
			  }
		  }
	  }

	  if(tim7_20ms_flag == 1 && tim7_100ms_flag != 1)
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <main+0xb14>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d11f      	bne.n	8002198 <main+0xb1c>
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <main+0xb18>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d01b      	beq.n	8002198 <main+0xb1c>
	  {
		  tim7_20ms_flag = 0;
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <main+0xb14>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <main+0xb00>)
 8002168:	f7fe fe68 	bl	8000e3c <Encode_Msg_AHRS>

		  HAL_UART_Transmit_IT(&huart2, &telemetry_tx_buf[0], 20);
 800216c:	2214      	movs	r2, #20
 800216e:	4903      	ldr	r1, [pc, #12]	; (800217c <main+0xb00>)
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <main+0xb04>)
 8002172:	f005 fff8 	bl	8008166 <HAL_UART_Transmit_IT>
 8002176:	e025      	b.n	80021c4 <main+0xb48>
 8002178:	20000460 	.word	0x20000460
 800217c:	200000a0 	.word	0x200000a0
 8002180:	20000404 	.word	0x20000404
 8002184:	200004d0 	.word	0x200004d0
 8002188:	20000540 	.word	0x20000540
 800218c:	20000578 	.word	0x20000578
 8002190:	2000023c 	.word	0x2000023c
 8002194:	2000023d 	.word	0x2000023d
	  }

	  else if(tim7_20ms_flag == 1 && tim7_100ms_flag == 1)
 8002198:	4ba0      	ldr	r3, [pc, #640]	; (800241c <main+0xda0>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d111      	bne.n	80021c4 <main+0xb48>
 80021a0:	4b9f      	ldr	r3, [pc, #636]	; (8002420 <main+0xda4>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10d      	bne.n	80021c4 <main+0xb48>
	  {
		  tim7_20ms_flag = 0;
 80021a8:	4b9c      	ldr	r3, [pc, #624]	; (800241c <main+0xda0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
		  tim7_100ms_flag = 0;
 80021ae:	4b9c      	ldr	r3, [pc, #624]	; (8002420 <main+0xda4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80021b4:	489b      	ldr	r0, [pc, #620]	; (8002424 <main+0xda8>)
 80021b6:	f7fe fe41 	bl	8000e3c <Encode_Msg_AHRS>
		  //Encode_Msg_GPS(&telemetry_tx_buf[20]);

		  HAL_UART_Transmit_IT(&huart2, &telemetry_tx_buf[0], 40);
 80021ba:	2228      	movs	r2, #40	; 0x28
 80021bc:	4999      	ldr	r1, [pc, #612]	; (8002424 <main+0xda8>)
 80021be:	489a      	ldr	r0, [pc, #616]	; (8002428 <main+0xdac>)
 80021c0:	f005 ffd1 	bl	8008166 <HAL_UART_Transmit_IT>
	  }

//end trans
	  //time1 = __HAL_TIM_GET_COUNTER(&htim4);
	 // if(updateMPU(&mpu)==1){}
	  gyro_get_data();
 80021c4:	f7ff f88c 	bl	80012e0 <gyro_get_data>
// 	  	gyro_pitch_input 	= ( gyro_pitch_input * 0.7 ) + (float)( gyro_y  * 0.3);
// 		gyro_roll_input 	= ( gyro_roll_input * 0.7 ) + (float)( gyro_x  * 0.3);
// 		gyro_yaw_input 	= ( gyro_yaw_input * 0.7 ) + (float)( gyro_z  * 0.3);
		//kalman_1d(KalmanAngleRoll, KalmanUncertaintyAngleRoll, gyro_x, AngleRoll);
		//KalmanAngleRoll=Kalman1DOutput[0]; KalmanUncertaintyAngleRoll=Kalman1DOutput[1];
		KalmanAngleRoll=AngleRoll;
 80021c8:	4b98      	ldr	r3, [pc, #608]	; (800242c <main+0xdb0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a98      	ldr	r2, [pc, #608]	; (8002430 <main+0xdb4>)
 80021ce:	6013      	str	r3, [r2, #0]
		//kalman_1d(KalmanAnglePitch, KalmanUncertaintyAnglePitch, gyro_y, AnglePitch);
		//KalmanAnglePitch=Kalman1DOutput[0]; KalmanUncertaintyAnglePitch=Kalman1DOutput[1];
		KalmanAnglePitch=AnglePitch;
 80021d0:	4b98      	ldr	r3, [pc, #608]	; (8002434 <main+0xdb8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a98      	ldr	r2, [pc, #608]	; (8002438 <main+0xdbc>)
 80021d6:	6013      	str	r3, [r2, #0]
		//PID

		if(ch.ch[4] > 1900){
 80021d8:	4b98      	ldr	r3, [pc, #608]	; (800243c <main+0xdc0>)
 80021da:	891b      	ldrh	r3, [r3, #8]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	f240 726c 	movw	r2, #1900	; 0x76c
 80021e2:	4293      	cmp	r3, r2
 80021e4:	f240 8150 	bls.w	8002488 <main+0xe0c>
			Double_Roll_Pitch_PID_Calculation(&pitch, (ch.ch[1] - 1500) * 0.1f, KalmanAnglePitch, gyro_y);
 80021e8:	4b94      	ldr	r3, [pc, #592]	; (800243c <main+0xdc0>)
 80021ea:	885b      	ldrh	r3, [r3, #2]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fa:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002440 <main+0xdc4>
 80021fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002202:	4b8d      	ldr	r3, [pc, #564]	; (8002438 <main+0xdbc>)
 8002204:	ed93 7a00 	vldr	s14, [r3]
 8002208:	4b8e      	ldr	r3, [pc, #568]	; (8002444 <main+0xdc8>)
 800220a:	edd3 6a00 	vldr	s13, [r3]
 800220e:	eeb0 1a66 	vmov.f32	s2, s13
 8002212:	eef0 0a47 	vmov.f32	s1, s14
 8002216:	eeb0 0a67 	vmov.f32	s0, s15
 800221a:	488b      	ldr	r0, [pc, #556]	; (8002448 <main+0xdcc>)
 800221c:	f002 f964 	bl	80044e8 <Double_Roll_Pitch_PID_Calculation>
			Double_Roll_Pitch_PID_Calculation(&roll, (ch.ch[0] - 1500) * 0.1f, KalmanAngleRoll, gyro_x);
 8002220:	4b86      	ldr	r3, [pc, #536]	; (800243c <main+0xdc0>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002232:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8002440 <main+0xdc4>
 8002236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223a:	4b7d      	ldr	r3, [pc, #500]	; (8002430 <main+0xdb4>)
 800223c:	ed93 7a00 	vldr	s14, [r3]
 8002240:	4b82      	ldr	r3, [pc, #520]	; (800244c <main+0xdd0>)
 8002242:	edd3 6a00 	vldr	s13, [r3]
 8002246:	eeb0 1a66 	vmov.f32	s2, s13
 800224a:	eef0 0a47 	vmov.f32	s1, s14
 800224e:	eeb0 0a67 	vmov.f32	s0, s15
 8002252:	487f      	ldr	r0, [pc, #508]	; (8002450 <main+0xdd4>)
 8002254:	f002 f948 	bl	80044e8 <Double_Roll_Pitch_PID_Calculation>

			if(ch.ch[2] < 1010)
 8002258:	4b78      	ldr	r3, [pc, #480]	; (800243c <main+0xdc0>)
 800225a:	889b      	ldrh	r3, [r3, #4]
 800225c:	b29b      	uxth	r3, r3
 800225e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8002262:	4293      	cmp	r3, r2
 8002264:	d801      	bhi.n	800226a <main+0xbee>
			{
				Reset_All_PID_Integrator();
 8002266:	f002 fa87 	bl	8004778 <Reset_All_PID_Integrator>
			}
			  ccr1 = 10500 + 500 + (ch.ch[2] - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result;// - (iBus.LH - 1500) * 5;
 800226a:	4b74      	ldr	r3, [pc, #464]	; (800243c <main+0xdc0>)
 800226c:	889b      	ldrh	r3, [r3, #4]
 800226e:	b29b      	uxth	r3, r3
 8002270:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8002280:	3338      	adds	r3, #56	; 0x38
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800228a:	4b6f      	ldr	r3, [pc, #444]	; (8002448 <main+0xdcc>)
 800228c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002290:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002294:	4b6e      	ldr	r3, [pc, #440]	; (8002450 <main+0xdd4>)
 8002296:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022a2:	ee17 3a90 	vmov	r3, s15
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4b6a      	ldr	r3, [pc, #424]	; (8002454 <main+0xdd8>)
 80022aa:	801a      	strh	r2, [r3, #0]
			  ccr2 = 10500 + 500 + (ch.ch[2] - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result;// + (iBus.LH - 1500) * 5;
 80022ac:	4b63      	ldr	r3, [pc, #396]	; (800243c <main+0xdc0>)
 80022ae:	889b      	ldrh	r3, [r3, #4]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 80022c2:	3338      	adds	r3, #56	; 0x38
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022cc:	4b5e      	ldr	r3, [pc, #376]	; (8002448 <main+0xdcc>)
 80022ce:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80022d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d6:	4b5e      	ldr	r3, [pc, #376]	; (8002450 <main+0xdd4>)
 80022d8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80022dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e4:	ee17 3a90 	vmov	r3, s15
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	4b5b      	ldr	r3, [pc, #364]	; (8002458 <main+0xddc>)
 80022ec:	801a      	strh	r2, [r3, #0]
			  ccr3 = 10500 + 500 + (ch.ch[2] - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result;// - (iBus.LH - 1500) * 5;
 80022ee:	4b53      	ldr	r3, [pc, #332]	; (800243c <main+0xdc0>)
 80022f0:	889b      	ldrh	r3, [r3, #4]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8002304:	3338      	adds	r3, #56	; 0x38
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800230e:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <main+0xdcc>)
 8002310:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002318:	4b4d      	ldr	r3, [pc, #308]	; (8002450 <main+0xdd4>)
 800231a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800231e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002326:	ee17 3a90 	vmov	r3, s15
 800232a:	b29a      	uxth	r2, r3
 800232c:	4b4b      	ldr	r3, [pc, #300]	; (800245c <main+0xde0>)
 800232e:	801a      	strh	r2, [r3, #0]
			  ccr4 = 10500 + 500 + (ch.ch[2] - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result;// + (iBus.LH - 1500) * 5;
 8002330:	4b42      	ldr	r3, [pc, #264]	; (800243c <main+0xdc0>)
 8002332:	889b      	ldrh	r3, [r3, #4]
 8002334:	b29b      	uxth	r3, r3
 8002336:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8002346:	3338      	adds	r3, #56	; 0x38
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002350:	4b3d      	ldr	r3, [pc, #244]	; (8002448 <main+0xdcc>)
 8002352:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002356:	ee37 7a67 	vsub.f32	s14, s14, s15
 800235a:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <main+0xdd4>)
 800235c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002368:	ee17 3a90 	vmov	r3, s15
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b3c      	ldr	r3, [pc, #240]	; (8002460 <main+0xde4>)
 8002370:	801a      	strh	r2, [r3, #0]
			  if(ch.ch[2] > 1010)
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <main+0xdc0>)
 8002374:	889b      	ldrh	r3, [r3, #4]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800237c:	4293      	cmp	r3, r2
 800237e:	d973      	bls.n	8002468 <main+0xdec>
			  {
				  TIM3->CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;
 8002380:	4b34      	ldr	r3, [pc, #208]	; (8002454 <main+0xdd8>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	f245 2208 	movw	r2, #21000	; 0x5208
 8002388:	4293      	cmp	r3, r2
 800238a:	d808      	bhi.n	800239e <main+0xd22>
 800238c:	4b31      	ldr	r3, [pc, #196]	; (8002454 <main+0xdd8>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002394:	4293      	cmp	r3, r2
 8002396:	bf38      	it	cc
 8002398:	4613      	movcc	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	e001      	b.n	80023a2 <main+0xd26>
 800239e:	f245 2308 	movw	r3, #21000	; 0x5208
 80023a2:	4a30      	ldr	r2, [pc, #192]	; (8002464 <main+0xde8>)
 80023a4:	6353      	str	r3, [r2, #52]	; 0x34
				  TIM3->CCR2 = ccr2 > 21000 ? 21000 : ccr2 < 11000 ? 11000 : ccr2;
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <main+0xddc>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	f245 2208 	movw	r2, #21000	; 0x5208
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d808      	bhi.n	80023c4 <main+0xd48>
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <main+0xddc>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80023ba:	4293      	cmp	r3, r2
 80023bc:	bf38      	it	cc
 80023be:	4613      	movcc	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	e001      	b.n	80023c8 <main+0xd4c>
 80023c4:	f245 2308 	movw	r3, #21000	; 0x5208
 80023c8:	4a26      	ldr	r2, [pc, #152]	; (8002464 <main+0xde8>)
 80023ca:	6393      	str	r3, [r2, #56]	; 0x38
				  TIM3->CCR3 = ccr3 > 21000 ? 21000 : ccr3 < 11000 ? 11000 : ccr3;
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <main+0xde0>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	f245 2208 	movw	r2, #21000	; 0x5208
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d808      	bhi.n	80023ea <main+0xd6e>
 80023d8:	4b20      	ldr	r3, [pc, #128]	; (800245c <main+0xde0>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80023e0:	4293      	cmp	r3, r2
 80023e2:	bf38      	it	cc
 80023e4:	4613      	movcc	r3, r2
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	e001      	b.n	80023ee <main+0xd72>
 80023ea:	f245 2308 	movw	r3, #21000	; 0x5208
 80023ee:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <main+0xde8>)
 80023f0:	63d3      	str	r3, [r2, #60]	; 0x3c
				  TIM3->CCR4 = ccr4 > 21000 ? 21000 : ccr4 < 11000 ? 11000 : ccr4;
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <main+0xde4>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	f245 2208 	movw	r2, #21000	; 0x5208
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d808      	bhi.n	8002410 <main+0xd94>
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <main+0xde4>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002406:	4293      	cmp	r3, r2
 8002408:	bf38      	it	cc
 800240a:	4613      	movcc	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	e001      	b.n	8002414 <main+0xd98>
 8002410:	f245 2308 	movw	r3, #21000	; 0x5208
 8002414:	4a13      	ldr	r2, [pc, #76]	; (8002464 <main+0xde8>)
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
 8002418:	e036      	b.n	8002488 <main+0xe0c>
 800241a:	bf00      	nop
 800241c:	2000023c 	.word	0x2000023c
 8002420:	2000023d 	.word	0x2000023d
 8002424:	200000a0 	.word	0x200000a0
 8002428:	20000404 	.word	0x20000404
 800242c:	20000228 	.word	0x20000228
 8002430:	20000234 	.word	0x20000234
 8002434:	2000022c 	.word	0x2000022c
 8002438:	20000238 	.word	0x20000238
 800243c:	20000210 	.word	0x20000210
 8002440:	3dcccccd 	.word	0x3dcccccd
 8002444:	2000013c 	.word	0x2000013c
 8002448:	200004d0 	.word	0x200004d0
 800244c:	20000138 	.word	0x20000138
 8002450:	20000460 	.word	0x20000460
 8002454:	2000023e 	.word	0x2000023e
 8002458:	20000240 	.word	0x20000240
 800245c:	20000242 	.word	0x20000242
 8002460:	20000244 	.word	0x20000244
 8002464:	40000400 	.word	0x40000400
			  }
			  else
			  {
				  TIM3->CCR1 = 11000;
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <main+0xe64>)
 800246a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800246e:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM3->CCR2 = 11000;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <main+0xe64>)
 8002472:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002476:	639a      	str	r2, [r3, #56]	; 0x38
				  TIM3->CCR3 = 11000;
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <main+0xe64>)
 800247a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800247e:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM3->CCR4 = 11000;
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <main+0xe64>)
 8002482:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002486:	641a      	str	r2, [r3, #64]	; 0x40





		time2 = __HAL_TIM_GET_COUNTER(&htim2)-time1;
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <main+0xe68>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <main+0xe6c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <main+0xe70>)
 8002496:	6013      	str	r3, [r2, #0]
		while(abs(__HAL_TIM_GET_COUNTER(&htim2) - loop_timer) < 4000 );
 8002498:	bf00      	nop
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <main+0xe68>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <main+0xe74>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bfb8      	it	lt
 80024aa:	425b      	neglt	r3, r3
 80024ac:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80024b0:	dbf3      	blt.n	800249a <main+0xe1e>
		cuoi2 = abs(__HAL_TIM_GET_COUNTER(&htim2) - loop_timer);
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <main+0xe68>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <main+0xe74>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bfb8      	it	lt
 80024c2:	425b      	neglt	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <main+0xe78>)
 80024c8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <main+0xe68>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
		loop_timer = __HAL_TIM_GET_COUNTER(&htim2);
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <main+0xe68>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <main+0xe74>)
 80024da:	6013      	str	r3, [r2, #0]
	  time1 = __HAL_TIM_GET_COUNTER(&htim2);
 80024dc:	f7ff bae2 	b.w	8001aa4 <main+0x428>
 80024e0:	40000400 	.word	0x40000400
 80024e4:	2000029c 	.word	0x2000029c
 80024e8:	20000130 	.word	0x20000130
 80024ec:	20000134 	.word	0x20000134
 80024f0:	20000128 	.word	0x20000128
 80024f4:	2000012c 	.word	0x2000012c

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b094      	sub	sp, #80	; 0x50
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 0320 	add.w	r3, r7, #32
 8002502:	2230      	movs	r2, #48	; 0x30
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f006 ffd4 	bl	80094b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <SystemClock_Config+0xcc>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <SystemClock_Config+0xcc>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <SystemClock_Config+0xcc>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <SystemClock_Config+0xd0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <SystemClock_Config+0xd0>)
 8002542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <SystemClock_Config+0xd0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002554:	2301      	movs	r3, #1
 8002556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800255e:	2302      	movs	r3, #2
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002568:	2319      	movs	r3, #25
 800256a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800256c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002572:	2302      	movs	r3, #2
 8002574:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002576:	2304      	movs	r3, #4
 8002578:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800257a:	f107 0320 	add.w	r3, r7, #32
 800257e:	4618      	mov	r0, r3
 8002580:	f004 f826 	bl	80065d0 <HAL_RCC_OscConfig>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800258a:	f000 fa9b 	bl	8002ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800258e:	230f      	movs	r3, #15
 8002590:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002592:	2302      	movs	r3, #2
 8002594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800259a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800259e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	2105      	movs	r1, #5
 80025ac:	4618      	mov	r0, r3
 80025ae:	f004 fa87 	bl	8006ac0 <HAL_RCC_ClockConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025b8:	f000 fa84 	bl	8002ac4 <Error_Handler>
  }
}
 80025bc:	bf00      	nop
 80025be:	3750      	adds	r7, #80	; 0x50
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40007000 	.word	0x40007000

080025cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_I2C1_Init+0x50>)
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <MX_I2C1_Init+0x54>)
 80025d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_I2C1_Init+0x50>)
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <MX_I2C1_Init+0x58>)
 80025da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_I2C1_Init+0x50>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_I2C1_Init+0x50>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MX_I2C1_Init+0x50>)
 80025ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <MX_I2C1_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_I2C1_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <MX_I2C1_Init+0x50>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_I2C1_Init+0x50>)
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <MX_I2C1_Init+0x50>)
 800260a:	f002 ffe7 	bl	80055dc <HAL_I2C_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002614:	f000 fa56 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000248 	.word	0x20000248
 8002620:	40005400 	.word	0x40005400
 8002624:	000186a0 	.word	0x000186a0

08002628 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	463b      	mov	r3, r7
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <MX_TIM2_Init+0x94>)
 8002646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800264a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <MX_TIM2_Init+0x94>)
 800264e:	2253      	movs	r2, #83	; 0x53
 8002650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <MX_TIM2_Init+0x94>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <MX_TIM2_Init+0x94>)
 800265a:	f04f 32ff 	mov.w	r2, #4294967295
 800265e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <MX_TIM2_Init+0x94>)
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <MX_TIM2_Init+0x94>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800266c:	4813      	ldr	r0, [pc, #76]	; (80026bc <MX_TIM2_Init+0x94>)
 800266e:	f004 fc07 	bl	8006e80 <HAL_TIM_Base_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002678:	f000 fa24 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800267c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002680:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	4619      	mov	r1, r3
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <MX_TIM2_Init+0x94>)
 800268a:	f004 fff5 	bl	8007678 <HAL_TIM_ConfigClockSource>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002694:	f000 fa16 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026a0:	463b      	mov	r3, r7
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <MX_TIM2_Init+0x94>)
 80026a6:	f005 fbf3 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026b0:	f000 fa08 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	2000029c 	.word	0x2000029c

080026c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08e      	sub	sp, #56	; 0x38
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d4:	f107 0320 	add.w	r3, r7, #32
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
 80026ec:	615a      	str	r2, [r3, #20]
 80026ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026f0:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <MX_TIM3_Init+0x128>)
 80026f2:	4a3e      	ldr	r2, [pc, #248]	; (80027ec <MX_TIM3_Init+0x12c>)
 80026f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026f6:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <MX_TIM3_Init+0x128>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <MX_TIM3_Init+0x128>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41999;
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <MX_TIM3_Init+0x128>)
 8002704:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002708:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270a:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <MX_TIM3_Init+0x128>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <MX_TIM3_Init+0x128>)
 8002712:	2200      	movs	r2, #0
 8002714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002716:	4834      	ldr	r0, [pc, #208]	; (80027e8 <MX_TIM3_Init+0x128>)
 8002718:	f004 fbb2 	bl	8006e80 <HAL_TIM_Base_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002722:	f000 f9cf 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800272c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002730:	4619      	mov	r1, r3
 8002732:	482d      	ldr	r0, [pc, #180]	; (80027e8 <MX_TIM3_Init+0x128>)
 8002734:	f004 ffa0 	bl	8007678 <HAL_TIM_ConfigClockSource>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800273e:	f000 f9c1 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002742:	4829      	ldr	r0, [pc, #164]	; (80027e8 <MX_TIM3_Init+0x128>)
 8002744:	f004 fcc4 	bl	80070d0 <HAL_TIM_PWM_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800274e:	f000 f9b9 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800275a:	f107 0320 	add.w	r3, r7, #32
 800275e:	4619      	mov	r1, r3
 8002760:	4821      	ldr	r0, [pc, #132]	; (80027e8 <MX_TIM3_Init+0x128>)
 8002762:	f005 fb95 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800276c:	f000 f9aa 	bl	8002ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002770:	2360      	movs	r3, #96	; 0x60
 8002772:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	2200      	movs	r2, #0
 8002784:	4619      	mov	r1, r3
 8002786:	4818      	ldr	r0, [pc, #96]	; (80027e8 <MX_TIM3_Init+0x128>)
 8002788:	f004 feb4 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002792:	f000 f997 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	2204      	movs	r2, #4
 800279a:	4619      	mov	r1, r3
 800279c:	4812      	ldr	r0, [pc, #72]	; (80027e8 <MX_TIM3_Init+0x128>)
 800279e:	f004 fea9 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80027a8:	f000 f98c 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2208      	movs	r2, #8
 80027b0:	4619      	mov	r1, r3
 80027b2:	480d      	ldr	r0, [pc, #52]	; (80027e8 <MX_TIM3_Init+0x128>)
 80027b4:	f004 fe9e 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80027be:	f000 f981 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	220c      	movs	r2, #12
 80027c6:	4619      	mov	r1, r3
 80027c8:	4807      	ldr	r0, [pc, #28]	; (80027e8 <MX_TIM3_Init+0x128>)
 80027ca:	f004 fe93 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80027d4:	f000 f976 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <MX_TIM3_Init+0x128>)
 80027da:	f002 f8c7 	bl	800496c <HAL_TIM_MspPostInit>

}
 80027de:	bf00      	nop
 80027e0:	3738      	adds	r7, #56	; 0x38
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200002e4 	.word	0x200002e4
 80027ec:	40000400 	.word	0x40000400

080027f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002804:	463b      	mov	r3, r7
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <MX_TIM4_Init+0x94>)
 800280e:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <MX_TIM4_Init+0x98>)
 8002810:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002812:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <MX_TIM4_Init+0x94>)
 8002814:	2253      	movs	r2, #83	; 0x53
 8002816:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <MX_TIM4_Init+0x94>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <MX_TIM4_Init+0x94>)
 8002820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002824:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002826:	4b17      	ldr	r3, [pc, #92]	; (8002884 <MX_TIM4_Init+0x94>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <MX_TIM4_Init+0x94>)
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002832:	4814      	ldr	r0, [pc, #80]	; (8002884 <MX_TIM4_Init+0x94>)
 8002834:	f004 fb24 	bl	8006e80 <HAL_TIM_Base_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800283e:	f000 f941 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	4619      	mov	r1, r3
 800284e:	480d      	ldr	r0, [pc, #52]	; (8002884 <MX_TIM4_Init+0x94>)
 8002850:	f004 ff12 	bl	8007678 <HAL_TIM_ConfigClockSource>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800285a:	f000 f933 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002866:	463b      	mov	r3, r7
 8002868:	4619      	mov	r1, r3
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <MX_TIM4_Init+0x94>)
 800286c:	f005 fb10 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002876:	f000 f925 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000032c 	.word	0x2000032c
 8002888:	40000800 	.word	0x40000800

0800288c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a0:	463b      	mov	r3, r7
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <MX_TIM5_Init+0x94>)
 80028aa:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <MX_TIM5_Init+0x98>)
 80028ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <MX_TIM5_Init+0x94>)
 80028b0:	2253      	movs	r2, #83	; 0x53
 80028b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b4:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <MX_TIM5_Init+0x94>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <MX_TIM5_Init+0x94>)
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c2:	4b17      	ldr	r3, [pc, #92]	; (8002920 <MX_TIM5_Init+0x94>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c8:	4b15      	ldr	r3, [pc, #84]	; (8002920 <MX_TIM5_Init+0x94>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028ce:	4814      	ldr	r0, [pc, #80]	; (8002920 <MX_TIM5_Init+0x94>)
 80028d0:	f004 fad6 	bl	8006e80 <HAL_TIM_Base_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80028da:	f000 f8f3 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028e4:	f107 0308 	add.w	r3, r7, #8
 80028e8:	4619      	mov	r1, r3
 80028ea:	480d      	ldr	r0, [pc, #52]	; (8002920 <MX_TIM5_Init+0x94>)
 80028ec:	f004 fec4 	bl	8007678 <HAL_TIM_ConfigClockSource>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80028f6:	f000 f8e5 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002902:	463b      	mov	r3, r7
 8002904:	4619      	mov	r1, r3
 8002906:	4806      	ldr	r0, [pc, #24]	; (8002920 <MX_TIM5_Init+0x94>)
 8002908:	f005 fac2 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002912:	f000 f8d7 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002916:	bf00      	nop
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000374 	.word	0x20000374
 8002924:	40000c00 	.word	0x40000c00

08002928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <MX_USART1_UART_Init+0x50>)
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <MX_USART1_UART_Init+0x54>)
 8002930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <MX_USART1_UART_Init+0x50>)
 8002934:	4a12      	ldr	r2, [pc, #72]	; (8002980 <MX_USART1_UART_Init+0x58>)
 8002936:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <MX_USART1_UART_Init+0x50>)
 800293a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800293e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <MX_USART1_UART_Init+0x50>)
 8002942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002946:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <MX_USART1_UART_Init+0x50>)
 800294a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800294e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <MX_USART1_UART_Init+0x50>)
 8002952:	220c      	movs	r2, #12
 8002954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <MX_USART1_UART_Init+0x50>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <MX_USART1_UART_Init+0x50>)
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002962:	4805      	ldr	r0, [pc, #20]	; (8002978 <MX_USART1_UART_Init+0x50>)
 8002964:	f005 fb24 	bl	8007fb0 <HAL_UART_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800296e:	f000 f8a9 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200003bc 	.word	0x200003bc
 800297c:	40011000 	.word	0x40011000
 8002980:	000186a0 	.word	0x000186a0

08002984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <MX_USART2_UART_Init+0x4c>)
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <MX_USART2_UART_Init+0x50>)
 800298c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <MX_USART2_UART_Init+0x4c>)
 8002990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_USART2_UART_Init+0x4c>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_USART2_UART_Init+0x4c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <MX_USART2_UART_Init+0x4c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_USART2_UART_Init+0x4c>)
 80029aa:	220c      	movs	r2, #12
 80029ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <MX_USART2_UART_Init+0x4c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <MX_USART2_UART_Init+0x4c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ba:	4805      	ldr	r0, [pc, #20]	; (80029d0 <MX_USART2_UART_Init+0x4c>)
 80029bc:	f005 faf8 	bl	8007fb0 <HAL_UART_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029c6:	f000 f87d 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000404 	.word	0x20000404
 80029d4:	40004400 	.word	0x40004400

080029d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
 80029ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b32      	ldr	r3, [pc, #200]	; (8002abc <MX_GPIO_Init+0xe4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a31      	ldr	r2, [pc, #196]	; (8002abc <MX_GPIO_Init+0xe4>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b28      	ldr	r3, [pc, #160]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a23      	ldr	r2, [pc, #140]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b21      	ldr	r3, [pc, #132]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <MX_GPIO_Init+0xe4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002a64:	4816      	ldr	r0, [pc, #88]	; (8002ac0 <MX_GPIO_Init+0xe8>)
 8002a66:	f002 fd6d 	bl	8005544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4619      	mov	r1, r3
 8002a80:	480f      	ldr	r0, [pc, #60]	; (8002ac0 <MX_GPIO_Init+0xe8>)
 8002a82:	f002 fbc3 	bl	800520c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002a86:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a94:	2302      	movs	r3, #2
 8002a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4808      	ldr	r0, [pc, #32]	; (8002ac0 <MX_GPIO_Init+0xe8>)
 8002aa0:	f002 fbb4 	bl	800520c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	2028      	movs	r0, #40	; 0x28
 8002aaa:	f002 fae6 	bl	800507a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002aae:	2028      	movs	r0, #40	; 0x28
 8002ab0:	f002 faff 	bl	80050b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ab4:	bf00      	nop
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020800 	.word	0x40020800

08002ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
}
 8002aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002acc:	e7fe      	b.n	8002acc <Error_Handler+0x8>

08002ace <setupMPU>:





uint8_t setupMPU(MPU9250_t *MPU9250, uint8_t addr) {
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
        // addr should be valid for MPU
//	char badmpu1[] = "CHECK SETUP\n\r";
//	HAL_UART_Transmit(&huart6, badmpu1, strlen((char *)badmpu1), 0xFFFF);
        if ((addr>>1 < MPU9250_DEFAULT_ADDRESS) || (addr>>1 > MPU9250_DEFAULT_ADDRESS + 7)) {
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b67      	cmp	r3, #103	; 0x67
 8002ae2:	d904      	bls.n	8002aee <setupMPU+0x20>
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b6f      	cmp	r3, #111	; 0x6f
 8002aec:	d901      	bls.n	8002af2 <setupMPU+0x24>
//        	char badmpu[] = "Bad Address\n\r";
//        	HAL_UART_Transmit(&huart6, badmpu, strlen((char *)badmpu), 0xFFFF);
            return 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e026      	b.n	8002b40 <setupMPU+0x72>
        }
        //mpu_i2c_addr = addr;
        //MPU9250SelfTest(&hi2c1, SelfTest);
        //calibrateMPU9250(&hi2c1, gyroBias, accelBias);
   		HAL_Delay(1000);
 8002af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002af6:	f002 f9c1 	bl	8004e7c <HAL_Delay>

        if (isConnectedMPU9250(MPU9250)==1) {
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f824 	bl	8002b48 <isConnectedMPU9250>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d117      	bne.n	8002b36 <setupMPU+0x68>
        	MPU9250_Init(MPU9250);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fca6 	bl	8003458 <MPU9250_Init>
            if (isConnectedAK8963(MPU9250)==1)
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f848 	bl	8002ba2 <isConnectedAK8963>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d108      	bne.n	8002b2a <setupMPU+0x5c>
                initAK8963(MPU9250);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fc2b 	bl	8003374 <initAK8963>
//        	char badmpu[] = "Check MPU ADDRESS\n\r";
//        	HAL_UART_Transmit(&huart6, badmpu, strlen((char *)badmpu), 0xFFFF);
        	MPU9250->has_connected = 0;
            return 0;
        }
        MPU9250->has_connected = 1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        return 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00a      	b.n	8002b40 <setupMPU+0x72>
            	MPU9250->has_connected = 0;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                return 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e004      	b.n	8002b40 <setupMPU+0x72>
        	MPU9250->has_connected = 0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
            return 0;
 8002b3e:	2300      	movs	r3, #0
    }
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <isConnectedMPU9250>:
	            c = c & 0xBF;  // mask 1011111 keeps all the previous bits
	        }
	        writeByte(MPU9250_ADDRESS, PWR_MGMT_1, c);
}

uint8_t isConnectedMPU9250(){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 8002b4e:	2175      	movs	r1, #117	; 0x75
 8002b50:	20d0      	movs	r0, #208	; 0xd0
 8002b52:	f000 fd99 	bl	8003688 <readByte>
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (c == MPU9250_WHOAMI_DEFAULT_VALUE);
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b71      	cmp	r3, #113	; 0x71
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU9255_WHOAMI_DEFAULT_VALUE);
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2b73      	cmp	r3, #115	; 0x73
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	b25a      	sxtb	r2, r3
 8002b76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU6500_WHOAMI_DEFAULT_VALUE);
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	2b70      	cmp	r3, #112	; 0x70
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	71bb      	strb	r3, [r7, #6]
	return b;
 8002b98:	79bb      	ldrb	r3, [r7, #6]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <isConnectedAK8963>:
uint8_t isConnectedAK8963(){
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
	uint8_t c = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2018      	movs	r0, #24
 8002bac:	f000 fd6c 	bl	8003688 <readByte>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
	return (c == AK8963_WHOAMI_DEFAULT_VALUE);
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	2b48      	cmp	r3, #72	; 0x48
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <MPUavailable>:

uint8_t MPUisSleeping(){
	uint8_t c = readByte(MPU9250_ADDRESS, PWR_MGMT_1);
	return (c & 0x40) == 0x40;
}
uint8_t MPUavailable(MPU9250_t *MPU9250){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	return MPU9250 -> has_connected && (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <MPUavailable+0x28>
 8002bda:	213a      	movs	r1, #58	; 0x3a
 8002bdc:	20d0      	movs	r0, #208	; 0xd0
 8002bde:	f000 fd53 	bl	8003688 <readByte>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MPUavailable+0x28>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <MPUavailable+0x2a>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0000      	movs	r0, r0
	...

08002c00 <updateMPU>:

uint8_t updateMPU(MPU9250_t *MPU9250){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	if (!(MPUavailable(MPU9250)==1)) return 0;
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffdd 	bl	8002bc8 <MPUavailable>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d001      	beq.n	8002c18 <updateMPU+0x18>
 8002c14:	2300      	movs	r3, #0
 8002c16:	e0b7      	b.n	8002d88 <updateMPU+0x188>

	        update_accel_gyro(MPU9250);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f9f5 	bl	8003008 <update_accel_gyro>
	        update_mag(MPU9250);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fa82 	bl	8003128 <update_mag>
	        // get quaternion based on aircraft coordinate (Right-Hand, X-Forward, Z-Down)
	        // acc[mg], gyro[deg/s], mag [mG]
	        // gyro will be convert from [deg/s] to [rad/s] inside of this function
	        // quat_filter.update(-a[0], a[1], a[2], g[0] * DEG_TO_RAD, -g[1] * DEG_TO_RAD, -g[2] * DEG_TO_RAD, m[1], -m[0], m[2], q);

	        float an = -MPU9250->a[0];
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002c2a:	eef1 7a67 	vneg.f32	s15, s15
 8002c2e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	        float ae = +MPU9250->a[1];
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
	        float ad = +MPU9250->a[2];
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3c:	623b      	str	r3, [r7, #32]
	        float gn = +MPU9250->g[0] * DEG_TO_RAD;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc24 	bl	8000490 <__aeabi_f2d>
 8002c48:	a351      	add	r3, pc, #324	; (adr r3, 8002d90 <updateMPU+0x190>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd fc77 	bl	8000540 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <updateMPU+0x198>)
 8002c60:	f7fd fd98 	bl	8000794 <__aeabi_ddiv>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f7fd ff18 	bl	8000aa0 <__aeabi_d2f>
 8002c70:	4603      	mov	r3, r0
 8002c72:	61fb      	str	r3, [r7, #28]
	        float ge = -MPU9250->g[1] * DEG_TO_RAD;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002c7a:	eef1 7a67 	vneg.f32	s15, s15
 8002c7e:	ee17 3a90 	vmov	r3, s15
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fc04 	bl	8000490 <__aeabi_f2d>
 8002c88:	a341      	add	r3, pc, #260	; (adr r3, 8002d90 <updateMPU+0x190>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f7fd fc57 	bl	8000540 <__aeabi_dmul>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <updateMPU+0x198>)
 8002ca0:	f7fd fd78 	bl	8000794 <__aeabi_ddiv>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7fd fef8 	bl	8000aa0 <__aeabi_d2f>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	61bb      	str	r3, [r7, #24]
	        float gd = -MPU9250->g[2] * DEG_TO_RAD;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002cba:	eef1 7a67 	vneg.f32	s15, s15
 8002cbe:	ee17 3a90 	vmov	r3, s15
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fbe4 	bl	8000490 <__aeabi_f2d>
 8002cc8:	a331      	add	r3, pc, #196	; (adr r3, 8002d90 <updateMPU+0x190>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fc37 	bl	8000540 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <updateMPU+0x198>)
 8002ce0:	f7fd fd58 	bl	8000794 <__aeabi_ddiv>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	f7fd fed8 	bl	8000aa0 <__aeabi_d2f>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	617b      	str	r3, [r7, #20]
	        float mn = +MPU9250->m[1];
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	613b      	str	r3, [r7, #16]
	        float me = -MPU9250->m[0];
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002d02:	eef1 7a67 	vneg.f32	s15, s15
 8002d06:	edc7 7a03 	vstr	s15, [r7, #12]
	        float md = +MPU9250->m[2];
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d10:	60bb      	str	r3, [r7, #8]

	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 8002d12:	2300      	movs	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d16:	e019      	b.n	8002d4c <updateMPU+0x14c>

	        	update_madgwick(an, ae, ad, gn, ge, gd, mn, me, md, MPU9250->q);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3390      	adds	r3, #144	; 0x90
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	ed97 4a02 	vldr	s8, [r7, #8]
 8002d22:	edd7 3a03 	vldr	s7, [r7, #12]
 8002d26:	ed97 3a04 	vldr	s6, [r7, #16]
 8002d2a:	edd7 2a05 	vldr	s5, [r7, #20]
 8002d2e:	ed97 2a06 	vldr	s4, [r7, #24]
 8002d32:	edd7 1a07 	vldr	s3, [r7, #28]
 8002d36:	ed97 1a08 	vldr	s2, [r7, #32]
 8002d3a:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8002d3e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002d42:	f000 fdfd 	bl	8003940 <update_madgwick>
	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	3301      	adds	r3, #1
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3df      	bcc.n	8002d18 <updateMPU+0x118>
	        }


	        update_rpy(MPU9250, MPU9250->q[0], MPU9250->q[1], MPU9250->q[2], MPU9250->q[3]);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8002d70:	eef0 1a46 	vmov.f32	s3, s12
 8002d74:	eeb0 1a66 	vmov.f32	s2, s13
 8002d78:	eef0 0a47 	vmov.f32	s1, s14
 8002d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f80d 	bl	8002da0 <update_rpy>

	        return 1;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3730      	adds	r7, #48	; 0x30
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	54442d18 	.word	0x54442d18
 8002d94:	400921fb 	.word	0x400921fb
 8002d98:	40668000 	.word	0x40668000
 8002d9c:	00000000 	.word	0x00000000

08002da0 <update_rpy>:

void setMagneticDeclination(MPU9250_t *MPU9250, const float d) {
	MPU9250->magnetic_declination = d;
}

void update_rpy(MPU9250_t *MPU9250, float qw, float qx, float qy, float qz){
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6178      	str	r0, [r7, #20]
 8002da8:	ed87 0a04 	vstr	s0, [r7, #16]
 8002dac:	edc7 0a03 	vstr	s1, [r7, #12]
 8002db0:	ed87 1a02 	vstr	s2, [r7, #8]
 8002db4:	edc7 1a01 	vstr	s3, [r7, #4]
	        // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	        // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	        // applied in the correct order which for this configuration is yaw, pitch, and then roll.
	        // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	        float a12, a22, a31, a32, a33;  // rotation matrix coefficients for Euler angles and gravity components
	        a12 = 2.0f * (qx * qy + qw * qz);
 8002db8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc4:	edd7 6a04 	vldr	s13, [r7, #16]
 8002dc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dd8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	        a22 = qw * qw + qx * qx - qy * qy - qz * qz;
 8002ddc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002de0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002de8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002dec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002df8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e08:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	        a31 = 2.0f * (qw * qx + qy * qz);
 8002e0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e18:	edd7 6a02 	vldr	s13, [r7, #8]
 8002e1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e2c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	        a32 = 2.0f * (qx * qz - qw * qy);
 8002e30:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e3c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002e40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e50:	edc7 7a08 	vstr	s15, [r7, #32]
	        a33 = qw * qw - qx * qx - qy * qy + qz * qz;
 8002e54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e58:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	edc7 7a07 	vstr	s15, [r7, #28]
	        MPU9250->rpy[0] = atan2f(a31, a33);
 8002e84:	edd7 0a07 	vldr	s1, [r7, #28]
 8002e88:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002e8c:	f006 ffca 	bl	8009e24 <atan2f>
 8002e90:	eef0 7a40 	vmov.f32	s15, s0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] = -asinf(a32);
 8002e9a:	ed97 0a08 	vldr	s0, [r7, #32]
 8002e9e:	f006 ff95 	bl	8009dcc <asinf>
 8002ea2:	eef0 7a40 	vmov.f32	s15, s0
 8002ea6:	eef1 7a67 	vneg.f32	s15, s15
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] = atan2f(a12, a22);
 8002eb0:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8002eb4:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002eb8:	f006 ffb4 	bl	8009e24 <atan2f>
 8002ebc:	eef0 7a40 	vmov.f32	s15, s0
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	        MPU9250->rpy[0] *= 180.0f / PI;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd fadf 	bl	8000490 <__aeabi_f2d>
 8002ed2:	a34a      	add	r3, pc, #296	; (adr r3, 8002ffc <update_rpy+0x25c>)
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	f7fd fb32 	bl	8000540 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f7fd fddc 	bl	8000aa0 <__aeabi_d2f>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] *= 180.0f / PI;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd faca 	bl	8000490 <__aeabi_f2d>
 8002efc:	a33f      	add	r3, pc, #252	; (adr r3, 8002ffc <update_rpy+0x25c>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f7fd fb1d 	bl	8000540 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7fd fdc7 	bl	8000aa0 <__aeabi_d2f>
 8002f12:	4602      	mov	r2, r0
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] *= 180.0f / PI;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fab5 	bl	8000490 <__aeabi_f2d>
 8002f26:	a335      	add	r3, pc, #212	; (adr r3, 8002ffc <update_rpy+0x25c>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f7fd fb08 	bl	8000540 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f7fd fdb2 	bl	8000aa0 <__aeabi_d2f>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	        MPU9250->rpy[2] += MPU9250->magnetic_declination;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	        if (MPU9250->rpy[2] >= +180.f)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002f60:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ff0 <update_rpy+0x250>
 8002f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6c:	db0a      	blt.n	8002f84 <update_rpy+0x1e4>
	        	MPU9250->rpy[2] -= 360.f;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002f74:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002ff4 <update_rpy+0x254>
 8002f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 8002f82:	e013      	b.n	8002fac <update_rpy+0x20c>
	        else if (MPU9250->rpy[2] < -180.f)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002f8a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002ff8 <update_rpy+0x258>
 8002f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	d509      	bpl.n	8002fac <update_rpy+0x20c>
	        	MPU9250->rpy[2] += 360.f;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002f9e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002ff4 <update_rpy+0x254>
 8002fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

	        MPU9250->lin_acc[0] = MPU9250->a[0] + a31;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002fb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	        MPU9250->lin_acc[1] = MPU9250->a[1] + a32;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002fc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	        MPU9250->lin_acc[2] = MPU9250->a[2] - a33;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002fda:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
	        //char str[] = "IN UPDATE rpy \n\r";
	        //HAL_UART_Transmit(&huart6, str, strlen((char *)str), 0xFFFF);
}
 8002fe8:	bf00      	nop
 8002fea:	3730      	adds	r7, #48	; 0x30
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	43340000 	.word	0x43340000
 8002ff4:	43b40000 	.word	0x43b40000
 8002ff8:	c3340000 	.word	0xc3340000
 8002ffc:	1a63c1f8 	.word	0x1a63c1f8
 8003000:	404ca5dc 	.word	0x404ca5dc
 8003004:	00000000 	.word	0x00000000

08003008 <update_accel_gyro>:

void update_accel_gyro(MPU9250_t *MPU9250) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
        int16_t raw_acc_gyro_data[7];        // used to read all 14 bytes at once from the MPU9250 accel/gyro
        readAccelGyro(raw_acc_gyro_data);  // INT cleared on any read
 8003010:	f107 0308 	add.w	r3, r7, #8
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f917 	bl	8003248 <readAccelGyro>

        // Now we'll calculate the accleration value into actual g's
        MPU9250->a[0] = (float)raw_acc_gyro_data[0] * MPU9250->acc_resolution ;  // get actual g value, this depends on scale being set
 800301a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
        MPU9250->a[1] = (float)raw_acc_gyro_data[1] * MPU9250->acc_resolution ;
 8003036:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
        MPU9250->a[2] = (float)raw_acc_gyro_data[2] * MPU9250->acc_resolution ;
 8003052:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

        MPU9250->temperature_count = raw_acc_gyro_data[3];                  // Read the adc values
 800306e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        MPU9250->temperature = ((float)MPU9250->temperature_count) / 333.87 + 21.0;  // Temperature in degrees Centigrade
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003086:	ee17 0a90 	vmov	r0, s15
 800308a:	f7fd fa01 	bl	8000490 <__aeabi_f2d>
 800308e:	a323      	add	r3, pc, #140	; (adr r3, 800311c <update_accel_gyro+0x114>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fb7e 	bl	8000794 <__aeabi_ddiv>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <update_accel_gyro+0x110>)
 80030a6:	f7fd f895 	bl	80001d4 <__adddf3>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	f7fd fcf5 	bl	8000aa0 <__aeabi_d2f>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	651a      	str	r2, [r3, #80]	; 0x50

        // Calculate the gyro value into actual degrees per second
        MPU9250->g[0] = (float)raw_acc_gyro_data[4] * MPU9250->gyro_resolution ;  // get actual gyro value, this depends on scale being set
 80030bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
        MPU9250->g[1] = (float)raw_acc_gyro_data[5] * MPU9250->gyro_resolution ;
 80030d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
        MPU9250->g[2] = (float)raw_acc_gyro_data[6] * MPU9250->gyro_resolution ;
 80030f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	edd3 7a01 	vldr	s15, [r3, #4]
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    }
 8003110:	bf00      	nop
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40350000 	.word	0x40350000
 800311c:	851eb852 	.word	0x851eb852
 8003120:	4074ddeb 	.word	0x4074ddeb
 8003124:	00000000 	.word	0x00000000

08003128 <update_mag>:

void update_mag(MPU9250_t *MPU9250) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
        int16_t mag_count[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 8003130:	2300      	movs	r3, #0
 8003132:	81bb      	strh	r3, [r7, #12]
 8003134:	2300      	movs	r3, #0
 8003136:	81fb      	strh	r3, [r7, #14]
 8003138:	2300      	movs	r3, #0
 800313a:	823b      	strh	r3, [r7, #16]

        // Read the x/y/z adc values
        if (readMag(mag_count)==1) {
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f8d5 	bl	80032f0 <readMag>
 8003146:	4603      	mov	r3, r0
 8003148:	2b01      	cmp	r3, #1
 800314a:	d174      	bne.n	8003236 <update_mag+0x10e>
            // Calculate the magnetometer values in milliGauss
            // Include factory calibration per data sheet and user environmental corrections
            // mag_bias is calcurated in 16BITS
            float bias_to_current_bits = MPU9250->mag_resolution / (10.*4912./32760.0);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd f99d 	bl	8000490 <__aeabi_f2d>
 8003156:	a33a      	add	r3, pc, #232	; (adr r3, 8003240 <update_mag+0x118>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fd fb1a 	bl	8000794 <__aeabi_ddiv>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	f7fd fc9a 	bl	8000aa0 <__aeabi_d2f>
 800316c:	4603      	mov	r3, r0
 800316e:	617b      	str	r3, [r7, #20]
            MPU9250->m[0] = (float)(mag_count[0] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[0] - MPU9250->mag_bias[0] * bias_to_current_bits) * MPU9250->mag_scale[0] ;  // get actual magnetometer value, this depends on scale being set
 8003170:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800318c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003196:	edd7 7a05 	vldr	s15, [r7, #20]
 800319a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80031a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            MPU9250->m[1] = (float)(mag_count[1] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[1] - MPU9250->mag_bias[1] * bias_to_current_bits) * MPU9250->mag_scale[1];
 80031b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80031c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80031ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80031d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
            MPU9250->m[2] = (float)(mag_count[2] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[2] - MPU9250->mag_bias[2] * bias_to_current_bits) * MPU9250->mag_scale[2];
 80031f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edd3 7a02 	vldr	s15, [r3, #8]
 8003206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800321a:	edd7 7a05 	vldr	s15, [r7, #20]
 800321e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003222:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800322c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
        }
    }
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	d7fd7fd8 	.word	0xd7fd7fd8
 8003244:	3ff7fd7f 	.word	0x3ff7fd7f

08003248 <readAccelGyro>:

void readAccelGyro(int16_t* destination)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

	uint8_t raw_data[14];                                                 // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 14, &raw_data[0]);             // Read the 14 raw data registers into data array
 8003250:	f107 0308 	add.w	r3, r7, #8
 8003254:	220e      	movs	r2, #14
 8003256:	213b      	movs	r1, #59	; 0x3b
 8003258:	20d0      	movs	r0, #208	; 0xd0
 800325a:	f000 fa3b 	bl	80036d4 <readBytes>
	destination[0] = ((int16_t)raw_data[0] << 8) | (int16_t)raw_data[1];  // Turn the MSB and LSB into a signed 16-bit value
 800325e:	7a3b      	ldrb	r3, [r7, #8]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	b21a      	sxth	r2, r3
 8003264:	7a7b      	ldrb	r3, [r7, #9]
 8003266:	b21b      	sxth	r3, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	b21a      	sxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t)raw_data[2] << 8) | (int16_t)raw_data[3];
 8003270:	7abb      	ldrb	r3, [r7, #10]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	b219      	sxth	r1, r3
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	b21a      	sxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3302      	adds	r3, #2
 800327e:	430a      	orrs	r2, r1
 8003280:	b212      	sxth	r2, r2
 8003282:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t)raw_data[4] << 8) | (int16_t)raw_data[5];
 8003284:	7b3b      	ldrb	r3, [r7, #12]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	b219      	sxth	r1, r3
 800328a:	7b7b      	ldrb	r3, [r7, #13]
 800328c:	b21a      	sxth	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	430a      	orrs	r2, r1
 8003294:	b212      	sxth	r2, r2
 8003296:	801a      	strh	r2, [r3, #0]
	destination[3] = ((int16_t)raw_data[6] << 8) | (int16_t)raw_data[7];
 8003298:	7bbb      	ldrb	r3, [r7, #14]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	b219      	sxth	r1, r3
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	b21a      	sxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3306      	adds	r3, #6
 80032a6:	430a      	orrs	r2, r1
 80032a8:	b212      	sxth	r2, r2
 80032aa:	801a      	strh	r2, [r3, #0]
	destination[4] = ((int16_t)raw_data[8] << 8) | (int16_t)raw_data[9];
 80032ac:	7c3b      	ldrb	r3, [r7, #16]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	b219      	sxth	r1, r3
 80032b2:	7c7b      	ldrb	r3, [r7, #17]
 80032b4:	b21a      	sxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3308      	adds	r3, #8
 80032ba:	430a      	orrs	r2, r1
 80032bc:	b212      	sxth	r2, r2
 80032be:	801a      	strh	r2, [r3, #0]
	destination[5] = ((int16_t)raw_data[10] << 8) | (int16_t)raw_data[11];
 80032c0:	7cbb      	ldrb	r3, [r7, #18]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	b219      	sxth	r1, r3
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	b21a      	sxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	330a      	adds	r3, #10
 80032ce:	430a      	orrs	r2, r1
 80032d0:	b212      	sxth	r2, r2
 80032d2:	801a      	strh	r2, [r3, #0]
	destination[6] = ((int16_t)raw_data[12] << 8) | (int16_t)raw_data[13];
 80032d4:	7d3b      	ldrb	r3, [r7, #20]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	b219      	sxth	r1, r3
 80032da:	7d7b      	ldrb	r3, [r7, #21]
 80032dc:	b21a      	sxth	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	330c      	adds	r3, #12
 80032e2:	430a      	orrs	r2, r1
 80032e4:	b212      	sxth	r2, r2
 80032e6:	801a      	strh	r2, [r3, #0]
}
 80032e8:	bf00      	nop
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <readMag>:


uint8_t readMag(int16_t* destination)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	const uint8_t st1 = readByte(AK8963_ADDRESS, AK8963_ST1);
 80032f8:	2102      	movs	r1, #2
 80032fa:	2018      	movs	r0, #24
 80032fc:	f000 f9c4 	bl	8003688 <readByte>
 8003300:	4603      	mov	r3, r0
 8003302:	75fb      	strb	r3, [r7, #23]
	if (st1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02c      	beq.n	8003368 <readMag+0x78>
	            uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	            readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	2207      	movs	r2, #7
 8003314:	2103      	movs	r1, #3
 8003316:	2018      	movs	r0, #24
 8003318:	f000 f9dc 	bl	80036d4 <readBytes>
//	            if (Mmode == 0x02 || Mmode == 0x04 || Mmode == 0x06) {  // continuous or external trigger read mode
//	                if ((st1 & 0x06) == 0)                                       // check if data is not skipped
//	                    return 0;                                            // this should be after data reading to clear DRDY register
//	            }

	            uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 800331c:	7cbb      	ldrb	r3, [r7, #18]
 800331e:	75bb      	strb	r3, [r7, #22]
	            if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 8003320:	7dbb      	ldrb	r3, [r7, #22]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11e      	bne.n	8003368 <readMag+0x78>
	                destination[0] = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 800332a:	7b7b      	ldrb	r3, [r7, #13]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	b21a      	sxth	r2, r3
 8003330:	7b3b      	ldrb	r3, [r7, #12]
 8003332:	b21b      	sxth	r3, r3
 8003334:	4313      	orrs	r3, r2
 8003336:	b21a      	sxth	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	801a      	strh	r2, [r3, #0]
	                destination[1] = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	b219      	sxth	r1, r3
 8003342:	7bbb      	ldrb	r3, [r7, #14]
 8003344:	b21a      	sxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3302      	adds	r3, #2
 800334a:	430a      	orrs	r2, r1
 800334c:	b212      	sxth	r2, r2
 800334e:	801a      	strh	r2, [r3, #0]
	                destination[2] = ((int16_t)raw_data[5] << 8) | raw_data[4];
 8003350:	7c7b      	ldrb	r3, [r7, #17]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	b219      	sxth	r1, r3
 8003356:	7c3b      	ldrb	r3, [r7, #16]
 8003358:	b21a      	sxth	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	430a      	orrs	r2, r1
 8003360:	b212      	sxth	r2, r2
 8003362:	801a      	strh	r2, [r3, #0]
	                return 1;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <readMag+0x7a>
	            }
	        }
	        return 0;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <initAK8963>:
        if (n > 0) MPU9250->n_filter_iter = n;
    }


void initAK8963(MPU9250_t *MPU9250)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 800337c:	2200      	movs	r2, #0
 800337e:	210a      	movs	r1, #10
 8003380:	2018      	movs	r0, #24
 8003382:	f000 f9e3 	bl	800374c <writeByte>
  HAL_Delay(100);
 8003386:	2064      	movs	r0, #100	; 0x64
 8003388:	f001 fd78 	bl	8004e7c <HAL_Delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 800338c:	220f      	movs	r2, #15
 800338e:	210a      	movs	r1, #10
 8003390:	2018      	movs	r0, #24
 8003392:	f000 f9db 	bl	800374c <writeByte>
  HAL_Delay(100);
 8003396:	2064      	movs	r0, #100	; 0x64
 8003398:	f001 fd70 	bl	8004e7c <HAL_Delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	2203      	movs	r2, #3
 80033a2:	2110      	movs	r1, #16
 80033a4:	2018      	movs	r0, #24
 80033a6:	f000 f995 	bl	80036d4 <readBytes>
  MPU9250->mag_bias_factory[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80033aa:	7b3b      	ldrb	r3, [r7, #12]
 80033ac:	3b80      	subs	r3, #128	; 0x80
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033b6:	eddf 6a25 	vldr	s13, [pc, #148]	; 800344c <initAK8963+0xd8>
 80033ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  MPU9250->mag_bias_factory[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80033cc:	7b7b      	ldrb	r3, [r7, #13]
 80033ce:	3b80      	subs	r3, #128	; 0x80
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800344c <initAK8963+0xd8>
 80033dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  MPU9250->mag_bias_factory[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 80033ee:	7bbb      	ldrb	r3, [r7, #14]
 80033f0:	3b80      	subs	r3, #128	; 0x80
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033fa:	eddf 6a14 	vldr	s13, [pc, #80]	; 800344c <initAK8963+0xd8>
 80033fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003410:	2200      	movs	r2, #0
 8003412:	210a      	movs	r1, #10
 8003414:	2018      	movs	r0, #24
 8003416:	f000 f999 	bl	800374c <writeByte>
  HAL_Delay(100);
 800341a:	2064      	movs	r0, #100	; 0x64
 800341c:	f001 fd2e 	bl	8004e7c <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <initAK8963+0xdc>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	b25a      	sxtb	r2, r3
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <initAK8963+0xe0>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b25b      	sxtb	r3, r3
 800342e:	4313      	orrs	r3, r2
 8003430:	b25b      	sxtb	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	210a      	movs	r1, #10
 8003438:	2018      	movs	r0, #24
 800343a:	f000 f987 	bl	800374c <writeByte>
  HAL_Delay(100);
 800343e:	2064      	movs	r0, #100	; 0x64
 8003440:	f001 fd1c 	bl	8004e7c <HAL_Delay>
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	43800000 	.word	0x43800000
 8003450:	20000002 	.word	0x20000002
 8003454:	20000003 	.word	0x20000003

08003458 <MPU9250_Init>:

void MPU9250_Init(MPU9250_t *MPU9250){
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	// Initialize MPU9250 device
	 // wake up device
	getAres(MPU9250);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f8e1 	bl	8003628 <getAres>
	getGres(MPU9250);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8aa 	bl	80035c0 <getGres>
	getMres(MPU9250);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f887 	bl	8003580 <getMres>
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	216b      	movs	r1, #107	; 0x6b
 8003476:	20d0      	movs	r0, #208	; 0xd0
 8003478:	f000 f968 	bl	800374c <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 800347c:	2064      	movs	r0, #100	; 0x64
 800347e:	f001 fcfd 	bl	8004e7c <HAL_Delay>

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8003482:	2200      	movs	r2, #0
 8003484:	216b      	movs	r1, #107	; 0x6b
 8003486:	20d0      	movs	r0, #208	; 0xd0
 8003488:	f000 f960 	bl	800374c <writeByte>
	HAL_Delay(100);
 800348c:	2064      	movs	r0, #100	; 0x64
 800348e:	f001 fcf5 	bl	8004e7c <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8003492:	2201      	movs	r2, #1
 8003494:	216b      	movs	r1, #107	; 0x6b
 8003496:	20d0      	movs	r0, #208	; 0xd0
 8003498:	f000 f958 	bl	800374c <writeByte>
	HAL_Delay(100);
 800349c:	2064      	movs	r0, #100	; 0x64
 800349e:	f001 fced 	bl	8004e7c <HAL_Delay>

	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 80034a2:	2203      	movs	r2, #3
 80034a4:	211a      	movs	r1, #26
 80034a6:	20d0      	movs	r0, #208	; 0xd0
 80034a8:	f000 f950 	bl	800374c <writeByte>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x03);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80034ac:	2203      	movs	r2, #3
 80034ae:	2119      	movs	r1, #25
 80034b0:	20d0      	movs	r0, #208	; 0xd0
 80034b2:	f000 f94b 	bl	800374c <writeByte>

	 // Set gyroscope full scale range
	 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 80034b6:	211b      	movs	r1, #27
 80034b8:	20d0      	movs	r0, #208	; 0xd0
 80034ba:	f000 f8e5 	bl	8003688 <readByte>
 80034be:	4603      	mov	r3, r0
 80034c0:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                     // Clear self-test bits [7:5]
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x03;                                     // Clear Fchoice bits [1:0]
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	f023 0303 	bic.w	r3, r3, #3
 80034d0:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	f023 0318 	bic.w	r3, r3, #24
 80034d8:	73fb      	strb	r3, [r7, #15]
	  c = c | (Gscale << 3);       // Set full scale range for the gyro
 80034da:	4b27      	ldr	r3, [pc, #156]	; (8003578 <MPU9250_Init+0x120>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	b25a      	sxtb	r2, r3
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	b25b      	sxtb	r3, r3
 80034ea:	73fb      	strb	r3, [r7, #15]
	  //c = c | (0x03 & 0x03);   // Set Fchoice for the gyro
	  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Set full scale range for the gyro
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	461a      	mov	r2, r3
 80034f0:	211b      	movs	r1, #27
 80034f2:	20d0      	movs	r0, #208	; 0xd0
 80034f4:	f000 f92a 	bl	800374c <writeByte>

	 // Set accelerometer configuration
	  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 80034f8:	211c      	movs	r1, #28
 80034fa:	20d0      	movs	r0, #208	; 0xd0
 80034fc:	f000 f8c4 	bl	8003688 <readByte>
 8003500:	4603      	mov	r3, r0
 8003502:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                 // Clear self-test bits [7:5]
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	f023 0318 	bic.w	r3, r3, #24
 8003512:	73fb      	strb	r3, [r7, #15]
	  c = c | (Ascale << 3);  // Set full scale range for the accelerometer
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <MPU9250_Init+0x124>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	b25a      	sxtb	r2, r3
 800351c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003520:	4313      	orrs	r3, r2
 8003522:	b25b      	sxtb	r3, r3
 8003524:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Set full scale range for the accelerometer
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	461a      	mov	r2, r3
 800352a:	211c      	movs	r1, #28
 800352c:	20d0      	movs	r0, #208	; 0xd0
 800352e:	f000 f90d 	bl	800374c <writeByte>

	 // Set accelerometer sample rate configuration
	 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 8003532:	211d      	movs	r1, #29
 8003534:	20d0      	movs	r0, #208	; 0xd0
 8003536:	f000 f8a7 	bl	8003688 <readByte>
 800353a:	4603      	mov	r3, r0
 800353c:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	f023 030f 	bic.w	r3, r3, #15
 8003544:	73fb      	strb	r3, [r7, #15]
	//  c = c | 0x03;

	  c = c | (~(0x01 << 3) & 0x08);    // Set accel_fchoice_b to 1
	  c = c | (0x03 & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	f043 0303 	orr.w	r3, r3, #3
 800354c:	73fb      	strb	r3, [r7, #15]

	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	461a      	mov	r2, r3
 8003552:	211d      	movs	r1, #29
 8003554:	20d0      	movs	r0, #208	; 0xd0
 8003556:	f000 f8f9 	bl	800374c <writeByte>
	 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	  // Configure Interrupts and Bypass Enable
	  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	  // can join the I2C bus and all can be controlled by the Arduino as master
	   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 800355a:	2222      	movs	r2, #34	; 0x22
 800355c:	2137      	movs	r1, #55	; 0x37
 800355e:	20d0      	movs	r0, #208	; 0xd0
 8003560:	f000 f8f4 	bl	800374c <writeByte>
	   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8003564:	2201      	movs	r2, #1
 8003566:	2138      	movs	r1, #56	; 0x38
 8003568:	20d0      	movs	r0, #208	; 0xd0
 800356a:	f000 f8ef 	bl	800374c <writeByte>

}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000001 	.word	0x20000001
 800357c:	20000000 	.word	0x20000000

08003580 <getMres>:

void getMres(MPU9250_t *MPU9250) {
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  switch (Mscale)
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <getMres+0x34>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d002      	beq.n	8003596 <getMres+0x16>
 8003590:	2b02      	cmp	r3, #2
 8003592:	d004      	beq.n	800359e <getMres+0x1e>
          break;
    case MFS_16BITS:
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8003594:	e007      	b.n	80035a6 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./8190.; // Proper scale to return milliGauss
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <getMres+0x38>)
 800359a:	609a      	str	r2, [r3, #8]
          break;
 800359c:	e003      	b.n	80035a6 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a06      	ldr	r2, [pc, #24]	; (80035bc <getMres+0x3c>)
 80035a2:	609a      	str	r2, [r3, #8]
          break;
 80035a4:	bf00      	nop
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000002 	.word	0x20000002
 80035b8:	40bfebff 	.word	0x40bfebff
 80035bc:	3fbfebff 	.word	0x3fbfebff

080035c0 <getGres>:


void getGres(MPU9250_t *MPU9250) {
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  switch (Gscale)
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <getGres+0x54>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d81a      	bhi.n	8003608 <getGres+0x48>
 80035d2:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <getGres+0x18>)
 80035d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d8:	080035e9 	.word	0x080035e9
 80035dc:	080035f1 	.word	0x080035f1
 80035e0:	080035f9 	.word	0x080035f9
 80035e4:	08003601 	.word	0x08003601
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          MPU9250->gyro_resolution = 250.0/32768.0;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <getGres+0x58>)
 80035ec:	605a      	str	r2, [r3, #4]
          break;
 80035ee:	e00b      	b.n	8003608 <getGres+0x48>
    case GFS_500DPS:
    	MPU9250->gyro_resolution = 500.0/32768.0;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <getGres+0x5c>)
 80035f4:	605a      	str	r2, [r3, #4]
          break;
 80035f6:	e007      	b.n	8003608 <getGres+0x48>
    case GFS_1000DPS:
    	MPU9250->gyro_resolution = 1000.0/32768.0;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <getGres+0x60>)
 80035fc:	605a      	str	r2, [r3, #4]
          break;
 80035fe:	e003      	b.n	8003608 <getGres+0x48>
    case GFS_2000DPS:
    	MPU9250->gyro_resolution = 2000.0/32768.0;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <getGres+0x64>)
 8003604:	605a      	str	r2, [r3, #4]
          break;
 8003606:	bf00      	nop
  }
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	20000001 	.word	0x20000001
 8003618:	3bfa0000 	.word	0x3bfa0000
 800361c:	3c7a0000 	.word	0x3c7a0000
 8003620:	3cfa0000 	.word	0x3cfa0000
 8003624:	3d7a0000 	.word	0x3d7a0000

08003628 <getAres>:


void getAres(MPU9250_t *MPU9250) {
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  switch (Ascale)
 8003630:	4b14      	ldr	r3, [pc, #80]	; (8003684 <getAres+0x5c>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	3b01      	subs	r3, #1
 8003636:	2b03      	cmp	r3, #3
 8003638:	d81e      	bhi.n	8003678 <getAres+0x50>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <getAres+0x18>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003651 	.word	0x08003651
 8003644:	0800365b 	.word	0x0800365b
 8003648:	08003665 	.word	0x08003665
 800364c:	0800366f 	.word	0x0800366f
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	MPU9250->acc_resolution = 2.0/32768.0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003656:	601a      	str	r2, [r3, #0]
          break;
 8003658:	e00e      	b.n	8003678 <getAres+0x50>
    case AFS_4G:
    	MPU9250->acc_resolution = 4.0/32768.0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003660:	601a      	str	r2, [r3, #0]
          break;
 8003662:	e009      	b.n	8003678 <getAres+0x50>
    case AFS_8G:
    	MPU9250->acc_resolution = 8.0/32768.0;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800366a:	601a      	str	r2, [r3, #0]
          break;
 800366c:	e004      	b.n	8003678 <getAres+0x50>
    case AFS_16G:
    	MPU9250->acc_resolution = 16.0/32768.0;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003674:	601a      	str	r2, [r3, #0]
          break;
 8003676:	bf00      	nop
  }
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	20000000 	.word	0x20000000

08003688 <readByte>:


char readByte(uint8_t I2C_ADDRESS, uint8_t RegAddr){
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af02      	add	r7, sp, #8
 800368e:	4603      	mov	r3, r0
 8003690:	460a      	mov	r2, r1
 8003692:	71fb      	strb	r3, [r7, #7]
 8003694:	4613      	mov	r3, r2
 8003696:	71bb      	strb	r3, [r7, #6]
	char data[1];
	char data_write[1];
	data_write[0] = RegAddr;
 8003698:	79bb      	ldrb	r3, [r7, #6]
 800369a:	723b      	strb	r3, [r7, #8]

	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	b299      	uxth	r1, r3
 80036a0:	f107 0208 	add.w	r2, r7, #8
 80036a4:	2364      	movs	r3, #100	; 0x64
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2301      	movs	r3, #1
 80036aa:	4809      	ldr	r0, [pc, #36]	; (80036d0 <readByte+0x48>)
 80036ac:	f002 f8da 	bl	8005864 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1, (uint16_t)100);
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	b299      	uxth	r1, r3
 80036b4:	f107 020c 	add.w	r2, r7, #12
 80036b8:	2364      	movs	r3, #100	; 0x64
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2301      	movs	r3, #1
 80036be:	4804      	ldr	r0, [pc, #16]	; (80036d0 <readByte+0x48>)
 80036c0:	f002 f9ce 	bl	8005a60 <HAL_I2C_Master_Receive>
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_ADDRESS, data_write, 1);
	//HAL_I2C_Master_Receive_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1);
	return data[0];
 80036c4:	7b3b      	ldrb	r3, [r7, #12]

}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000248 	.word	0x20000248

080036d4 <readBytes>:
void readBytes(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t count, uint8_t * dest)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4603      	mov	r3, r0
 80036de:	71fb      	strb	r3, [r7, #7]
 80036e0:	460b      	mov	r3, r1
 80036e2:	71bb      	strb	r3, [r7, #6]
 80036e4:	4613      	mov	r3, r2
 80036e6:	717b      	strb	r3, [r7, #5]
	char data[14];
	char data_write[1];
	data_write[0] = RegAddr;
 80036e8:	79bb      	ldrb	r3, [r7, #6]
 80036ea:	723b      	strb	r3, [r7, #8]
	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	b299      	uxth	r1, r3
 80036f0:	f107 0208 	add.w	r2, r7, #8
 80036f4:	2364      	movs	r3, #100	; 0x64
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2301      	movs	r3, #1
 80036fa:	4813      	ldr	r0, [pc, #76]	; (8003748 <readBytes+0x74>)
 80036fc:	f002 f8b2 	bl	8005864 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_ADDRESS, data_write, 1);
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count, (uint16_t)100);
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	b299      	uxth	r1, r3
 8003704:	797b      	ldrb	r3, [r7, #5]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f107 020c 	add.w	r2, r7, #12
 800370c:	2064      	movs	r0, #100	; 0x64
 800370e:	9000      	str	r0, [sp, #0]
 8003710:	480d      	ldr	r0, [pc, #52]	; (8003748 <readBytes+0x74>)
 8003712:	f002 f9a5 	bl	8005a60 <HAL_I2C_Master_Receive>
	//HAL_I2C_Master_Receive_DMA(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count);
	for(int ii = 0; ii < count; ii++) {
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e00b      	b.n	8003734 <readBytes+0x60>
			dest[ii] = data[ii];
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	4413      	add	r3, r2
 8003722:	f107 010c 	add.w	r1, r7, #12
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	440a      	add	r2, r1
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3301      	adds	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	797b      	ldrb	r3, [r7, #5]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbef      	blt.n	800371c <readBytes+0x48>
		}

}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000248 	.word	0x20000248

0800374c <writeByte>:

void writeByte(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t data){
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
 8003756:	460b      	mov	r3, r1
 8003758:	71bb      	strb	r3, [r7, #6]
 800375a:	4613      	mov	r3, r2
 800375c:	717b      	strb	r3, [r7, #5]
	char data_write[2];
	data_write[0] = RegAddr;
 800375e:	79bb      	ldrb	r3, [r7, #6]
 8003760:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 8003762:	797b      	ldrb	r3, [r7, #5]
 8003764:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 2, 100);
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	b299      	uxth	r1, r3
 800376a:	f107 020c 	add.w	r2, r7, #12
 800376e:	2364      	movs	r3, #100	; 0x64
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2302      	movs	r3, #2
 8003774:	4803      	ldr	r0, [pc, #12]	; (8003784 <writeByte+0x38>)
 8003776:	f002 f875 	bl	8005864 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Receive_DMA(&hi2c1, I2C_ADDRESS, data_write, 2);
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000248 	.word	0x20000248

08003788 <MPU9250SetDefault>:

void MPU9250SetDefault(MPU9250_t *MPU9250){
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	MPU9250 -> acc_resolution = 0.;                // scale resolutions per LSB for the sensors
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
	MPU9250 -> gyro_resolution = 0.;               // scale resolutions per LSB for the sensors
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	605a      	str	r2, [r3, #4]
	MPU9250 -> mag_resolution = 0.;                // scale resolutions per LSB for the sensors
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]

		// Calibration Parameters
	MPU9250 -> acc_bias[0] = 0.;   // acc calibration value in ACCEL_FS_SEL: 2g
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	60da      	str	r2, [r3, #12]
	MPU9250 -> acc_bias[1] = 0.;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	611a      	str	r2, [r3, #16]
	MPU9250 -> acc_bias[2] = 0.;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	615a      	str	r2, [r3, #20]
	MPU9250 -> gyro_bias[0] = 0.;  // gyro calibration value in GYRO_FS_SEL: 250dps
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	619a      	str	r2, [r3, #24]
	MPU9250 -> gyro_bias[1] = 0.;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	61da      	str	r2, [r3, #28]
	MPU9250 -> gyro_bias[2] = 0.;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	621a      	str	r2, [r3, #32]
	MPU9250 -> mag_bias_factory[0] = 0.;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
	MPU9250 -> mag_bias_factory[1] = 0.;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250 -> mag_bias_factory[2] = 0.;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c

	MPU9250 -> mag_bias[0] = 0.;  // mag calibration value in MAG_OUTPUT_BITS: 16BITS
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250 -> mag_bias[1] = 0.;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	635a      	str	r2, [r3, #52]	; 0x34
	MPU9250 -> mag_bias[2] = 0.;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
	MPU9250 -> mag_scale[0] = 1.;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800380e:	63da      	str	r2, [r3, #60]	; 0x3c
	MPU9250 -> mag_scale[1] = 1.;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
	MPU9250 -> mag_scale[2] = 1.;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800381e:	645a      	str	r2, [r3, #68]	; 0x44
	MPU9250 -> magnetic_declination  = 10.91;  // Moscow, 24th June
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a45      	ldr	r2, [pc, #276]	; (8003938 <MPU9250SetDefault+0x1b0>)
 8003824:	649a      	str	r2, [r3, #72]	; 0x48

		    // Temperature
	MPU9250 -> temperature_count = 0.;  // temperature raw count output
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	MPU9250 -> temperature = 0.;        // Stores the real internal chip temperature in degrees Celsius
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	651a      	str	r2, [r3, #80]	; 0x50

		// Self Test
	MPU9250 -> self_test_result[0] = 0.;  // holds results of gyro and accelerometer self test
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
	MPU9250 -> self_test_result[1] = 0.;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	659a      	str	r2, [r3, #88]	; 0x58
	MPU9250 -> self_test_result[2] = 0.;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	65da      	str	r2, [r3, #92]	; 0x5c
	MPU9250 -> self_test_result[3] = 0.;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	661a      	str	r2, [r3, #96]	; 0x60
	MPU9250 -> self_test_result[4] = 0.;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250 -> self_test_result[5] = 0.;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	669a      	str	r2, [r3, #104]	; 0x68

		// IMU Data
	MPU9250 -> a[0] = 0.;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	66da      	str	r2, [r3, #108]	; 0x6c
	MPU9250 -> a[1] = 0.;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	671a      	str	r2, [r3, #112]	; 0x70
	MPU9250 -> a[2] = 0.;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	675a      	str	r2, [r3, #116]	; 0x74
	MPU9250 -> g[0] = 0.;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	679a      	str	r2, [r3, #120]	; 0x78
	MPU9250 -> g[1] = 0.;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	67da      	str	r2, [r3, #124]	; 0x7c
	MPU9250 -> g[2] = 0.;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MPU9250 -> m[0] = 0.;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	MPU9250 -> m[1] = 0.;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	MPU9250 -> m[2] = 0.;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	MPU9250 -> q[0] = 1.;  // vector to hold quaternion
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80038bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	MPU9250 -> q[1] = 0.;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	MPU9250 -> q[2] = 0.;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	MPU9250 -> q[3] = 0.;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	MPU9250 -> rpy[0] = 0.;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	MPU9250 -> rpy[1] = 0.;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	MPU9250 -> rpy[2] = 0.;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	MPU9250 -> lin_acc[0] = 0.;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	MPU9250 -> lin_acc[1] = 0.;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	MPU9250 -> lin_acc[2] = 0.;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	MPU9250 -> has_connected = 0;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	MPU9250 -> n_filter_iter = 1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	412e8f5c 	.word	0x412e8f5c
 800393c:	00000000 	.word	0x00000000

08003940 <update_madgwick>:

void update_madgwick(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float* q){
 8003940:	b5b0      	push	{r4, r5, r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800394a:	edc7 0a08 	vstr	s1, [r7, #32]
 800394e:	ed87 1a07 	vstr	s2, [r7, #28]
 8003952:	edc7 1a06 	vstr	s3, [r7, #24]
 8003956:	ed87 2a05 	vstr	s4, [r7, #20]
 800395a:	edc7 2a04 	vstr	s5, [r7, #16]
 800395e:	ed87 3a03 	vstr	s6, [r7, #12]
 8003962:	edc7 3a02 	vstr	s7, [r7, #8]
 8003966:	ed87 4a01 	vstr	s8, [r7, #4]
 800396a:	6038      	str	r0, [r7, #0]
	newTime = HAL_GetTick();
 800396c:	f001 fa7a 	bl	8004e64 <HAL_GetTick>
 8003970:	4603      	mov	r3, r0
 8003972:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <update_madgwick+0xa8>)
 8003974:	6013      	str	r3, [r2, #0]
	deltaT = newTime - oldTime;
 8003976:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <update_madgwick+0xa8>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <update_madgwick+0xac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fd63 	bl	800044c <__aeabi_ui2d>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4919      	ldr	r1, [pc, #100]	; (80039f0 <update_madgwick+0xb0>)
 800398c:	e9c1 2300 	strd	r2, r3, [r1]
	oldTime = newTime;
 8003990:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <update_madgwick+0xa8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a15      	ldr	r2, [pc, #84]	; (80039ec <update_madgwick+0xac>)
 8003996:	6013      	str	r3, [r2, #0]
	deltaT = fabs(deltaT * 0.001);
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <update_madgwick+0xb0>)
 800399a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800399e:	a310      	add	r3, pc, #64	; (adr r3, 80039e0 <update_madgwick+0xa0>)
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fdcc 	bl	8000540 <__aeabi_dmul>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4614      	mov	r4, r2
 80039ae:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <update_madgwick+0xb0>)
 80039b4:	e9c3 4500 	strd	r4, r5, [r3]

	//madgwick(ax, ay, az, gx, gy, gz, mx, my, mz, q);
	MadgwicknoM(ax, ay, az, gx, gy, gz, q);
 80039b8:	6838      	ldr	r0, [r7, #0]
 80039ba:	edd7 2a04 	vldr	s5, [r7, #16]
 80039be:	ed97 2a05 	vldr	s4, [r7, #20]
 80039c2:	edd7 1a06 	vldr	s3, [r7, #24]
 80039c6:	ed97 1a07 	vldr	s2, [r7, #28]
 80039ca:	edd7 0a08 	vldr	s1, [r7, #32]
 80039ce:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80039d2:	f000 f80f 	bl	80039f4 <MadgwicknoM>
}
 80039d6:	bf00      	nop
 80039d8:	3728      	adds	r7, #40	; 0x28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bdb0      	pop	{r4, r5, r7, pc}
 80039de:	bf00      	nop
 80039e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80039e4:	3f50624d 	.word	0x3f50624d
 80039e8:	20000458 	.word	0x20000458
 80039ec:	2000045c 	.word	0x2000045c
 80039f0:	20000450 	.word	0x20000450

080039f4 <MadgwicknoM>:
	        q[2] = q2;
	        q[3] = q3;

}

void MadgwicknoM(float ax, float ay, float az, float gx, float gy, float gz, float* q) {
 80039f4:	b5b0      	push	{r4, r5, r7, lr}
 80039f6:	b0a6      	sub	sp, #152	; 0x98
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	ed87 0a07 	vstr	s0, [r7, #28]
 80039fe:	edc7 0a06 	vstr	s1, [r7, #24]
 8003a02:	ed87 1a05 	vstr	s2, [r7, #20]
 8003a06:	edc7 1a04 	vstr	s3, [r7, #16]
 8003a0a:	ed87 2a03 	vstr	s4, [r7, #12]
 8003a0e:	edc7 2a02 	vstr	s5, [r7, #8]
 8003a12:	6078      	str	r0, [r7, #4]
	double q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];  // short name local variable for readability
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fc fd39 	bl	8000490 <__aeabi_f2d>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fc fd2f 	bl	8000490 <__aeabi_f2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fd25 	bl	8000490 <__aeabi_f2d>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	330c      	adds	r3, #12
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fc fd1b 	bl	8000490 <__aeabi_f2d>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003a62:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8003a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a66:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003a6a:	6938      	ldr	r0, [r7, #16]
 8003a6c:	f7fc fd10 	bl	8000490 <__aeabi_f2d>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4620      	mov	r0, r4
 8003a76:	4629      	mov	r1, r5
 8003a78:	f7fc fd62 	bl	8000540 <__aeabi_dmul>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4614      	mov	r4, r2
 8003a82:	461d      	mov	r5, r3
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7fc fd03 	bl	8000490 <__aeabi_f2d>
 8003a8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a8e:	f7fc fd57 	bl	8000540 <__aeabi_dmul>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4620      	mov	r0, r4
 8003a98:	4629      	mov	r1, r5
 8003a9a:	f7fc fb99 	bl	80001d0 <__aeabi_dsub>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	461d      	mov	r5, r3
 8003aa6:	68b8      	ldr	r0, [r7, #8]
 8003aa8:	f7fc fcf2 	bl	8000490 <__aeabi_f2d>
 8003aac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003ab0:	f7fc fd46 	bl	8000540 <__aeabi_dmul>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4620      	mov	r0, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	f7fc fb88 	bl	80001d0 <__aeabi_dsub>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	4bcf      	ldr	r3, [pc, #828]	; (8003e0c <MadgwicknoM+0x418>)
 8003ace:	f7fc fd37 	bl	8000540 <__aeabi_dmul>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f7fc ffe1 	bl	8000aa0 <__aeabi_d2f>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003ae4:	6938      	ldr	r0, [r7, #16]
 8003ae6:	f7fc fcd3 	bl	8000490 <__aeabi_f2d>
 8003aea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003aee:	f7fc fd27 	bl	8000540 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4614      	mov	r4, r2
 8003af8:	461d      	mov	r5, r3
 8003afa:	68b8      	ldr	r0, [r7, #8]
 8003afc:	f7fc fcc8 	bl	8000490 <__aeabi_f2d>
 8003b00:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b04:	f7fc fd1c 	bl	8000540 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	4629      	mov	r1, r5
 8003b10:	f7fc fb60 	bl	80001d4 <__adddf3>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4614      	mov	r4, r2
 8003b1a:	461d      	mov	r5, r3
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7fc fcb7 	bl	8000490 <__aeabi_f2d>
 8003b22:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003b26:	f7fc fd0b 	bl	8000540 <__aeabi_dmul>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4620      	mov	r0, r4
 8003b30:	4629      	mov	r1, r5
 8003b32:	f7fc fb4d 	bl	80001d0 <__aeabi_dsub>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	4bb2      	ldr	r3, [pc, #712]	; (8003e0c <MadgwicknoM+0x418>)
 8003b44:	f7fc fcfc 	bl	8000540 <__aeabi_dmul>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7fc ffa6 	bl	8000aa0 <__aeabi_d2f>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7fc fc98 	bl	8000490 <__aeabi_f2d>
 8003b60:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003b64:	f7fc fcec 	bl	8000540 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	461d      	mov	r5, r3
 8003b70:	68b8      	ldr	r0, [r7, #8]
 8003b72:	f7fc fc8d 	bl	8000490 <__aeabi_f2d>
 8003b76:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003b7a:	f7fc fce1 	bl	8000540 <__aeabi_dmul>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	f7fc fb23 	bl	80001d0 <__aeabi_dsub>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4614      	mov	r4, r2
 8003b90:	461d      	mov	r5, r3
 8003b92:	6938      	ldr	r0, [r7, #16]
 8003b94:	f7fc fc7c 	bl	8000490 <__aeabi_f2d>
 8003b98:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003b9c:	f7fc fcd0 	bl	8000540 <__aeabi_dmul>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	f7fc fb14 	bl	80001d4 <__adddf3>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	4b94      	ldr	r3, [pc, #592]	; (8003e0c <MadgwicknoM+0x418>)
 8003bba:	f7fc fcc1 	bl	8000540 <__aeabi_dmul>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fc ff6b 	bl	8000aa0 <__aeabi_d2f>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003bd0:	68b8      	ldr	r0, [r7, #8]
 8003bd2:	f7fc fc5d 	bl	8000490 <__aeabi_f2d>
 8003bd6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003bda:	f7fc fcb1 	bl	8000540 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4614      	mov	r4, r2
 8003be4:	461d      	mov	r5, r3
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7fc fc52 	bl	8000490 <__aeabi_f2d>
 8003bec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003bf0:	f7fc fca6 	bl	8000540 <__aeabi_dmul>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f7fc faea 	bl	80001d4 <__adddf3>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	461d      	mov	r5, r3
 8003c08:	6938      	ldr	r0, [r7, #16]
 8003c0a:	f7fc fc41 	bl	8000490 <__aeabi_f2d>
 8003c0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c12:	f7fc fc95 	bl	8000540 <__aeabi_dmul>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	f7fc fad7 	bl	80001d0 <__aeabi_dsub>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	4b77      	ldr	r3, [pc, #476]	; (8003e0c <MadgwicknoM+0x418>)
 8003c30:	f7fc fc86 	bl	8000540 <__aeabi_dmul>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f7fc ff30 	bl	8000aa0 <__aeabi_d2f>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003c46:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c52:	d10e      	bne.n	8003c72 <MadgwicknoM+0x27e>
 8003c54:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c60:	d107      	bne.n	8003c72 <MadgwicknoM+0x27e>
 8003c62:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6e:	f000 82fe 	beq.w	800426e <MadgwicknoM+0x87a>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003c72:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003c7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c86:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c92:	eeb0 0a67 	vmov.f32	s0, s15
 8003c96:	f000 fbd7 	bl	8004448 <invSqrt>
 8003c9a:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 8003c9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ca2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	edc7 7a07 	vstr	s15, [r7, #28]
		ay *= recipNorm;
 8003cae:	ed97 7a06 	vldr	s14, [r7, #24]
 8003cb2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a06 	vstr	s15, [r7, #24]
		az *= recipNorm;
 8003cbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cc2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a05 	vstr	s15, [r7, #20]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8003cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	f7fc fa7d 	bl	80001d4 <__adddf3>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc fedd 	bl	8000aa0 <__aeabi_d2f>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	663b      	str	r3, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 8003cea:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	f7fc fa6f 	bl	80001d4 <__adddf3>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f7fc fecf 	bl	8000aa0 <__aeabi_d2f>
 8003d02:	4603      	mov	r3, r0
 8003d04:	65fb      	str	r3, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 8003d06:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	f7fc fa61 	bl	80001d4 <__adddf3>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc fec1 	bl	8000aa0 <__aeabi_d2f>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	65bb      	str	r3, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8003d22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	f7fc fa53 	bl	80001d4 <__adddf3>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	f7fc feb3 	bl	8000aa0 <__aeabi_d2f>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	657b      	str	r3, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <MadgwicknoM+0x41c>)
 8003d44:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d48:	f7fc fbfa 	bl	8000540 <__aeabi_dmul>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	f7fc fea4 	bl	8000aa0 <__aeabi_d2f>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	653b      	str	r3, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <MadgwicknoM+0x41c>)
 8003d62:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003d66:	f7fc fbeb 	bl	8000540 <__aeabi_dmul>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	f7fc fe95 	bl	8000aa0 <__aeabi_d2f>
 8003d76:	4603      	mov	r3, r0
 8003d78:	64fb      	str	r3, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <MadgwicknoM+0x41c>)
 8003d80:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d84:	f7fc fbdc 	bl	8000540 <__aeabi_dmul>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7fc fe86 	bl	8000aa0 <__aeabi_d2f>
 8003d94:	4603      	mov	r3, r0
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <MadgwicknoM+0x420>)
 8003d9e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003da2:	f7fc fbcd 	bl	8000540 <__aeabi_dmul>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f7fc fe77 	bl	8000aa0 <__aeabi_d2f>
 8003db2:	4603      	mov	r3, r0
 8003db4:	647b      	str	r3, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <MadgwicknoM+0x420>)
 8003dbc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003dc0:	f7fc fbbe 	bl	8000540 <__aeabi_dmul>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f7fc fe68 	bl	8000aa0 <__aeabi_d2f>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 8003dd4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003dd8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ddc:	f7fc fbb0 	bl	8000540 <__aeabi_dmul>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	f7fc fe5a 	bl	8000aa0 <__aeabi_d2f>
 8003dec:	4603      	mov	r3, r0
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 8003df0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003df4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003df8:	f7fc fba2 	bl	8000540 <__aeabi_dmul>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	f7fc fe4c 	bl	8000aa0 <__aeabi_d2f>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	e005      	b.n	8003e18 <MadgwicknoM+0x424>
 8003e0c:	3fe00000 	.word	0x3fe00000
 8003e10:	40100000 	.word	0x40100000
 8003e14:	40200000 	.word	0x40200000
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 8003e1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e1e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003e22:	f7fc fb8d 	bl	8000540 <__aeabi_dmul>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f7fc fe37 	bl	8000aa0 <__aeabi_d2f>
 8003e32:	4603      	mov	r3, r0
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8003e36:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e3e:	f7fc fb7f 	bl	8000540 <__aeabi_dmul>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f7fc fe29 	bl	8000aa0 <__aeabi_d2f>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	633b      	str	r3, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003e52:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003e56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e5e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8003e62:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e6e:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003e72:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003e76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e7e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003e82:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e8e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003e92:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003e96:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e9e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003ea2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eae:	ee17 0a90 	vmov	r0, s15
 8003eb2:	f7fc faed 	bl	8000490 <__aeabi_f2d>
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	460d      	mov	r5, r1
 8003eba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003ebe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ec6:	ee17 0a90 	vmov	r0, s15
 8003eca:	f7fc fae1 	bl	8000490 <__aeabi_f2d>
 8003ece:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003ed2:	f7fc fb35 	bl	8000540 <__aeabi_dmul>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4620      	mov	r0, r4
 8003edc:	4629      	mov	r1, r5
 8003ede:	f7fc f979 	bl	80001d4 <__adddf3>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	461d      	mov	r5, r3
 8003eea:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003eee:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	ee17 0a90 	vmov	r0, s15
 8003efa:	f7fc fac9 	bl	8000490 <__aeabi_f2d>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc f963 	bl	80001d0 <__aeabi_dsub>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4614      	mov	r4, r2
 8003f10:	461d      	mov	r5, r3
 8003f12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f14:	f7fc fabc 	bl	8000490 <__aeabi_f2d>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc f956 	bl	80001d0 <__aeabi_dsub>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4614      	mov	r4, r2
 8003f2a:	461d      	mov	r5, r3
 8003f2c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003f30:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f38:	ee17 0a90 	vmov	r0, s15
 8003f3c:	f7fc faa8 	bl	8000490 <__aeabi_f2d>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4620      	mov	r0, r4
 8003f46:	4629      	mov	r1, r5
 8003f48:	f7fc f944 	bl	80001d4 <__adddf3>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	461d      	mov	r5, r3
 8003f54:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003f58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f60:	ee17 0a90 	vmov	r0, s15
 8003f64:	f7fc fa94 	bl	8000490 <__aeabi_f2d>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	4629      	mov	r1, r5
 8003f70:	f7fc f930 	bl	80001d4 <__adddf3>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4614      	mov	r4, r2
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f88:	ee17 0a90 	vmov	r0, s15
 8003f8c:	f7fc fa80 	bl	8000490 <__aeabi_f2d>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7fc f91c 	bl	80001d4 <__adddf3>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f7fc fd7c 	bl	8000aa0 <__aeabi_d2f>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003fac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003fb0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb8:	ee17 0a90 	vmov	r0, s15
 8003fbc:	f7fc fa68 	bl	8000490 <__aeabi_f2d>
 8003fc0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003fc4:	f7fc fabc 	bl	8000540 <__aeabi_dmul>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
 8003fd0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003fd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fdc:	ee17 0a90 	vmov	r0, s15
 8003fe0:	f7fc fa56 	bl	8000490 <__aeabi_f2d>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4620      	mov	r0, r4
 8003fea:	4629      	mov	r1, r5
 8003fec:	f7fc f8f2 	bl	80001d4 <__adddf3>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003ffc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004004:	ee17 0a90 	vmov	r0, s15
 8004008:	f7fc fa42 	bl	8000490 <__aeabi_f2d>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4620      	mov	r0, r4
 8004012:	4629      	mov	r1, r5
 8004014:	f7fc f8de 	bl	80001d4 <__adddf3>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4614      	mov	r4, r2
 800401e:	461d      	mov	r5, r3
 8004020:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004024:	edd7 7a06 	vldr	s15, [r7, #24]
 8004028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402c:	ee17 0a90 	vmov	r0, s15
 8004030:	f7fc fa2e 	bl	8000490 <__aeabi_f2d>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4620      	mov	r0, r4
 800403a:	4629      	mov	r1, r5
 800403c:	f7fc f8c8 	bl	80001d0 <__aeabi_dsub>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800404a:	f7fc fa21 	bl	8000490 <__aeabi_f2d>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4620      	mov	r0, r4
 8004054:	4629      	mov	r1, r5
 8004056:	f7fc f8bb 	bl	80001d0 <__aeabi_dsub>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4614      	mov	r4, r2
 8004060:	461d      	mov	r5, r3
 8004062:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004066:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	ee17 0a90 	vmov	r0, s15
 8004072:	f7fc fa0d 	bl	8000490 <__aeabi_f2d>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4620      	mov	r0, r4
 800407c:	4629      	mov	r1, r5
 800407e:	f7fc f8a9 	bl	80001d4 <__adddf3>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4614      	mov	r4, r2
 8004088:	461d      	mov	r5, r3
 800408a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800408e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004096:	ee17 0a90 	vmov	r0, s15
 800409a:	f7fc f9f9 	bl	8000490 <__aeabi_f2d>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4620      	mov	r0, r4
 80040a4:	4629      	mov	r1, r5
 80040a6:	f7fc f895 	bl	80001d4 <__adddf3>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4614      	mov	r4, r2
 80040b0:	461d      	mov	r5, r3
 80040b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80040b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80040ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040be:	ee17 0a90 	vmov	r0, s15
 80040c2:	f7fc f9e5 	bl	8000490 <__aeabi_f2d>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	f7fc f881 	bl	80001d4 <__adddf3>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f7fc fce1 	bl	8000aa0 <__aeabi_d2f>
 80040de:	4603      	mov	r3, r0
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80040e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80040e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80040ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ee:	ee17 0a90 	vmov	r0, s15
 80040f2:	f7fc f9cd 	bl	8000490 <__aeabi_f2d>
 80040f6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80040fa:	f7fc fa21 	bl	8000540 <__aeabi_dmul>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4614      	mov	r4, r2
 8004104:	461d      	mov	r5, r3
 8004106:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800410a:	edd7 7a07 	vldr	s15, [r7, #28]
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	ee17 0a90 	vmov	r0, s15
 8004116:	f7fc f9bb 	bl	8000490 <__aeabi_f2d>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4620      	mov	r0, r4
 8004120:	4629      	mov	r1, r5
 8004122:	f7fc f855 	bl	80001d0 <__aeabi_dsub>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4614      	mov	r4, r2
 800412c:	461d      	mov	r5, r3
 800412e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004132:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800413a:	ee17 0a90 	vmov	r0, s15
 800413e:	f7fc f9a7 	bl	8000490 <__aeabi_f2d>
 8004142:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004146:	f7fc f9fb 	bl	8000540 <__aeabi_dmul>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4620      	mov	r0, r4
 8004150:	4629      	mov	r1, r5
 8004152:	f7fc f83f 	bl	80001d4 <__adddf3>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4614      	mov	r4, r2
 800415c:	461d      	mov	r5, r3
 800415e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004162:	edd7 7a06 	vldr	s15, [r7, #24]
 8004166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416a:	ee17 0a90 	vmov	r0, s15
 800416e:	f7fc f98f 	bl	8000490 <__aeabi_f2d>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4620      	mov	r0, r4
 8004178:	4629      	mov	r1, r5
 800417a:	f7fc f829 	bl	80001d0 <__aeabi_dsub>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f7fc fc8b 	bl	8000aa0 <__aeabi_d2f>
 800418a:	4603      	mov	r3, r0
 800418c:	623b      	str	r3, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800418e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004192:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004196:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800419a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800419e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80041a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80041aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80041b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80041b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ba:	eeb0 0a67 	vmov.f32	s0, s15
 80041be:	f000 f943 	bl	8004448 <invSqrt>
 80041c2:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 80041c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80041ca:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 80041d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80041da:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80041de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 80041e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80041ea:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80041ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 80041f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80041fa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8004206:	4b8e      	ldr	r3, [pc, #568]	; (8004440 <MadgwicknoM+0xa4c>)
 8004208:	ed93 7a00 	vldr	s14, [r3]
 800420c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004214:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800421c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		qDot2 -= beta * s1;
 8004220:	4b87      	ldr	r3, [pc, #540]	; (8004440 <MadgwicknoM+0xa4c>)
 8004222:	ed93 7a00 	vldr	s14, [r3]
 8004226:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800422a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004236:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		qDot3 -= beta * s2;
 800423a:	4b81      	ldr	r3, [pc, #516]	; (8004440 <MadgwicknoM+0xa4c>)
 800423c:	ed93 7a00 	vldr	s14, [r3]
 8004240:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004248:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800424c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004250:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		qDot4 -= beta * s3;
 8004254:	4b7a      	ldr	r3, [pc, #488]	; (8004440 <MadgwicknoM+0xa4c>)
 8004256:	ed93 7a00 	vldr	s14, [r3]
 800425a:	edd7 7a08 	vldr	s15, [r7, #32]
 800425e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004262:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800426a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	}

	// Integrate rate of change of quaternion to yield quaternion
				q0 += qDot1 * deltaT;
 800426e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004272:	f7fc f90d 	bl	8000490 <__aeabi_f2d>
 8004276:	4b73      	ldr	r3, [pc, #460]	; (8004444 <MadgwicknoM+0xa50>)
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f7fc f960 	bl	8000540 <__aeabi_dmul>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004288:	f7fb ffa4 	bl	80001d4 <__adddf3>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		        q1 += qDot2 * deltaT;
 8004294:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004298:	f7fc f8fa 	bl	8000490 <__aeabi_f2d>
 800429c:	4b69      	ldr	r3, [pc, #420]	; (8004444 <MadgwicknoM+0xa50>)
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f7fc f94d 	bl	8000540 <__aeabi_dmul>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80042ae:	f7fb ff91 	bl	80001d4 <__adddf3>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		        q2 += qDot3 * deltaT;
 80042ba:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80042be:	f7fc f8e7 	bl	8000490 <__aeabi_f2d>
 80042c2:	4b60      	ldr	r3, [pc, #384]	; (8004444 <MadgwicknoM+0xa50>)
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f7fc f93a 	bl	8000540 <__aeabi_dmul>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80042d4:	f7fb ff7e 	bl	80001d4 <__adddf3>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		        q3 += qDot4 * deltaT;
 80042e0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80042e4:	f7fc f8d4 	bl	8000490 <__aeabi_f2d>
 80042e8:	4b56      	ldr	r3, [pc, #344]	; (8004444 <MadgwicknoM+0xa50>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fc f927 	bl	8000540 <__aeabi_dmul>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042fa:	f7fb ff6b 	bl	80001d4 <__adddf3>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004306:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800430a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800430e:	f7fc f917 	bl	8000540 <__aeabi_dmul>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4614      	mov	r4, r2
 8004318:	461d      	mov	r5, r3
 800431a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800431e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004322:	f7fc f90d 	bl	8000540 <__aeabi_dmul>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4620      	mov	r0, r4
 800432c:	4629      	mov	r1, r5
 800432e:	f7fb ff51 	bl	80001d4 <__adddf3>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4614      	mov	r4, r2
 8004338:	461d      	mov	r5, r3
 800433a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800433e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004342:	f7fc f8fd 	bl	8000540 <__aeabi_dmul>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4620      	mov	r0, r4
 800434c:	4629      	mov	r1, r5
 800434e:	f7fb ff41 	bl	80001d4 <__adddf3>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4614      	mov	r4, r2
 8004358:	461d      	mov	r5, r3
 800435a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800435e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004362:	f7fc f8ed 	bl	8000540 <__aeabi_dmul>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4620      	mov	r0, r4
 800436c:	4629      	mov	r1, r5
 800436e:	f7fb ff31 	bl	80001d4 <__adddf3>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	f7fc fb91 	bl	8000aa0 <__aeabi_d2f>
 800437e:	4603      	mov	r3, r0
 8004380:	ee00 3a10 	vmov	s0, r3
 8004384:	f000 f860 	bl	8004448 <invSqrt>
 8004388:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 800438c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800438e:	f7fc f87f 	bl	8000490 <__aeabi_f2d>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800439a:	f7fc f8d1 	bl	8000540 <__aeabi_dmul>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	q1 *= recipNorm;
 80043a6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80043a8:	f7fc f872 	bl	8000490 <__aeabi_f2d>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80043b4:	f7fc f8c4 	bl	8000540 <__aeabi_dmul>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	q2 *= recipNorm;
 80043c0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80043c2:	f7fc f865 	bl	8000490 <__aeabi_f2d>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80043ce:	f7fc f8b7 	bl	8000540 <__aeabi_dmul>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	q3 *= recipNorm;
 80043da:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80043dc:	f7fc f858 	bl	8000490 <__aeabi_f2d>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043e8:	f7fc f8aa 	bl	8000540 <__aeabi_dmul>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    q[0] = q0;
 80043f4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043f8:	f7fc fb52 	bl	8000aa0 <__aeabi_d2f>
 80043fc:	4602      	mov	r2, r0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
    q[1] = q1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	1d1c      	adds	r4, r3, #4
 8004406:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800440a:	f7fc fb49 	bl	8000aa0 <__aeabi_d2f>
 800440e:	4603      	mov	r3, r0
 8004410:	6023      	str	r3, [r4, #0]
    q[2] = q2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f103 0408 	add.w	r4, r3, #8
 8004418:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800441c:	f7fc fb40 	bl	8000aa0 <__aeabi_d2f>
 8004420:	4603      	mov	r3, r0
 8004422:	6023      	str	r3, [r4, #0]
    q[3] = q3;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f103 040c 	add.w	r4, r3, #12
 800442a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800442e:	f7fc fb37 	bl	8000aa0 <__aeabi_d2f>
 8004432:	4603      	mov	r3, r0
 8004434:	6023      	str	r3, [r4, #0]

}
 8004436:	bf00      	nop
 8004438:	3798      	adds	r7, #152	; 0x98
 800443a:	46bd      	mov	sp, r7
 800443c:	bdb0      	pop	{r4, r5, r7, pc}
 800443e:	bf00      	nop
 8004440:	20000004 	.word	0x20000004
 8004444:	20000450 	.word	0x20000450

08004448 <invSqrt>:
}

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8004452:	edd7 7a01 	vldr	s15, [r7, #4]
 8004456:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800445a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800445e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8004466:	f107 0310 	add.w	r3, r7, #16
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	105a      	asrs	r2, r3, #1
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <invSqrt+0x9c>)
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8004478:	f107 030c 	add.w	r3, r7, #12
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));//1st iteration shimojo
 8004480:	ed97 7a04 	vldr	s14, [r7, #16]
 8004484:	edd7 7a05 	vldr	s15, [r7, #20]
 8004488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800448c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004494:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004498:	ee37 7a67 	vsub.f32	s14, s14, s15
 800449c:	edd7 7a04 	vldr	s15, [r7, #16]
 80044a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a4:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));//2nd iteration shimojo
 80044a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80044ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80044b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80044b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044bc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80044c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80044c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044cc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	ee07 3a90 	vmov	s15, r3
}
 80044d6:	eeb0 0a67 	vmov.f32	s0, s15
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	5f3759df 	.word	0x5f3759df

080044e8 <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.004f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle, float rate)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80044f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80044f8:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
	axis->out.meas_value = angle;			//BNO080 rotation angle
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	649a      	str	r2, [r3, #72]	; 0x48

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800452a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004540:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8004740 <Double_Roll_Pitch_PID_Calculation+0x258>
 8004544:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004558:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004744 <Double_Roll_Pitch_PID_Calculation+0x25c>
 800455c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004564:	dd03      	ble.n	800456e <Double_Roll_Pitch_PID_Calculation+0x86>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a77      	ldr	r2, [pc, #476]	; (8004748 <Double_Roll_Pitch_PID_Calculation+0x260>)
 800456a:	655a      	str	r2, [r3, #84]	; 0x54
 800456c:	e00c      	b.n	8004588 <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004574:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800474c <Double_Roll_Pitch_PID_Calculation+0x264>
 8004578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800457c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004580:	d502      	bpl.n	8004588 <Double_Roll_Pitch_PID_Calculation+0xa0>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4a72      	ldr	r2, [pc, #456]	; (8004750 <Double_Roll_Pitch_PID_Calculation+0x268>)
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 800459e:	edd7 7a00 	vldr	s15, [r7]
 80045a2:	eef1 7a67 	vneg.f32	s15, s15
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80045b2:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004754 <Double_Roll_Pitch_PID_Calculation+0x26c>
 80045b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80045c0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8004758 <Double_Roll_Pitch_PID_Calculation+0x270>
 80045c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80045f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80045fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	/****************************************************************************************/

	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	ed93 7a03 	vldr	s14, [r3, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	ed93 7a07 	vldr	s14, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	edd3 7a06 	vldr	s15, [r3, #24]
 800464e:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004740 <Double_Roll_Pitch_PID_Calculation+0x258>
 8004652:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	edc3 7a07 	vstr	s15, [r3, #28]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004666:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004744 <Double_Roll_Pitch_PID_Calculation+0x25c>
 800466a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	dd03      	ble.n	800467c <Double_Roll_Pitch_PID_Calculation+0x194>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a34      	ldr	r2, [pc, #208]	; (8004748 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
 800467a:	e00c      	b.n	8004696 <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004682:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800474c <Double_Roll_Pitch_PID_Calculation+0x264>
 8004686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468e:	d502      	bpl.n	8004696 <Double_Roll_Pitch_PID_Calculation+0x1ae>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <Double_Roll_Pitch_PID_Calculation+0x268>)
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	ed93 7a07 	vldr	s14, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	edd3 7a01 	vldr	s15, [r3, #4]
 80046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	ed93 7a04 	vldr	s14, [r3, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80046b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046bc:	eeb1 7a67 	vneg.f32	s14, s15
 80046c0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004740 <Double_Roll_Pitch_PID_Calculation+0x258>
 80046c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80046dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80046ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80046ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80046f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	edd3 7a02 	vldr	s15, [r3, #8]
 8004708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
#endif

	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800471e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/****************************************************************************************/
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	3b83126f 	.word	0x3b83126f
 8004744:	43fa0000 	.word	0x43fa0000
 8004748:	43fa0000 	.word	0x43fa0000
 800474c:	c3fa0000 	.word	0xc3fa0000
 8004750:	c3fa0000 	.word	0xc3fa0000
 8004754:	3ecccccd 	.word	0x3ecccccd
 8004758:	3f19999a 	.word	0x3f19999a

0800475c <Reset_PID_Integrator>:
	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
	/*******************************************************************/
}

void Reset_PID_Integrator(PIDSingle* axis)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	61da      	str	r2, [r3, #28]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 800477c:	4809      	ldr	r0, [pc, #36]	; (80047a4 <Reset_All_PID_Integrator+0x2c>)
 800477e:	f7ff ffed 	bl	800475c <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 8004782:	4809      	ldr	r0, [pc, #36]	; (80047a8 <Reset_All_PID_Integrator+0x30>)
 8004784:	f7ff ffea 	bl	800475c <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 8004788:	4808      	ldr	r0, [pc, #32]	; (80047ac <Reset_All_PID_Integrator+0x34>)
 800478a:	f7ff ffe7 	bl	800475c <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 800478e:	4808      	ldr	r0, [pc, #32]	; (80047b0 <Reset_All_PID_Integrator+0x38>)
 8004790:	f7ff ffe4 	bl	800475c <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 8004794:	4807      	ldr	r0, [pc, #28]	; (80047b4 <Reset_All_PID_Integrator+0x3c>)
 8004796:	f7ff ffe1 	bl	800475c <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 800479a:	4807      	ldr	r0, [pc, #28]	; (80047b8 <Reset_All_PID_Integrator+0x40>)
 800479c:	f7ff ffde 	bl	800475c <Reset_PID_Integrator>
}
 80047a0:	bf00      	nop
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000460 	.word	0x20000460
 80047a8:	20000498 	.word	0x20000498
 80047ac:	200004d0 	.word	0x200004d0
 80047b0:	20000508 	.word	0x20000508
 80047b4:	20000540 	.word	0x20000540
 80047b8:	20000578 	.word	0x20000578

080047bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <HAL_MspInit+0x4c>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	4a0f      	ldr	r2, [pc, #60]	; (8004808 <HAL_MspInit+0x4c>)
 80047cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d0:	6453      	str	r3, [r2, #68]	; 0x44
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <HAL_MspInit+0x4c>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <HAL_MspInit+0x4c>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	4a08      	ldr	r2, [pc, #32]	; (8004808 <HAL_MspInit+0x4c>)
 80047e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ec:	6413      	str	r3, [r2, #64]	; 0x40
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_MspInit+0x4c>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800

0800480c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	; 0x28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004814:	f107 0314 	add.w	r3, r7, #20
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	60da      	str	r2, [r3, #12]
 8004822:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <HAL_I2C_MspInit+0x84>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d12c      	bne.n	8004888 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	4b18      	ldr	r3, [pc, #96]	; (8004894 <HAL_I2C_MspInit+0x88>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	4a17      	ldr	r2, [pc, #92]	; (8004894 <HAL_I2C_MspInit+0x88>)
 8004838:	f043 0302 	orr.w	r3, r3, #2
 800483c:	6313      	str	r3, [r2, #48]	; 0x30
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <HAL_I2C_MspInit+0x88>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800484a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800484e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004850:	2312      	movs	r3, #18
 8004852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004858:	2303      	movs	r3, #3
 800485a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800485c:	2304      	movs	r3, #4
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	4619      	mov	r1, r3
 8004866:	480c      	ldr	r0, [pc, #48]	; (8004898 <HAL_I2C_MspInit+0x8c>)
 8004868:	f000 fcd0 	bl	800520c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <HAL_I2C_MspInit+0x88>)
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	4a07      	ldr	r2, [pc, #28]	; (8004894 <HAL_I2C_MspInit+0x88>)
 8004876:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800487a:	6413      	str	r3, [r2, #64]	; 0x40
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_I2C_MspInit+0x88>)
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004888:	bf00      	nop
 800488a:	3728      	adds	r7, #40	; 0x28
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40005400 	.word	0x40005400
 8004894:	40023800 	.word	0x40023800
 8004898:	40020400 	.word	0x40020400

0800489c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d10e      	bne.n	80048cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	4b2a      	ldr	r3, [pc, #168]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	4a29      	ldr	r2, [pc, #164]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6413      	str	r3, [r2, #64]	; 0x40
 80048be:	4b27      	ldr	r3, [pc, #156]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80048ca:	e042      	b.n	8004952 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a23      	ldr	r2, [pc, #140]	; (8004960 <HAL_TIM_Base_MspInit+0xc4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048d6:	2300      	movs	r3, #0
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 80048e0:	f043 0302 	orr.w	r3, r3, #2
 80048e4:	6413      	str	r3, [r2, #64]	; 0x40
 80048e6:	4b1d      	ldr	r3, [pc, #116]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	693b      	ldr	r3, [r7, #16]
}
 80048f2:	e02e      	b.n	8004952 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <HAL_TIM_Base_MspInit+0xc8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d116      	bne.n	800492c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	4b16      	ldr	r3, [pc, #88]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	4a15      	ldr	r2, [pc, #84]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	6413      	str	r3, [r2, #64]	; 0x40
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	2100      	movs	r1, #0
 800491e:	201e      	movs	r0, #30
 8004920:	f000 fbab 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004924:	201e      	movs	r0, #30
 8004926:	f000 fbc4 	bl	80050b2 <HAL_NVIC_EnableIRQ>
}
 800492a:	e012      	b.n	8004952 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0d      	ldr	r2, [pc, #52]	; (8004968 <HAL_TIM_Base_MspInit+0xcc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d10d      	bne.n	8004952 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a07      	ldr	r2, [pc, #28]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_TIM_Base_MspInit+0xc0>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
}
 8004952:	bf00      	nop
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00

0800496c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <HAL_TIM_MspPostInit+0xa4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d13b      	bne.n	8004a06 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_TIM_MspPostInit+0xa8>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <HAL_TIM_MspPostInit+0xa8>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6313      	str	r3, [r2, #48]	; 0x30
 800499e:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_TIM_MspPostInit+0xa8>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_TIM_MspPostInit+0xa8>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <HAL_TIM_MspPostInit+0xa8>)
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_TIM_MspPostInit+0xa8>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049c6:	23c0      	movs	r3, #192	; 0xc0
 80049c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ca:	2302      	movs	r3, #2
 80049cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049d6:	2302      	movs	r3, #2
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	4619      	mov	r1, r3
 80049e0:	480d      	ldr	r0, [pc, #52]	; (8004a18 <HAL_TIM_MspPostInit+0xac>)
 80049e2:	f000 fc13 	bl	800520c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049e6:	2303      	movs	r3, #3
 80049e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ea:	2302      	movs	r3, #2
 80049ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f2:	2300      	movs	r3, #0
 80049f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049f6:	2302      	movs	r3, #2
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049fa:	f107 0314 	add.w	r3, r7, #20
 80049fe:	4619      	mov	r1, r3
 8004a00:	4806      	ldr	r0, [pc, #24]	; (8004a1c <HAL_TIM_MspPostInit+0xb0>)
 8004a02:	f000 fc03 	bl	800520c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004a06:	bf00      	nop
 8004a08:	3728      	adds	r7, #40	; 0x28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40020000 	.word	0x40020000
 8004a1c:	40020400 	.word	0x40020400

08004a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08c      	sub	sp, #48	; 0x30
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a28:	f107 031c 	add.w	r3, r7, #28
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	609a      	str	r2, [r3, #8]
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a3a      	ldr	r2, [pc, #232]	; (8004b28 <HAL_UART_MspInit+0x108>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d135      	bne.n	8004aae <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	4a38      	ldr	r2, [pc, #224]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004a4c:	f043 0310 	orr.w	r3, r3, #16
 8004a50:	6453      	str	r3, [r2, #68]	; 0x44
 8004a52:	4b36      	ldr	r3, [pc, #216]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a31      	ldr	r2, [pc, #196]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b2f      	ldr	r3, [pc, #188]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a8c:	2307      	movs	r3, #7
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a90:	f107 031c 	add.w	r3, r7, #28
 8004a94:	4619      	mov	r1, r3
 8004a96:	4826      	ldr	r0, [pc, #152]	; (8004b30 <HAL_UART_MspInit+0x110>)
 8004a98:	f000 fbb8 	bl	800520c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	2025      	movs	r0, #37	; 0x25
 8004aa2:	f000 faea 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004aa6:	2025      	movs	r0, #37	; 0x25
 8004aa8:	f000 fb03 	bl	80050b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004aac:	e038      	b.n	8004b20 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a20      	ldr	r2, [pc, #128]	; (8004b34 <HAL_UART_MspInit+0x114>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d133      	bne.n	8004b20 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	4a1a      	ldr	r2, [pc, #104]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac8:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae4:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <HAL_UART_MspInit+0x10c>)
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004af0:	230c      	movs	r3, #12
 8004af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af4:	2302      	movs	r3, #2
 8004af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004afc:	2303      	movs	r3, #3
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b00:	2307      	movs	r3, #7
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b04:	f107 031c 	add.w	r3, r7, #28
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4809      	ldr	r0, [pc, #36]	; (8004b30 <HAL_UART_MspInit+0x110>)
 8004b0c:	f000 fb7e 	bl	800520c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b10:	2200      	movs	r2, #0
 8004b12:	2100      	movs	r1, #0
 8004b14:	2026      	movs	r0, #38	; 0x26
 8004b16:	f000 fab0 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b1a:	2026      	movs	r0, #38	; 0x26
 8004b1c:	f000 fac9 	bl	80050b2 <HAL_NVIC_EnableIRQ>
}
 8004b20:	bf00      	nop
 8004b22:	3730      	adds	r7, #48	; 0x30
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40011000 	.word	0x40011000
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40020000 	.word	0x40020000
 8004b34:	40004400 	.word	0x40004400

08004b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b3c:	e7fe      	b.n	8004b3c <NMI_Handler+0x4>

08004b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b42:	e7fe      	b.n	8004b42 <HardFault_Handler+0x4>

08004b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b48:	e7fe      	b.n	8004b48 <MemManage_Handler+0x4>

08004b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b4e:	e7fe      	b.n	8004b4e <BusFault_Handler+0x4>

08004b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b54:	e7fe      	b.n	8004b54 <UsageFault_Handler+0x4>

08004b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b56:	b480      	push	{r7}
 8004b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b5a:	bf00      	nop
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b72:	b480      	push	{r7}
 8004b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b84:	f000 f95a 	bl	8004e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004b90:	4802      	ldr	r0, [pc, #8]	; (8004b9c <TIM4_IRQHandler+0x10>)
 8004b92:	f002 fbbf 	bl	8007314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	2000032c 	.word	0x2000032c

08004ba0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ba4:	4802      	ldr	r0, [pc, #8]	; (8004bb0 <USART1_IRQHandler+0x10>)
 8004ba6:	f003 fb39 	bl	800821c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004baa:	bf00      	nop
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200003bc 	.word	0x200003bc

08004bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004bb8:	4802      	ldr	r0, [pc, #8]	; (8004bc4 <USART2_IRQHandler+0x10>)
 8004bba:	f003 fb2f 	bl	800821c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000404 	.word	0x20000404

08004bc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004bcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004bd0:	f000 fcec 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004bd4:	bf00      	nop
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	e00a      	b.n	8004c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004bea:	f3af 8000 	nop.w
 8004bee:	4601      	mov	r1, r0
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	60ba      	str	r2, [r7, #8]
 8004bf6:	b2ca      	uxtb	r2, r1
 8004bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	dbf0      	blt.n	8004bea <_read+0x12>
  }

  return len;
 8004c08:	687b      	ldr	r3, [r7, #4]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b086      	sub	sp, #24
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	e009      	b.n	8004c38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	60ba      	str	r2, [r7, #8]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	3301      	adds	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	dbf1      	blt.n	8004c24 <_write+0x12>
  }
  return len;
 8004c40:	687b      	ldr	r3, [r7, #4]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <_close>:

int _close(int file)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c72:	605a      	str	r2, [r3, #4]
  return 0;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <_isatty>:

int _isatty(int file)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c8a:	2301      	movs	r3, #1
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cbc:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <_sbrk+0x5c>)
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <_sbrk+0x60>)
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <_sbrk+0x64>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <_sbrk+0x64>)
 8004cd2:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <_sbrk+0x68>)
 8004cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <_sbrk+0x64>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d207      	bcs.n	8004cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ce4:	f004 fc34 	bl	8009550 <__errno>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	220c      	movs	r2, #12
 8004cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf2:	e009      	b.n	8004d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <_sbrk+0x64>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cfa:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <_sbrk+0x64>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	4a05      	ldr	r2, [pc, #20]	; (8004d18 <_sbrk+0x64>)
 8004d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d06:	68fb      	ldr	r3, [r7, #12]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20020000 	.word	0x20020000
 8004d14:	00000400 	.word	0x00000400
 8004d18:	200005b0 	.word	0x200005b0
 8004d1c:	20000708 	.word	0x20000708

08004d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <SystemInit+0x20>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	4a05      	ldr	r2, [pc, #20]	; (8004d40 <SystemInit+0x20>)
 8004d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004d48:	f7ff ffea 	bl	8004d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d4c:	480c      	ldr	r0, [pc, #48]	; (8004d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d4e:	490d      	ldr	r1, [pc, #52]	; (8004d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d50:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d54:	e002      	b.n	8004d5c <LoopCopyDataInit>

08004d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d5a:	3304      	adds	r3, #4

08004d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d60:	d3f9      	bcc.n	8004d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d62:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d64:	4c0a      	ldr	r4, [pc, #40]	; (8004d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d68:	e001      	b.n	8004d6e <LoopFillZerobss>

08004d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d6c:	3204      	adds	r2, #4

08004d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d70:	d3fb      	bcc.n	8004d6a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004d72:	f004 fbf3 	bl	800955c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d76:	f7fc fc81 	bl	800167c <main>
  bx  lr    
 8004d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d84:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004d88:	0800a63c 	.word	0x0800a63c
  ldr r2, =_sbss
 8004d8c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004d90:	20000704 	.word	0x20000704

08004d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d94:	e7fe      	b.n	8004d94 <ADC_IRQHandler>
	...

08004d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <HAL_Init+0x40>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0d      	ldr	r2, [pc, #52]	; (8004dd8 <HAL_Init+0x40>)
 8004da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_Init+0x40>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <HAL_Init+0x40>)
 8004dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <HAL_Init+0x40>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <HAL_Init+0x40>)
 8004dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dc0:	2003      	movs	r0, #3
 8004dc2:	f000 f94f 	bl	8005064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dc6:	200f      	movs	r0, #15
 8004dc8:	f000 f808 	bl	8004ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dcc:	f7ff fcf6 	bl	80047bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023c00 	.word	0x40023c00

08004ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004de4:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <HAL_InitTick+0x54>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_InitTick+0x58>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	4619      	mov	r1, r3
 8004dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f967 	bl	80050ce <HAL_SYSTICK_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e00e      	b.n	8004e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b0f      	cmp	r3, #15
 8004e0e:	d80a      	bhi.n	8004e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e10:	2200      	movs	r2, #0
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	f000 f92f 	bl	800507a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e1c:	4a06      	ldr	r2, [pc, #24]	; (8004e38 <HAL_InitTick+0x5c>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e000      	b.n	8004e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000008 	.word	0x20000008
 8004e34:	20000010 	.word	0x20000010
 8004e38:	2000000c 	.word	0x2000000c

08004e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_IncTick+0x20>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_IncTick+0x24>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <HAL_IncTick+0x24>)
 8004e4e:	6013      	str	r3, [r2, #0]
}
 8004e50:	bf00      	nop
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000010 	.word	0x20000010
 8004e60:	200005b4 	.word	0x200005b4

08004e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return uwTick;
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <HAL_GetTick+0x14>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	200005b4 	.word	0x200005b4

08004e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e84:	f7ff ffee 	bl	8004e64 <HAL_GetTick>
 8004e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d005      	beq.n	8004ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <HAL_Delay+0x44>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ea2:	bf00      	nop
 8004ea4:	f7ff ffde 	bl	8004e64 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d8f7      	bhi.n	8004ea4 <HAL_Delay+0x28>
  {
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000010 	.word	0x20000010

08004ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <__NVIC_SetPriorityGrouping+0x44>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ef6:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <__NVIC_SetPriorityGrouping+0x44>)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	60d3      	str	r3, [r2, #12]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	e000ed00 	.word	0xe000ed00

08004f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <__NVIC_GetPriorityGrouping+0x18>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	f003 0307 	and.w	r3, r3, #7
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	db0b      	blt.n	8004f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	f003 021f 	and.w	r2, r3, #31
 8004f40:	4907      	ldr	r1, [pc, #28]	; (8004f60 <__NVIC_EnableIRQ+0x38>)
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2001      	movs	r0, #1
 8004f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000e100 	.word	0xe000e100

08004f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	db0a      	blt.n	8004f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	490c      	ldr	r1, [pc, #48]	; (8004fb0 <__NVIC_SetPriority+0x4c>)
 8004f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f82:	0112      	lsls	r2, r2, #4
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	440b      	add	r3, r1
 8004f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f8c:	e00a      	b.n	8004fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	4908      	ldr	r1, [pc, #32]	; (8004fb4 <__NVIC_SetPriority+0x50>)
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	3b04      	subs	r3, #4
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	761a      	strb	r2, [r3, #24]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	e000e100 	.word	0xe000e100
 8004fb4:	e000ed00 	.word	0xe000ed00

08004fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b089      	sub	sp, #36	; 0x24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f1c3 0307 	rsb	r3, r3, #7
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf28      	it	cs
 8004fd6:	2304      	movcs	r3, #4
 8004fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d902      	bls.n	8004fe8 <NVIC_EncodePriority+0x30>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3b03      	subs	r3, #3
 8004fe6:	e000      	b.n	8004fea <NVIC_EncodePriority+0x32>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005000:	f04f 31ff 	mov.w	r1, #4294967295
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	43d9      	mvns	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005010:	4313      	orrs	r3, r2
         );
}
 8005012:	4618      	mov	r0, r3
 8005014:	3724      	adds	r7, #36	; 0x24
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3b01      	subs	r3, #1
 800502c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005030:	d301      	bcc.n	8005036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005032:	2301      	movs	r3, #1
 8005034:	e00f      	b.n	8005056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <SysTick_Config+0x40>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3b01      	subs	r3, #1
 800503c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800503e:	210f      	movs	r1, #15
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	f7ff ff8e 	bl	8004f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <SysTick_Config+0x40>)
 800504a:	2200      	movs	r2, #0
 800504c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <SysTick_Config+0x40>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	e000e010 	.word	0xe000e010

08005064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ff29 	bl	8004ec4 <__NVIC_SetPriorityGrouping>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af00      	add	r7, sp, #0
 8005080:	4603      	mov	r3, r0
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800508c:	f7ff ff3e 	bl	8004f0c <__NVIC_GetPriorityGrouping>
 8005090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	6978      	ldr	r0, [r7, #20]
 8005098:	f7ff ff8e 	bl	8004fb8 <NVIC_EncodePriority>
 800509c:	4602      	mov	r2, r0
 800509e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a2:	4611      	mov	r1, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff ff5d 	bl	8004f64 <__NVIC_SetPriority>
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	4603      	mov	r3, r0
 80050ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff ff31 	bl	8004f28 <__NVIC_EnableIRQ>
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff ffa2 	bl	8005020 <SysTick_Config>
 80050dc:	4603      	mov	r3, r0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050f4:	f7ff feb6 	bl	8004e64 <HAL_GetTick>
 80050f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d008      	beq.n	8005118 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2280      	movs	r2, #128	; 0x80
 800510a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e052      	b.n	80051be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0216 	bic.w	r2, r2, #22
 8005126:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005136:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d103      	bne.n	8005148 <HAL_DMA_Abort+0x62>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0208 	bic.w	r2, r2, #8
 8005156:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005168:	e013      	b.n	8005192 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800516a:	f7ff fe7b 	bl	8004e64 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b05      	cmp	r3, #5
 8005176:	d90c      	bls.n	8005192 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2203      	movs	r2, #3
 8005182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e015      	b.n	80051be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e4      	bne.n	800516a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	223f      	movs	r2, #63	; 0x3f
 80051a6:	409a      	lsls	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d004      	beq.n	80051e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2280      	movs	r2, #128	; 0x80
 80051de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e00c      	b.n	80051fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2205      	movs	r2, #5
 80051e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800520c:	b480      	push	{r7}
 800520e:	b089      	sub	sp, #36	; 0x24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800521e:	2300      	movs	r3, #0
 8005220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	e16b      	b.n	8005500 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005228:	2201      	movs	r2, #1
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4013      	ands	r3, r2
 800523a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	429a      	cmp	r2, r3
 8005242:	f040 815a 	bne.w	80054fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d005      	beq.n	800525e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800525a:	2b02      	cmp	r3, #2
 800525c:	d130      	bne.n	80052c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	2203      	movs	r2, #3
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4013      	ands	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005294:	2201      	movs	r2, #1
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4013      	ands	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f003 0201 	and.w	r2, r3, #1
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d017      	beq.n	80052fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	2203      	movs	r2, #3
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d123      	bne.n	8005350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	08da      	lsrs	r2, r3, #3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3208      	adds	r2, #8
 8005310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	220f      	movs	r2, #15
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	4013      	ands	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	08da      	lsrs	r2, r3, #3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3208      	adds	r2, #8
 800534a:	69b9      	ldr	r1, [r7, #24]
 800534c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	2203      	movs	r2, #3
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	4013      	ands	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 0203 	and.w	r2, r3, #3
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4313      	orrs	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80b4 	beq.w	80054fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4b60      	ldr	r3, [pc, #384]	; (8005518 <HAL_GPIO_Init+0x30c>)
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	4a5f      	ldr	r2, [pc, #380]	; (8005518 <HAL_GPIO_Init+0x30c>)
 800539c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053a0:	6453      	str	r3, [r2, #68]	; 0x44
 80053a2:	4b5d      	ldr	r3, [pc, #372]	; (8005518 <HAL_GPIO_Init+0x30c>)
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053ae:	4a5b      	ldr	r2, [pc, #364]	; (800551c <HAL_GPIO_Init+0x310>)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	3302      	adds	r3, #2
 80053b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	220f      	movs	r2, #15
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a52      	ldr	r2, [pc, #328]	; (8005520 <HAL_GPIO_Init+0x314>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02b      	beq.n	8005432 <HAL_GPIO_Init+0x226>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a51      	ldr	r2, [pc, #324]	; (8005524 <HAL_GPIO_Init+0x318>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d025      	beq.n	800542e <HAL_GPIO_Init+0x222>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a50      	ldr	r2, [pc, #320]	; (8005528 <HAL_GPIO_Init+0x31c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <HAL_GPIO_Init+0x21e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a4f      	ldr	r2, [pc, #316]	; (800552c <HAL_GPIO_Init+0x320>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d019      	beq.n	8005426 <HAL_GPIO_Init+0x21a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a4e      	ldr	r2, [pc, #312]	; (8005530 <HAL_GPIO_Init+0x324>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_GPIO_Init+0x216>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a4d      	ldr	r2, [pc, #308]	; (8005534 <HAL_GPIO_Init+0x328>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00d      	beq.n	800541e <HAL_GPIO_Init+0x212>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a4c      	ldr	r2, [pc, #304]	; (8005538 <HAL_GPIO_Init+0x32c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <HAL_GPIO_Init+0x20e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a4b      	ldr	r2, [pc, #300]	; (800553c <HAL_GPIO_Init+0x330>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d101      	bne.n	8005416 <HAL_GPIO_Init+0x20a>
 8005412:	2307      	movs	r3, #7
 8005414:	e00e      	b.n	8005434 <HAL_GPIO_Init+0x228>
 8005416:	2308      	movs	r3, #8
 8005418:	e00c      	b.n	8005434 <HAL_GPIO_Init+0x228>
 800541a:	2306      	movs	r3, #6
 800541c:	e00a      	b.n	8005434 <HAL_GPIO_Init+0x228>
 800541e:	2305      	movs	r3, #5
 8005420:	e008      	b.n	8005434 <HAL_GPIO_Init+0x228>
 8005422:	2304      	movs	r3, #4
 8005424:	e006      	b.n	8005434 <HAL_GPIO_Init+0x228>
 8005426:	2303      	movs	r3, #3
 8005428:	e004      	b.n	8005434 <HAL_GPIO_Init+0x228>
 800542a:	2302      	movs	r3, #2
 800542c:	e002      	b.n	8005434 <HAL_GPIO_Init+0x228>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <HAL_GPIO_Init+0x228>
 8005432:	2300      	movs	r3, #0
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	f002 0203 	and.w	r2, r2, #3
 800543a:	0092      	lsls	r2, r2, #2
 800543c:	4093      	lsls	r3, r2
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4313      	orrs	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005444:	4935      	ldr	r1, [pc, #212]	; (800551c <HAL_GPIO_Init+0x310>)
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	089b      	lsrs	r3, r3, #2
 800544a:	3302      	adds	r3, #2
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005452:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <HAL_GPIO_Init+0x334>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005476:	4a32      	ldr	r2, [pc, #200]	; (8005540 <HAL_GPIO_Init+0x334>)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800547c:	4b30      	ldr	r3, [pc, #192]	; (8005540 <HAL_GPIO_Init+0x334>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054a0:	4a27      	ldr	r2, [pc, #156]	; (8005540 <HAL_GPIO_Init+0x334>)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <HAL_GPIO_Init+0x334>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	43db      	mvns	r3, r3
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4013      	ands	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054ca:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <HAL_GPIO_Init+0x334>)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <HAL_GPIO_Init+0x334>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	43db      	mvns	r3, r3
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	4013      	ands	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054f4:	4a12      	ldr	r2, [pc, #72]	; (8005540 <HAL_GPIO_Init+0x334>)
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3301      	adds	r3, #1
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	2b0f      	cmp	r3, #15
 8005504:	f67f ae90 	bls.w	8005228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	3724      	adds	r7, #36	; 0x24
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	40013800 	.word	0x40013800
 8005520:	40020000 	.word	0x40020000
 8005524:	40020400 	.word	0x40020400
 8005528:	40020800 	.word	0x40020800
 800552c:	40020c00 	.word	0x40020c00
 8005530:	40021000 	.word	0x40021000
 8005534:	40021400 	.word	0x40021400
 8005538:	40021800 	.word	0x40021800
 800553c:	40021c00 	.word	0x40021c00
 8005540:	40013c00 	.word	0x40013c00

08005544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	807b      	strh	r3, [r7, #2]
 8005550:	4613      	mov	r3, r2
 8005552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005554:	787b      	ldrb	r3, [r7, #1]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800555a:	887a      	ldrh	r2, [r7, #2]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005560:	e003      	b.n	800556a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	041a      	lsls	r2, r3, #16
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	619a      	str	r2, [r3, #24]
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005588:	887a      	ldrh	r2, [r7, #2]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4013      	ands	r3, r2
 800558e:	041a      	lsls	r2, r3, #16
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	43d9      	mvns	r1, r3
 8005594:	887b      	ldrh	r3, [r7, #2]
 8005596:	400b      	ands	r3, r1
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	619a      	str	r2, [r3, #24]
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055b6:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055c2:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fb fff2 	bl	80015b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40013c00 	.word	0x40013c00

080055dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e12b      	b.n	8005846 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff f902 	bl	800480c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	; 0x24
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800562e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800563e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005640:	f001 fbf6 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8005644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4a81      	ldr	r2, [pc, #516]	; (8005850 <HAL_I2C_Init+0x274>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d807      	bhi.n	8005660 <HAL_I2C_Init+0x84>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a80      	ldr	r2, [pc, #512]	; (8005854 <HAL_I2C_Init+0x278>)
 8005654:	4293      	cmp	r3, r2
 8005656:	bf94      	ite	ls
 8005658:	2301      	movls	r3, #1
 800565a:	2300      	movhi	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e006      	b.n	800566e <HAL_I2C_Init+0x92>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a7d      	ldr	r2, [pc, #500]	; (8005858 <HAL_I2C_Init+0x27c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	bf94      	ite	ls
 8005668:	2301      	movls	r3, #1
 800566a:	2300      	movhi	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e0e7      	b.n	8005846 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a78      	ldr	r2, [pc, #480]	; (800585c <HAL_I2C_Init+0x280>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	0c9b      	lsrs	r3, r3, #18
 8005680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a6a      	ldr	r2, [pc, #424]	; (8005850 <HAL_I2C_Init+0x274>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d802      	bhi.n	80056b0 <HAL_I2C_Init+0xd4>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	3301      	adds	r3, #1
 80056ae:	e009      	b.n	80056c4 <HAL_I2C_Init+0xe8>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	4a69      	ldr	r2, [pc, #420]	; (8005860 <HAL_I2C_Init+0x284>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	3301      	adds	r3, #1
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	495c      	ldr	r1, [pc, #368]	; (8005850 <HAL_I2C_Init+0x274>)
 80056e0:	428b      	cmp	r3, r1
 80056e2:	d819      	bhi.n	8005718 <HAL_I2C_Init+0x13c>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	1e59      	subs	r1, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80056f2:	1c59      	adds	r1, r3, #1
 80056f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056f8:	400b      	ands	r3, r1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_I2C_Init+0x138>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1e59      	subs	r1, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	fbb1 f3f3 	udiv	r3, r1, r3
 800570c:	3301      	adds	r3, #1
 800570e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005712:	e051      	b.n	80057b8 <HAL_I2C_Init+0x1dc>
 8005714:	2304      	movs	r3, #4
 8005716:	e04f      	b.n	80057b8 <HAL_I2C_Init+0x1dc>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d111      	bne.n	8005744 <HAL_I2C_Init+0x168>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1e58      	subs	r0, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6859      	ldr	r1, [r3, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	440b      	add	r3, r1
 800572e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005732:	3301      	adds	r3, #1
 8005734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	e012      	b.n	800576a <HAL_I2C_Init+0x18e>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	1e58      	subs	r0, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	0099      	lsls	r1, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	fbb0 f3f3 	udiv	r3, r0, r3
 800575a:	3301      	adds	r3, #1
 800575c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005760:	2b00      	cmp	r3, #0
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_I2C_Init+0x196>
 800576e:	2301      	movs	r3, #1
 8005770:	e022      	b.n	80057b8 <HAL_I2C_Init+0x1dc>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10e      	bne.n	8005798 <HAL_I2C_Init+0x1bc>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1e58      	subs	r0, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6859      	ldr	r1, [r3, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	440b      	add	r3, r1
 8005788:	fbb0 f3f3 	udiv	r3, r0, r3
 800578c:	3301      	adds	r3, #1
 800578e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005796:	e00f      	b.n	80057b8 <HAL_I2C_Init+0x1dc>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	1e58      	subs	r0, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6859      	ldr	r1, [r3, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	0099      	lsls	r1, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ae:	3301      	adds	r3, #1
 80057b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	6809      	ldr	r1, [r1, #0]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69da      	ldr	r2, [r3, #28]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6911      	ldr	r1, [r2, #16]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68d2      	ldr	r2, [r2, #12]
 80057f2:	4311      	orrs	r1, r2
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	000186a0 	.word	0x000186a0
 8005854:	001e847f 	.word	0x001e847f
 8005858:	003d08ff 	.word	0x003d08ff
 800585c:	431bde83 	.word	0x431bde83
 8005860:	10624dd3 	.word	0x10624dd3

08005864 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	461a      	mov	r2, r3
 8005870:	460b      	mov	r3, r1
 8005872:	817b      	strh	r3, [r7, #10]
 8005874:	4613      	mov	r3, r2
 8005876:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005878:	f7ff faf4 	bl	8004e64 <HAL_GetTick>
 800587c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b20      	cmp	r3, #32
 8005888:	f040 80e0 	bne.w	8005a4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	2319      	movs	r3, #25
 8005892:	2201      	movs	r2, #1
 8005894:	4970      	ldr	r1, [pc, #448]	; (8005a58 <HAL_I2C_Master_Transmit+0x1f4>)
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fc64 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
 80058a4:	e0d3      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_I2C_Master_Transmit+0x50>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e0cc      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x1ea>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d007      	beq.n	80058da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2221      	movs	r2, #33	; 0x21
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2210      	movs	r2, #16
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	893a      	ldrh	r2, [r7, #8]
 800590a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a50      	ldr	r2, [pc, #320]	; (8005a5c <HAL_I2C_Master_Transmit+0x1f8>)
 800591a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800591c:	8979      	ldrh	r1, [r7, #10]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	6a3a      	ldr	r2, [r7, #32]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 face 	bl	8005ec4 <I2C_MasterRequestWrite>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e08d      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005948:	e066      	b.n	8005a18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	6a39      	ldr	r1, [r7, #32]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fd22 	bl	8006398 <I2C_WaitOnTXEFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	2b04      	cmp	r3, #4
 8005960:	d107      	bne.n	8005972 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e06b      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	781a      	ldrb	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d11b      	bne.n	80059ec <HAL_I2C_Master_Transmit+0x188>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d017      	beq.n	80059ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	6a39      	ldr	r1, [r7, #32]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fd19 	bl	8006428 <I2C_WaitOnBTFFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00d      	beq.n	8005a18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d107      	bne.n	8005a14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e01a      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d194      	bne.n	800594a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e000      	b.n	8005a4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a4c:	2302      	movs	r3, #2
  }
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	00100002 	.word	0x00100002
 8005a5c:	ffff0000 	.word	0xffff0000

08005a60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08c      	sub	sp, #48	; 0x30
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	817b      	strh	r3, [r7, #10]
 8005a70:	4613      	mov	r3, r2
 8005a72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a74:	f7ff f9f6 	bl	8004e64 <HAL_GetTick>
 8005a78:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	f040 8217 	bne.w	8005eb6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2319      	movs	r3, #25
 8005a8e:	2201      	movs	r2, #1
 8005a90:	497c      	ldr	r1, [pc, #496]	; (8005c84 <HAL_I2C_Master_Receive+0x224>)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fb66 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e20a      	b.n	8005eb8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_I2C_Master_Receive+0x50>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e203      	b.n	8005eb8 <HAL_I2C_Master_Receive+0x458>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d007      	beq.n	8005ad6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2222      	movs	r2, #34	; 0x22
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2210      	movs	r2, #16
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	893a      	ldrh	r2, [r7, #8]
 8005b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a5c      	ldr	r2, [pc, #368]	; (8005c88 <HAL_I2C_Master_Receive+0x228>)
 8005b16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b18:	8979      	ldrh	r1, [r7, #10]
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fa52 	bl	8005fc8 <I2C_MasterRequestRead>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e1c4      	b.n	8005eb8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d113      	bne.n	8005b5e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b36:	2300      	movs	r3, #0
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	623b      	str	r3, [r7, #32]
 8005b4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e198      	b.n	8005e90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d11b      	bne.n	8005b9e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	61fb      	str	r3, [r7, #28]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e178      	b.n	8005e90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d11b      	bne.n	8005bde <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	e158      	b.n	8005e90 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c04:	e144      	b.n	8005e90 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	f200 80f1 	bhi.w	8005df2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d123      	bne.n	8005c60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fc4b 	bl	80064b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e145      	b.n	8005eb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c5e:	e117      	b.n	8005e90 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d14e      	bne.n	8005d06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4906      	ldr	r1, [pc, #24]	; (8005c8c <HAL_I2C_Master_Receive+0x22c>)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fa76 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e11a      	b.n	8005eb8 <HAL_I2C_Master_Receive+0x458>
 8005c82:	bf00      	nop
 8005c84:	00100002 	.word	0x00100002
 8005c88:	ffff0000 	.word	0xffff0000
 8005c8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d04:	e0c4      	b.n	8005e90 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	496c      	ldr	r1, [pc, #432]	; (8005ec0 <HAL_I2C_Master_Receive+0x460>)
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fa27 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0cb      	b.n	8005eb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4955      	ldr	r1, [pc, #340]	; (8005ec0 <HAL_I2C_Master_Receive+0x460>)
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f9f9 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e09d      	b.n	8005eb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005df0:	e04e      	b.n	8005e90 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 fb5e 	bl	80064b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e058      	b.n	8005eb8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d124      	bne.n	8005e90 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d107      	bne.n	8005e5e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f47f aeb6 	bne.w	8005c06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3728      	adds	r7, #40	; 0x28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	00010004 	.word	0x00010004

08005ec4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d006      	beq.n	8005eee <I2C_MasterRequestWrite+0x2a>
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d003      	beq.n	8005eee <I2C_MasterRequestWrite+0x2a>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eec:	d108      	bne.n	8005f00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e00b      	b.n	8005f18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	2b12      	cmp	r3, #18
 8005f06:	d107      	bne.n	8005f18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f91d 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00d      	beq.n	8005f4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3e:	d103      	bne.n	8005f48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e035      	b.n	8005fb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f54:	d108      	bne.n	8005f68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f56:	897b      	ldrh	r3, [r7, #10]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f64:	611a      	str	r2, [r3, #16]
 8005f66:	e01b      	b.n	8005fa0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f68:	897b      	ldrh	r3, [r7, #10]
 8005f6a:	11db      	asrs	r3, r3, #7
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f003 0306 	and.w	r3, r3, #6
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f063 030f 	orn	r3, r3, #15
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	490e      	ldr	r1, [pc, #56]	; (8005fc0 <I2C_MasterRequestWrite+0xfc>)
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f966 	bl	8006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e010      	b.n	8005fb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f96:	897b      	ldrh	r3, [r7, #10]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4907      	ldr	r1, [pc, #28]	; (8005fc4 <I2C_MasterRequestWrite+0x100>)
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f956 	bl	8006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	00010008 	.word	0x00010008
 8005fc4:	00010002 	.word	0x00010002

08005fc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d006      	beq.n	8006002 <I2C_MasterRequestRead+0x3a>
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d003      	beq.n	8006002 <I2C_MasterRequestRead+0x3a>
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006000:	d108      	bne.n	8006014 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e00b      	b.n	800602c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	2b11      	cmp	r3, #17
 800601a:	d107      	bne.n	800602c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f893 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00d      	beq.n	8006060 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006052:	d103      	bne.n	800605c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800605a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e079      	b.n	8006154 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006068:	d108      	bne.n	800607c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800606a:	897b      	ldrh	r3, [r7, #10]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	b2da      	uxtb	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	611a      	str	r2, [r3, #16]
 800607a:	e05f      	b.n	800613c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800607c:	897b      	ldrh	r3, [r7, #10]
 800607e:	11db      	asrs	r3, r3, #7
 8006080:	b2db      	uxtb	r3, r3
 8006082:	f003 0306 	and.w	r3, r3, #6
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f063 030f 	orn	r3, r3, #15
 800608c:	b2da      	uxtb	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4930      	ldr	r1, [pc, #192]	; (800615c <I2C_MasterRequestRead+0x194>)
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f8dc 	bl	8006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e054      	b.n	8006154 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80060aa:	897b      	ldrh	r3, [r7, #10]
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	4929      	ldr	r1, [pc, #164]	; (8006160 <I2C_MasterRequestRead+0x198>)
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f8cc 	bl	8006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e044      	b.n	8006154 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 f831 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00d      	beq.n	8006124 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006116:	d103      	bne.n	8006120 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800611e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e017      	b.n	8006154 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006124:	897b      	ldrh	r3, [r7, #10]
 8006126:	11db      	asrs	r3, r3, #7
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f003 0306 	and.w	r3, r3, #6
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f063 030e 	orn	r3, r3, #14
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4907      	ldr	r1, [pc, #28]	; (8006160 <I2C_MasterRequestRead+0x198>)
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f888 	bl	8006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	00010008 	.word	0x00010008
 8006160:	00010002 	.word	0x00010002

08006164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006174:	e048      	b.n	8006208 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d044      	beq.n	8006208 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617e:	f7fe fe71 	bl	8004e64 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d302      	bcc.n	8006194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d139      	bne.n	8006208 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10d      	bne.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	43da      	mvns	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4013      	ands	r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf0c      	ite	eq
 80061b0:	2301      	moveq	r3, #1
 80061b2:	2300      	movne	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	e00c      	b.n	80061d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	43da      	mvns	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4013      	ands	r3, r2
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d116      	bne.n	8006208 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	f043 0220 	orr.w	r2, r3, #32
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e023      	b.n	8006250 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10d      	bne.n	800622e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	43da      	mvns	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4013      	ands	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	e00c      	b.n	8006248 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	43da      	mvns	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4013      	ands	r3, r2
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	bf0c      	ite	eq
 8006240:	2301      	moveq	r3, #1
 8006242:	2300      	movne	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	429a      	cmp	r2, r3
 800624c:	d093      	beq.n	8006176 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006266:	e071      	b.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	d123      	bne.n	80062c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006286:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	f043 0204 	orr.w	r2, r3, #4
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e067      	b.n	8006390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d041      	beq.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c8:	f7fe fdcc 	bl	8004e64 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d302      	bcc.n	80062de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d136      	bne.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d10c      	bne.n	8006302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	43da      	mvns	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4013      	ands	r3, r2
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bf14      	ite	ne
 80062fa:	2301      	movne	r3, #1
 80062fc:	2300      	moveq	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	e00b      	b.n	800631a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	43da      	mvns	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4013      	ands	r3, r2
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d016      	beq.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e021      	b.n	8006390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10c      	bne.n	8006370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	43da      	mvns	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e00b      	b.n	8006388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	43da      	mvns	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4013      	ands	r3, r2
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	bf14      	ite	ne
 8006382:	2301      	movne	r3, #1
 8006384:	2300      	moveq	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	f47f af6d 	bne.w	8006268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063a4:	e034      	b.n	8006410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f8e3 	bl	8006572 <I2C_IsAcknowledgeFailed>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e034      	b.n	8006420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063bc:	d028      	beq.n	8006410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063be:	f7fe fd51 	bl	8004e64 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d302      	bcc.n	80063d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d11d      	bne.n	8006410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063de:	2b80      	cmp	r3, #128	; 0x80
 80063e0:	d016      	beq.n	8006410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e007      	b.n	8006420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800641a:	2b80      	cmp	r3, #128	; 0x80
 800641c:	d1c3      	bne.n	80063a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006434:	e034      	b.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f89b 	bl	8006572 <I2C_IsAcknowledgeFailed>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e034      	b.n	80064b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d028      	beq.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fe fd09 	bl	8004e64 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d11d      	bne.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b04      	cmp	r3, #4
 8006470:	d016      	beq.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e007      	b.n	80064b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d1c3      	bne.n	8006436 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064c4:	e049      	b.n	800655a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d119      	bne.n	8006508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0210 	mvn.w	r2, #16
 80064dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e030      	b.n	800656a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006508:	f7fe fcac 	bl	8004e64 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	429a      	cmp	r2, r3
 8006516:	d302      	bcc.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11d      	bne.n	800655a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b40      	cmp	r3, #64	; 0x40
 800652a:	d016      	beq.n	800655a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f043 0220 	orr.w	r2, r3, #32
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e007      	b.n	800656a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b40      	cmp	r3, #64	; 0x40
 8006566:	d1ae      	bne.n	80064c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006588:	d11b      	bne.n	80065c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006592:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f043 0204 	orr.w	r2, r3, #4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e267      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d075      	beq.n	80066da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065ee:	4b88      	ldr	r3, [pc, #544]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 030c 	and.w	r3, r3, #12
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d00c      	beq.n	8006614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065fa:	4b85      	ldr	r3, [pc, #532]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006602:	2b08      	cmp	r3, #8
 8006604:	d112      	bne.n	800662c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006606:	4b82      	ldr	r3, [pc, #520]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800660e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006612:	d10b      	bne.n	800662c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006614:	4b7e      	ldr	r3, [pc, #504]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d05b      	beq.n	80066d8 <HAL_RCC_OscConfig+0x108>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d157      	bne.n	80066d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e242      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006634:	d106      	bne.n	8006644 <HAL_RCC_OscConfig+0x74>
 8006636:	4b76      	ldr	r3, [pc, #472]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a75      	ldr	r2, [pc, #468]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 800663c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e01d      	b.n	8006680 <HAL_RCC_OscConfig+0xb0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800664c:	d10c      	bne.n	8006668 <HAL_RCC_OscConfig+0x98>
 800664e:	4b70      	ldr	r3, [pc, #448]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6f      	ldr	r2, [pc, #444]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	4b6d      	ldr	r3, [pc, #436]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a6c      	ldr	r2, [pc, #432]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	e00b      	b.n	8006680 <HAL_RCC_OscConfig+0xb0>
 8006668:	4b69      	ldr	r3, [pc, #420]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a68      	ldr	r2, [pc, #416]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 800666e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	4b66      	ldr	r3, [pc, #408]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a65      	ldr	r2, [pc, #404]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 800667a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800667e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d013      	beq.n	80066b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006688:	f7fe fbec 	bl	8004e64 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006690:	f7fe fbe8 	bl	8004e64 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b64      	cmp	r3, #100	; 0x64
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e207      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a2:	4b5b      	ldr	r3, [pc, #364]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0f0      	beq.n	8006690 <HAL_RCC_OscConfig+0xc0>
 80066ae:	e014      	b.n	80066da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b0:	f7fe fbd8 	bl	8004e64 <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066b8:	f7fe fbd4 	bl	8004e64 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b64      	cmp	r3, #100	; 0x64
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e1f3      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ca:	4b51      	ldr	r3, [pc, #324]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1f0      	bne.n	80066b8 <HAL_RCC_OscConfig+0xe8>
 80066d6:	e000      	b.n	80066da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d063      	beq.n	80067ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066e6:	4b4a      	ldr	r3, [pc, #296]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 030c 	and.w	r3, r3, #12
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00b      	beq.n	800670a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066f2:	4b47      	ldr	r3, [pc, #284]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d11c      	bne.n	8006738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066fe:	4b44      	ldr	r3, [pc, #272]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d116      	bne.n	8006738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800670a:	4b41      	ldr	r3, [pc, #260]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <HAL_RCC_OscConfig+0x152>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d001      	beq.n	8006722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e1c7      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006722:	4b3b      	ldr	r3, [pc, #236]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4937      	ldr	r1, [pc, #220]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006732:	4313      	orrs	r3, r2
 8006734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006736:	e03a      	b.n	80067ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d020      	beq.n	8006782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006740:	4b34      	ldr	r3, [pc, #208]	; (8006814 <HAL_RCC_OscConfig+0x244>)
 8006742:	2201      	movs	r2, #1
 8006744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006746:	f7fe fb8d 	bl	8004e64 <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800674c:	e008      	b.n	8006760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800674e:	f7fe fb89 	bl	8004e64 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d901      	bls.n	8006760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e1a8      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006760:	4b2b      	ldr	r3, [pc, #172]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0f0      	beq.n	800674e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800676c:	4b28      	ldr	r3, [pc, #160]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	4925      	ldr	r1, [pc, #148]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 800677c:	4313      	orrs	r3, r2
 800677e:	600b      	str	r3, [r1, #0]
 8006780:	e015      	b.n	80067ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006782:	4b24      	ldr	r3, [pc, #144]	; (8006814 <HAL_RCC_OscConfig+0x244>)
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006788:	f7fe fb6c 	bl	8004e64 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006790:	f7fe fb68 	bl	8004e64 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e187      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067a2:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d036      	beq.n	8006828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d016      	beq.n	80067f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <HAL_RCC_OscConfig+0x248>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c8:	f7fe fb4c 	bl	8004e64 <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067d0:	f7fe fb48 	bl	8004e64 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e167      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <HAL_RCC_OscConfig+0x240>)
 80067e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <HAL_RCC_OscConfig+0x200>
 80067ee:	e01b      	b.n	8006828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067f0:	4b09      	ldr	r3, [pc, #36]	; (8006818 <HAL_RCC_OscConfig+0x248>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f6:	f7fe fb35 	bl	8004e64 <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067fc:	e00e      	b.n	800681c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067fe:	f7fe fb31 	bl	8004e64 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d907      	bls.n	800681c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e150      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
 8006810:	40023800 	.word	0x40023800
 8006814:	42470000 	.word	0x42470000
 8006818:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800681c:	4b88      	ldr	r3, [pc, #544]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 800681e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1ea      	bne.n	80067fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8097 	beq.w	8006964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006836:	2300      	movs	r3, #0
 8006838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800683a:	4b81      	ldr	r3, [pc, #516]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10f      	bne.n	8006866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	4b7d      	ldr	r3, [pc, #500]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	4a7c      	ldr	r2, [pc, #496]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006854:	6413      	str	r3, [r2, #64]	; 0x40
 8006856:	4b7a      	ldr	r3, [pc, #488]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006862:	2301      	movs	r3, #1
 8006864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006866:	4b77      	ldr	r3, [pc, #476]	; (8006a44 <HAL_RCC_OscConfig+0x474>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686e:	2b00      	cmp	r3, #0
 8006870:	d118      	bne.n	80068a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006872:	4b74      	ldr	r3, [pc, #464]	; (8006a44 <HAL_RCC_OscConfig+0x474>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a73      	ldr	r2, [pc, #460]	; (8006a44 <HAL_RCC_OscConfig+0x474>)
 8006878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800687c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800687e:	f7fe faf1 	bl	8004e64 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006886:	f7fe faed 	bl	8004e64 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e10c      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006898:	4b6a      	ldr	r3, [pc, #424]	; (8006a44 <HAL_RCC_OscConfig+0x474>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f0      	beq.n	8006886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d106      	bne.n	80068ba <HAL_RCC_OscConfig+0x2ea>
 80068ac:	4b64      	ldr	r3, [pc, #400]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b0:	4a63      	ldr	r2, [pc, #396]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6713      	str	r3, [r2, #112]	; 0x70
 80068b8:	e01c      	b.n	80068f4 <HAL_RCC_OscConfig+0x324>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b05      	cmp	r3, #5
 80068c0:	d10c      	bne.n	80068dc <HAL_RCC_OscConfig+0x30c>
 80068c2:	4b5f      	ldr	r3, [pc, #380]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	4a5e      	ldr	r2, [pc, #376]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068c8:	f043 0304 	orr.w	r3, r3, #4
 80068cc:	6713      	str	r3, [r2, #112]	; 0x70
 80068ce:	4b5c      	ldr	r3, [pc, #368]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	4a5b      	ldr	r2, [pc, #364]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	6713      	str	r3, [r2, #112]	; 0x70
 80068da:	e00b      	b.n	80068f4 <HAL_RCC_OscConfig+0x324>
 80068dc:	4b58      	ldr	r3, [pc, #352]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e0:	4a57      	ldr	r2, [pc, #348]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068e2:	f023 0301 	bic.w	r3, r3, #1
 80068e6:	6713      	str	r3, [r2, #112]	; 0x70
 80068e8:	4b55      	ldr	r3, [pc, #340]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ec:	4a54      	ldr	r2, [pc, #336]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80068ee:	f023 0304 	bic.w	r3, r3, #4
 80068f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d015      	beq.n	8006928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fc:	f7fe fab2 	bl	8004e64 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006902:	e00a      	b.n	800691a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006904:	f7fe faae 	bl	8004e64 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e0cb      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800691a:	4b49      	ldr	r3, [pc, #292]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0ee      	beq.n	8006904 <HAL_RCC_OscConfig+0x334>
 8006926:	e014      	b.n	8006952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006928:	f7fe fa9c 	bl	8004e64 <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800692e:	e00a      	b.n	8006946 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006930:	f7fe fa98 	bl	8004e64 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f241 3288 	movw	r2, #5000	; 0x1388
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e0b5      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006946:	4b3e      	ldr	r3, [pc, #248]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1ee      	bne.n	8006930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d105      	bne.n	8006964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006958:	4b39      	ldr	r3, [pc, #228]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 800695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695c:	4a38      	ldr	r2, [pc, #224]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 800695e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 80a1 	beq.w	8006ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800696e:	4b34      	ldr	r3, [pc, #208]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b08      	cmp	r3, #8
 8006978:	d05c      	beq.n	8006a34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d141      	bne.n	8006a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006982:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <HAL_RCC_OscConfig+0x478>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006988:	f7fe fa6c 	bl	8004e64 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006990:	f7fe fa68 	bl	8004e64 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e087      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a2:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	019b      	lsls	r3, r3, #6
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	3b01      	subs	r3, #1
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	491b      	ldr	r1, [pc, #108]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069d8:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <HAL_RCC_OscConfig+0x478>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069de:	f7fe fa41 	bl	8004e64 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069e6:	f7fe fa3d 	bl	8004e64 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e05c      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f8:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x416>
 8006a04:	e054      	b.n	8006ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <HAL_RCC_OscConfig+0x478>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0c:	f7fe fa2a 	bl	8004e64 <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a14:	f7fe fa26 	bl	8004e64 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e045      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <HAL_RCC_OscConfig+0x470>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1f0      	bne.n	8006a14 <HAL_RCC_OscConfig+0x444>
 8006a32:	e03d      	b.n	8006ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d107      	bne.n	8006a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e038      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
 8006a40:	40023800 	.word	0x40023800
 8006a44:	40007000 	.word	0x40007000
 8006a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a4c:	4b1b      	ldr	r3, [pc, #108]	; (8006abc <HAL_RCC_OscConfig+0x4ec>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d028      	beq.n	8006aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d121      	bne.n	8006aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d11a      	bne.n	8006aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d111      	bne.n	8006aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	3b01      	subs	r3, #1
 8006a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d107      	bne.n	8006aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d001      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e000      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800

08006ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0cc      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ad4:	4b68      	ldr	r3, [pc, #416]	; (8006c78 <HAL_RCC_ClockConfig+0x1b8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d90c      	bls.n	8006afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae2:	4b65      	ldr	r3, [pc, #404]	; (8006c78 <HAL_RCC_ClockConfig+0x1b8>)
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aea:	4b63      	ldr	r3, [pc, #396]	; (8006c78 <HAL_RCC_ClockConfig+0x1b8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d001      	beq.n	8006afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0b8      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d020      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b14:	4b59      	ldr	r3, [pc, #356]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4a58      	ldr	r2, [pc, #352]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b2c:	4b53      	ldr	r3, [pc, #332]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	4a52      	ldr	r2, [pc, #328]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b38:	4b50      	ldr	r3, [pc, #320]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	494d      	ldr	r1, [pc, #308]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d044      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b5e:	4b47      	ldr	r3, [pc, #284]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d119      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e07f      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d003      	beq.n	8006b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b7e:	4b3f      	ldr	r3, [pc, #252]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e06f      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b8e:	4b3b      	ldr	r3, [pc, #236]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e067      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b9e:	4b37      	ldr	r3, [pc, #220]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f023 0203 	bic.w	r2, r3, #3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4934      	ldr	r1, [pc, #208]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bb0:	f7fe f958 	bl	8004e64 <HAL_GetTick>
 8006bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb6:	e00a      	b.n	8006bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bb8:	f7fe f954 	bl	8004e64 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e04f      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bce:	4b2b      	ldr	r3, [pc, #172]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 020c 	and.w	r2, r3, #12
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d1eb      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006be0:	4b25      	ldr	r3, [pc, #148]	; (8006c78 <HAL_RCC_ClockConfig+0x1b8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d20c      	bcs.n	8006c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bee:	4b22      	ldr	r3, [pc, #136]	; (8006c78 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf6:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e032      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c14:	4b19      	ldr	r3, [pc, #100]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	4916      	ldr	r1, [pc, #88]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c32:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	490e      	ldr	r1, [pc, #56]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c46:	f000 f821 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	490a      	ldr	r1, [pc, #40]	; (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006c58:	5ccb      	ldrb	r3, [r1, r3]
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c62:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <HAL_RCC_ClockConfig+0x1c8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe f8b8 	bl	8004ddc <HAL_InitTick>

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40023c00 	.word	0x40023c00
 8006c7c:	40023800 	.word	0x40023800
 8006c80:	0800a594 	.word	0x0800a594
 8006c84:	20000008 	.word	0x20000008
 8006c88:	2000000c 	.word	0x2000000c

08006c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c90:	b090      	sub	sp, #64	; 0x40
 8006c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
 8006c98:	2300      	movs	r3, #0
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ca4:	4b59      	ldr	r3, [pc, #356]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 030c 	and.w	r3, r3, #12
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d00d      	beq.n	8006ccc <HAL_RCC_GetSysClockFreq+0x40>
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	f200 80a1 	bhi.w	8006df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d003      	beq.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cbe:	e09b      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cc0:	4b53      	ldr	r3, [pc, #332]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8006cc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006cc4:	e09b      	b.n	8006dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cc6:	4b53      	ldr	r3, [pc, #332]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cca:	e098      	b.n	8006dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ccc:	4b4f      	ldr	r3, [pc, #316]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cd6:	4b4d      	ldr	r3, [pc, #308]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d028      	beq.n	8006d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ce2:	4b4a      	ldr	r3, [pc, #296]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	099b      	lsrs	r3, r3, #6
 8006ce8:	2200      	movs	r2, #0
 8006cea:	623b      	str	r3, [r7, #32]
 8006cec:	627a      	str	r2, [r7, #36]	; 0x24
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4b47      	ldr	r3, [pc, #284]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cf8:	fb03 f201 	mul.w	r2, r3, r1
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	fb00 f303 	mul.w	r3, r0, r3
 8006d02:	4413      	add	r3, r2
 8006d04:	4a43      	ldr	r2, [pc, #268]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d06:	fba0 1202 	umull	r1, r2, r0, r2
 8006d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d0c:	460a      	mov	r2, r1
 8006d0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d12:	4413      	add	r3, r2
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d18:	2200      	movs	r2, #0
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	61fa      	str	r2, [r7, #28]
 8006d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d26:	f7f9 ff0b 	bl	8000b40 <__aeabi_uldivmod>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4613      	mov	r3, r2
 8006d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d32:	e053      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d34:	4b35      	ldr	r3, [pc, #212]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	099b      	lsrs	r3, r3, #6
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	617a      	str	r2, [r7, #20]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d46:	f04f 0b00 	mov.w	fp, #0
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	465b      	mov	r3, fp
 8006d4e:	f04f 0000 	mov.w	r0, #0
 8006d52:	f04f 0100 	mov.w	r1, #0
 8006d56:	0159      	lsls	r1, r3, #5
 8006d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d5c:	0150      	lsls	r0, r2, #5
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	ebb2 080a 	subs.w	r8, r2, sl
 8006d66:	eb63 090b 	sbc.w	r9, r3, fp
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8006d82:	eb63 0509 	sbc.w	r5, r3, r9
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	00eb      	lsls	r3, r5, #3
 8006d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d94:	00e2      	lsls	r2, r4, #3
 8006d96:	4614      	mov	r4, r2
 8006d98:	461d      	mov	r5, r3
 8006d9a:	eb14 030a 	adds.w	r3, r4, sl
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	eb45 030b 	adc.w	r3, r5, fp
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006db2:	4629      	mov	r1, r5
 8006db4:	028b      	lsls	r3, r1, #10
 8006db6:	4621      	mov	r1, r4
 8006db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	028a      	lsls	r2, r1, #10
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
 8006dca:	60fa      	str	r2, [r7, #12]
 8006dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dd0:	f7f9 feb6 	bl	8000b40 <__aeabi_uldivmod>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4613      	mov	r3, r2
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	3301      	adds	r3, #1
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006df6:	e002      	b.n	8006dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3740      	adds	r7, #64	; 0x40
 8006e04:	46bd      	mov	sp, r7
 8006e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	00f42400 	.word	0x00f42400
 8006e14:	017d7840 	.word	0x017d7840

08006e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000008 	.word	0x20000008

08006e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e34:	f7ff fff0 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	0a9b      	lsrs	r3, r3, #10
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	4903      	ldr	r1, [pc, #12]	; (8006e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40023800 	.word	0x40023800
 8006e54:	0800a5a4 	.word	0x0800a5a4

08006e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e5c:	f7ff ffdc 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	0b5b      	lsrs	r3, r3, #13
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	4903      	ldr	r1, [pc, #12]	; (8006e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e6e:	5ccb      	ldrb	r3, [r1, r3]
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	0800a5a4 	.word	0x0800a5a4

08006e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e041      	b.n	8006f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fd fcf8 	bl	800489c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f000 fcca 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d001      	beq.n	8006f38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e046      	b.n	8006fc6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a23      	ldr	r2, [pc, #140]	; (8006fd4 <HAL_TIM_Base_Start+0xb4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d022      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d01d      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <HAL_TIM_Base_Start+0xb8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d018      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1e      	ldr	r2, [pc, #120]	; (8006fdc <HAL_TIM_Base_Start+0xbc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d013      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_TIM_Base_Start+0xc0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00e      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1b      	ldr	r2, [pc, #108]	; (8006fe4 <HAL_TIM_Base_Start+0xc4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d009      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <HAL_TIM_Base_Start+0xc8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d004      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a18      	ldr	r2, [pc, #96]	; (8006fec <HAL_TIM_Base_Start+0xcc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d111      	bne.n	8006fb4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b06      	cmp	r3, #6
 8006fa0:	d010      	beq.n	8006fc4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0201 	orr.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb2:	e007      	b.n	8006fc4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40010400 	.word	0x40010400
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40001800 	.word	0x40001800

08006ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	d001      	beq.n	8007008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e04e      	b.n	80070a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a23      	ldr	r2, [pc, #140]	; (80070b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d022      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x80>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007032:	d01d      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x80>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1f      	ldr	r2, [pc, #124]	; (80070b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d018      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x80>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <HAL_TIM_Base_Start_IT+0xcc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d013      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x80>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1c      	ldr	r2, [pc, #112]	; (80070c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00e      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x80>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1b      	ldr	r2, [pc, #108]	; (80070c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d009      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x80>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d004      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x80>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a18      	ldr	r2, [pc, #96]	; (80070cc <HAL_TIM_Base_Start_IT+0xdc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d111      	bne.n	8007094 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b06      	cmp	r3, #6
 8007080:	d010      	beq.n	80070a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007092:	e007      	b.n	80070a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40010000 	.word	0x40010000
 80070b8:	40000400 	.word	0x40000400
 80070bc:	40000800 	.word	0x40000800
 80070c0:	40000c00 	.word	0x40000c00
 80070c4:	40010400 	.word	0x40010400
 80070c8:	40014000 	.word	0x40014000
 80070cc:	40001800 	.word	0x40001800

080070d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e041      	b.n	8007166 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f839 	bl	800716e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f000 fba2 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <HAL_TIM_PWM_Start+0x24>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e022      	b.n	80071ee <HAL_TIM_PWM_Start+0x6a>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d109      	bne.n	80071c2 <HAL_TIM_PWM_Start+0x3e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	bf14      	ite	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	2300      	moveq	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	e015      	b.n	80071ee <HAL_TIM_PWM_Start+0x6a>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d109      	bne.n	80071dc <HAL_TIM_PWM_Start+0x58>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	bf14      	ite	ne
 80071d4:	2301      	movne	r3, #1
 80071d6:	2300      	moveq	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	e008      	b.n	80071ee <HAL_TIM_PWM_Start+0x6a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	bf14      	ite	ne
 80071e8:	2301      	movne	r3, #1
 80071ea:	2300      	moveq	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e07c      	b.n	80072f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Start+0x82>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007204:	e013      	b.n	800722e <HAL_TIM_PWM_Start+0xaa>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Start+0x92>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007214:	e00b      	b.n	800722e <HAL_TIM_PWM_Start+0xaa>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b08      	cmp	r3, #8
 800721a:	d104      	bne.n	8007226 <HAL_TIM_PWM_Start+0xa2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007224:	e003      	b.n	800722e <HAL_TIM_PWM_Start+0xaa>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2201      	movs	r2, #1
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fe04 	bl	8007e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a2d      	ldr	r2, [pc, #180]	; (80072f8 <HAL_TIM_PWM_Start+0x174>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_TIM_PWM_Start+0xcc>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a2c      	ldr	r2, [pc, #176]	; (80072fc <HAL_TIM_PWM_Start+0x178>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d101      	bne.n	8007254 <HAL_TIM_PWM_Start+0xd0>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <HAL_TIM_PWM_Start+0xd2>
 8007254:	2300      	movs	r3, #0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <HAL_TIM_PWM_Start+0x174>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d022      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727c:	d01d      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <HAL_TIM_PWM_Start+0x17c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d018      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_TIM_PWM_Start+0x180>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1c      	ldr	r2, [pc, #112]	; (8007308 <HAL_TIM_PWM_Start+0x184>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00e      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a16      	ldr	r2, [pc, #88]	; (80072fc <HAL_TIM_PWM_Start+0x178>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d009      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a18      	ldr	r2, [pc, #96]	; (800730c <HAL_TIM_PWM_Start+0x188>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_TIM_PWM_Start+0x136>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a16      	ldr	r2, [pc, #88]	; (8007310 <HAL_TIM_PWM_Start+0x18c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d111      	bne.n	80072de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b06      	cmp	r3, #6
 80072ca:	d010      	beq.n	80072ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	e007      	b.n	80072ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0201 	orr.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40010400 	.word	0x40010400
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40014000 	.word	0x40014000
 8007310:	40001800 	.word	0x40001800

08007314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d020      	beq.n	8007378 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01b      	beq.n	8007378 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0202 	mvn.w	r2, #2
 8007348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa5b 	bl	800781a <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa4d 	bl	8007806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fa5e 	bl	800782e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d020      	beq.n	80073c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01b      	beq.n	80073c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0204 	mvn.w	r2, #4
 8007394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2202      	movs	r2, #2
 800739a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fa35 	bl	800781a <HAL_TIM_IC_CaptureCallback>
 80073b0:	e005      	b.n	80073be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fa27 	bl	8007806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fa38 	bl	800782e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d020      	beq.n	8007410 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01b      	beq.n	8007410 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0208 	mvn.w	r2, #8
 80073e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2204      	movs	r2, #4
 80073e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa0f 	bl	800781a <HAL_TIM_IC_CaptureCallback>
 80073fc:	e005      	b.n	800740a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa01 	bl	8007806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fa12 	bl	800782e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b00      	cmp	r3, #0
 8007418:	d020      	beq.n	800745c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01b      	beq.n	800745c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0210 	mvn.w	r2, #16
 800742c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2208      	movs	r2, #8
 8007432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f9e9 	bl	800781a <HAL_TIM_IC_CaptureCallback>
 8007448:	e005      	b.n	8007456 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9db 	bl	8007806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f9ec 	bl	800782e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00c      	beq.n	8007480 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d007      	beq.n	8007480 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0201 	mvn.w	r2, #1
 8007478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7f9 fef6 	bl	800126c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00c      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800749c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fd7c 	bl	8007f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00c      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f9bd 	bl	8007842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0220 	mvn.w	r2, #32
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fd4e 	bl	8007f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800750e:	2302      	movs	r3, #2
 8007510:	e0ae      	b.n	8007670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b0c      	cmp	r3, #12
 800751e:	f200 809f 	bhi.w	8007660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	0800755d 	.word	0x0800755d
 800752c:	08007661 	.word	0x08007661
 8007530:	08007661 	.word	0x08007661
 8007534:	08007661 	.word	0x08007661
 8007538:	0800759d 	.word	0x0800759d
 800753c:	08007661 	.word	0x08007661
 8007540:	08007661 	.word	0x08007661
 8007544:	08007661 	.word	0x08007661
 8007548:	080075df 	.word	0x080075df
 800754c:	08007661 	.word	0x08007661
 8007550:	08007661 	.word	0x08007661
 8007554:	08007661 	.word	0x08007661
 8007558:	0800761f 	.word	0x0800761f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fa24 	bl	80079b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0208 	orr.w	r2, r2, #8
 8007576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0204 	bic.w	r2, r2, #4
 8007586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6999      	ldr	r1, [r3, #24]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	619a      	str	r2, [r3, #24]
      break;
 800759a:	e064      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fa74 	bl	8007a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6999      	ldr	r1, [r3, #24]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	021a      	lsls	r2, r3, #8
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	619a      	str	r2, [r3, #24]
      break;
 80075dc:	e043      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fac9 	bl	8007b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0208 	orr.w	r2, r2, #8
 80075f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0204 	bic.w	r2, r2, #4
 8007608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69d9      	ldr	r1, [r3, #28]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	61da      	str	r2, [r3, #28]
      break;
 800761c:	e023      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fb1d 	bl	8007c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69d9      	ldr	r1, [r3, #28]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	021a      	lsls	r2, r3, #8
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	61da      	str	r2, [r3, #28]
      break;
 800765e:	e002      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	75fb      	strb	r3, [r7, #23]
      break;
 8007664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800766e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_TIM_ConfigClockSource+0x1c>
 8007690:	2302      	movs	r3, #2
 8007692:	e0b4      	b.n	80077fe <HAL_TIM_ConfigClockSource+0x186>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076cc:	d03e      	beq.n	800774c <HAL_TIM_ConfigClockSource+0xd4>
 80076ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d2:	f200 8087 	bhi.w	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076da:	f000 8086 	beq.w	80077ea <HAL_TIM_ConfigClockSource+0x172>
 80076de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e2:	d87f      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076e4:	2b70      	cmp	r3, #112	; 0x70
 80076e6:	d01a      	beq.n	800771e <HAL_TIM_ConfigClockSource+0xa6>
 80076e8:	2b70      	cmp	r3, #112	; 0x70
 80076ea:	d87b      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076ec:	2b60      	cmp	r3, #96	; 0x60
 80076ee:	d050      	beq.n	8007792 <HAL_TIM_ConfigClockSource+0x11a>
 80076f0:	2b60      	cmp	r3, #96	; 0x60
 80076f2:	d877      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076f4:	2b50      	cmp	r3, #80	; 0x50
 80076f6:	d03c      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0xfa>
 80076f8:	2b50      	cmp	r3, #80	; 0x50
 80076fa:	d873      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 80076fc:	2b40      	cmp	r3, #64	; 0x40
 80076fe:	d058      	beq.n	80077b2 <HAL_TIM_ConfigClockSource+0x13a>
 8007700:	2b40      	cmp	r3, #64	; 0x40
 8007702:	d86f      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007704:	2b30      	cmp	r3, #48	; 0x30
 8007706:	d064      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007708:	2b30      	cmp	r3, #48	; 0x30
 800770a:	d86b      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 800770c:	2b20      	cmp	r3, #32
 800770e:	d060      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007710:	2b20      	cmp	r3, #32
 8007712:	d867      	bhi.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007714:	2b00      	cmp	r3, #0
 8007716:	d05c      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007718:	2b10      	cmp	r3, #16
 800771a:	d05a      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x15a>
 800771c:	e062      	b.n	80077e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800772e:	f000 fb69 	bl	8007e04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	609a      	str	r2, [r3, #8]
      break;
 800774a:	e04f      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800775c:	f000 fb52 	bl	8007e04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800776e:	609a      	str	r2, [r3, #8]
      break;
 8007770:	e03c      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800777e:	461a      	mov	r2, r3
 8007780:	f000 fac6 	bl	8007d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2150      	movs	r1, #80	; 0x50
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fb1f 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 8007790:	e02c      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800779e:	461a      	mov	r2, r3
 80077a0:	f000 fae5 	bl	8007d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2160      	movs	r1, #96	; 0x60
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fb0f 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80077b0:	e01c      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077be:	461a      	mov	r2, r3
 80077c0:	f000 faa6 	bl	8007d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2140      	movs	r1, #64	; 0x40
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 faff 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80077d0:	e00c      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f000 faf6 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80077e2:	e003      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
      break;
 80077e8:	e000      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
	...

08007858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a46      	ldr	r2, [pc, #280]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d013      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d00f      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a43      	ldr	r2, [pc, #268]	; (8007988 <TIM_Base_SetConfig+0x130>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00b      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a42      	ldr	r2, [pc, #264]	; (800798c <TIM_Base_SetConfig+0x134>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d007      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a41      	ldr	r2, [pc, #260]	; (8007990 <TIM_Base_SetConfig+0x138>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a40      	ldr	r2, [pc, #256]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d108      	bne.n	80078aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a35      	ldr	r2, [pc, #212]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d02b      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b8:	d027      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a32      	ldr	r2, [pc, #200]	; (8007988 <TIM_Base_SetConfig+0x130>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d023      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a31      	ldr	r2, [pc, #196]	; (800798c <TIM_Base_SetConfig+0x134>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d01f      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a30      	ldr	r2, [pc, #192]	; (8007990 <TIM_Base_SetConfig+0x138>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01b      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2f      	ldr	r2, [pc, #188]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d017      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2e      	ldr	r2, [pc, #184]	; (8007998 <TIM_Base_SetConfig+0x140>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2d      	ldr	r2, [pc, #180]	; (800799c <TIM_Base_SetConfig+0x144>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00f      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2c      	ldr	r2, [pc, #176]	; (80079a0 <TIM_Base_SetConfig+0x148>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00b      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2b      	ldr	r2, [pc, #172]	; (80079a4 <TIM_Base_SetConfig+0x14c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2a      	ldr	r2, [pc, #168]	; (80079a8 <TIM_Base_SetConfig+0x150>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a29      	ldr	r2, [pc, #164]	; (80079ac <TIM_Base_SetConfig+0x154>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d108      	bne.n	800791c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a10      	ldr	r2, [pc, #64]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_Base_SetConfig+0xf8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a12      	ldr	r2, [pc, #72]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d103      	bne.n	8007958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b01      	cmp	r3, #1
 8007968:	d105      	bne.n	8007976 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f023 0201 	bic.w	r2, r3, #1
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	611a      	str	r2, [r3, #16]
  }
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40010000 	.word	0x40010000
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40010400 	.word	0x40010400
 8007998:	40014000 	.word	0x40014000
 800799c:	40014400 	.word	0x40014400
 80079a0:	40014800 	.word	0x40014800
 80079a4:	40001800 	.word	0x40001800
 80079a8:	40001c00 	.word	0x40001c00
 80079ac:	40002000 	.word	0x40002000

080079b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	f023 0201 	bic.w	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0303 	bic.w	r3, r3, #3
 80079e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f023 0302 	bic.w	r3, r3, #2
 80079f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a20      	ldr	r2, [pc, #128]	; (8007a88 <TIM_OC1_SetConfig+0xd8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC1_SetConfig+0x64>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <TIM_OC1_SetConfig+0xdc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d10c      	bne.n	8007a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f023 0308 	bic.w	r3, r3, #8
 8007a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f023 0304 	bic.w	r3, r3, #4
 8007a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a15      	ldr	r2, [pc, #84]	; (8007a88 <TIM_OC1_SetConfig+0xd8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d003      	beq.n	8007a3e <TIM_OC1_SetConfig+0x8e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a14      	ldr	r2, [pc, #80]	; (8007a8c <TIM_OC1_SetConfig+0xdc>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d111      	bne.n	8007a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	621a      	str	r2, [r3, #32]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40010000 	.word	0x40010000
 8007a8c:	40010400 	.word	0x40010400

08007a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	f023 0210 	bic.w	r2, r3, #16
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 0320 	bic.w	r3, r3, #32
 8007ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	011b      	lsls	r3, r3, #4
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a22      	ldr	r2, [pc, #136]	; (8007b74 <TIM_OC2_SetConfig+0xe4>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d003      	beq.n	8007af8 <TIM_OC2_SetConfig+0x68>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a21      	ldr	r2, [pc, #132]	; (8007b78 <TIM_OC2_SetConfig+0xe8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d10d      	bne.n	8007b14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a17      	ldr	r2, [pc, #92]	; (8007b74 <TIM_OC2_SetConfig+0xe4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d003      	beq.n	8007b24 <TIM_OC2_SetConfig+0x94>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a16      	ldr	r2, [pc, #88]	; (8007b78 <TIM_OC2_SetConfig+0xe8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d113      	bne.n	8007b4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	621a      	str	r2, [r3, #32]
}
 8007b66:	bf00      	nop
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40010400 	.word	0x40010400

08007b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a21      	ldr	r2, [pc, #132]	; (8007c5c <TIM_OC3_SetConfig+0xe0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d003      	beq.n	8007be2 <TIM_OC3_SetConfig+0x66>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a20      	ldr	r2, [pc, #128]	; (8007c60 <TIM_OC3_SetConfig+0xe4>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d10d      	bne.n	8007bfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a16      	ldr	r2, [pc, #88]	; (8007c5c <TIM_OC3_SetConfig+0xe0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d003      	beq.n	8007c0e <TIM_OC3_SetConfig+0x92>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a15      	ldr	r2, [pc, #84]	; (8007c60 <TIM_OC3_SetConfig+0xe4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d113      	bne.n	8007c36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	621a      	str	r2, [r3, #32]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	40010000 	.word	0x40010000
 8007c60:	40010400 	.word	0x40010400

08007c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	031b      	lsls	r3, r3, #12
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a12      	ldr	r2, [pc, #72]	; (8007d08 <TIM_OC4_SetConfig+0xa4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d003      	beq.n	8007ccc <TIM_OC4_SetConfig+0x68>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a11      	ldr	r2, [pc, #68]	; (8007d0c <TIM_OC4_SetConfig+0xa8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d109      	bne.n	8007ce0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	019b      	lsls	r3, r3, #6
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40010400 	.word	0x40010400

08007d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f023 0201 	bic.w	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 030a 	bic.w	r3, r3, #10
 8007d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	621a      	str	r2, [r3, #32]
}
 8007d62:	bf00      	nop
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b087      	sub	sp, #28
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f023 0210 	bic.w	r2, r3, #16
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	031b      	lsls	r3, r3, #12
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007daa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	621a      	str	r2, [r3, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f043 0307 	orr.w	r3, r3, #7
 8007df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	021a      	lsls	r2, r3, #8
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	609a      	str	r2, [r3, #8]
}
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 031f 	and.w	r3, r3, #31
 8007e56:	2201      	movs	r2, #1
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	401a      	ands	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1a      	ldr	r2, [r3, #32]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e05a      	b.n	8007f5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a21      	ldr	r2, [pc, #132]	; (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d022      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef4:	d01d      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1d      	ldr	r2, [pc, #116]	; (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d018      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1b      	ldr	r2, [pc, #108]	; (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d013      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1a      	ldr	r2, [pc, #104]	; (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00e      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d009      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a17      	ldr	r2, [pc, #92]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d004      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d10c      	bne.n	8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40000800 	.word	0x40000800
 8007f78:	40000c00 	.word	0x40000c00
 8007f7c:	40010400 	.word	0x40010400
 8007f80:	40014000 	.word	0x40014000
 8007f84:	40001800 	.word	0x40001800

08007f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e042      	b.n	8008048 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fc fd22 	bl	8004a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2224      	movs	r2, #36	; 0x24
 8007fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fdf3 	bl	8008be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	691a      	ldr	r2, [r3, #16]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695a      	ldr	r2, [r3, #20]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2220      	movs	r2, #32
 800803c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08a      	sub	sp, #40	; 0x28
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	4613      	mov	r3, r2
 800805e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b20      	cmp	r3, #32
 800806e:	d175      	bne.n	800815c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <HAL_UART_Transmit+0x2c>
 8008076:	88fb      	ldrh	r3, [r7, #6]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e06e      	b.n	800815e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2221      	movs	r2, #33	; 0x21
 800808a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800808e:	f7fc fee9 	bl	8004e64 <HAL_GetTick>
 8008092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	88fa      	ldrh	r2, [r7, #6]
 8008098:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	88fa      	ldrh	r2, [r7, #6]
 800809e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a8:	d108      	bne.n	80080bc <HAL_UART_Transmit+0x6c>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d104      	bne.n	80080bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	e003      	b.n	80080c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080c4:	e02e      	b.n	8008124 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2200      	movs	r2, #0
 80080ce:	2180      	movs	r1, #128	; 0x80
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fb55 	bl	8008780 <UART_WaitOnFlagUntilTimeout>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d005      	beq.n	80080e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e03a      	b.n	800815e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10b      	bne.n	8008106 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	3302      	adds	r3, #2
 8008102:	61bb      	str	r3, [r7, #24]
 8008104:	e007      	b.n	8008116 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	3301      	adds	r3, #1
 8008114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800811a:	b29b      	uxth	r3, r3
 800811c:	3b01      	subs	r3, #1
 800811e:	b29a      	uxth	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1cb      	bne.n	80080c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2200      	movs	r2, #0
 8008136:	2140      	movs	r1, #64	; 0x40
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 fb21 	bl	8008780 <UART_WaitOnFlagUntilTimeout>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d005      	beq.n	8008150 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e006      	b.n	800815e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2220      	movs	r2, #32
 8008154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	e000      	b.n	800815e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800815c:	2302      	movs	r3, #2
  }
}
 800815e:	4618      	mov	r0, r3
 8008160:	3720      	adds	r7, #32
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	4613      	mov	r3, r2
 8008172:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b20      	cmp	r3, #32
 800817e:	d121      	bne.n	80081c4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <HAL_UART_Transmit_IT+0x26>
 8008186:	88fb      	ldrh	r3, [r7, #6]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e01a      	b.n	80081c6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	88fa      	ldrh	r2, [r7, #6]
 800819a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	88fa      	ldrh	r2, [r7, #6]
 80081a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2221      	movs	r2, #33	; 0x21
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081be:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	e000      	b.n	80081c6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80081c4:	2302      	movs	r3, #2
  }
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	4613      	mov	r3, r2
 80081de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d112      	bne.n	8008212 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <HAL_UART_Receive_IT+0x26>
 80081f2:	88fb      	ldrh	r3, [r7, #6]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e00b      	b.n	8008214 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	461a      	mov	r2, r3
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 fb12 	bl	8008832 <UART_Start_Receive_IT>
 800820e:	4603      	mov	r3, r0
 8008210:	e000      	b.n	8008214 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008212:	2302      	movs	r3, #2
  }
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b0ba      	sub	sp, #232	; 0xe8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008242:	2300      	movs	r3, #0
 8008244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008248:	2300      	movs	r3, #0
 800824a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800824e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800825a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10f      	bne.n	8008282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <HAL_UART_IRQHandler+0x66>
 800826e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fbf2 	bl	8008a64 <UART_Receive_IT>
      return;
 8008280:	e25b      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 80de 	beq.w	8008448 <HAL_UART_IRQHandler+0x22c>
 800828c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800829c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 80d1 	beq.w	8008448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <HAL_UART_IRQHandler+0xae>
 80082b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c2:	f043 0201 	orr.w	r2, r3, #1
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00b      	beq.n	80082ee <HAL_UART_IRQHandler+0xd2>
 80082d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e6:	f043 0202 	orr.w	r2, r3, #2
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00b      	beq.n	8008312 <HAL_UART_IRQHandler+0xf6>
 80082fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830a:	f043 0204 	orr.w	r2, r3, #4
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008316:	f003 0308 	and.w	r3, r3, #8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d011      	beq.n	8008342 <HAL_UART_IRQHandler+0x126>
 800831e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b00      	cmp	r3, #0
 8008328:	d105      	bne.n	8008336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800832a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833a:	f043 0208 	orr.w	r2, r3, #8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 81f2 	beq.w	8008730 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800834c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d008      	beq.n	800836a <HAL_UART_IRQHandler+0x14e>
 8008358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fb7d 	bl	8008a64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008374:	2b40      	cmp	r3, #64	; 0x40
 8008376:	bf0c      	ite	eq
 8008378:	2301      	moveq	r3, #1
 800837a:	2300      	movne	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <HAL_UART_IRQHandler+0x17a>
 800838e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008392:	2b00      	cmp	r3, #0
 8008394:	d04f      	beq.n	8008436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa85 	bl	80088a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a6:	2b40      	cmp	r3, #64	; 0x40
 80083a8:	d141      	bne.n	800842e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3314      	adds	r3, #20
 80083b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3314      	adds	r3, #20
 80083d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1d9      	bne.n	80083aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d013      	beq.n	8008426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008402:	4a7e      	ldr	r2, [pc, #504]	; (80085fc <HAL_UART_IRQHandler+0x3e0>)
 8008404:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840a:	4618      	mov	r0, r3
 800840c:	f7fc fedb 	bl	80051c6 <HAL_DMA_Abort_IT>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d016      	beq.n	8008444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008420:	4610      	mov	r0, r2
 8008422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008424:	e00e      	b.n	8008444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f994 	bl	8008754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800842c:	e00a      	b.n	8008444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f990 	bl	8008754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008434:	e006      	b.n	8008444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f98c 	bl	8008754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008442:	e175      	b.n	8008730 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008444:	bf00      	nop
    return;
 8008446:	e173      	b.n	8008730 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844c:	2b01      	cmp	r3, #1
 800844e:	f040 814f 	bne.w	80086f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008456:	f003 0310 	and.w	r3, r3, #16
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 8148 	beq.w	80086f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 8141 	beq.w	80086f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800846e:	2300      	movs	r3, #0
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60bb      	str	r3, [r7, #8]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	60bb      	str	r3, [r7, #8]
 8008482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848e:	2b40      	cmp	r3, #64	; 0x40
 8008490:	f040 80b6 	bne.w	8008600 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8145 	beq.w	8008734 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084b2:	429a      	cmp	r2, r3
 80084b4:	f080 813e 	bcs.w	8008734 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ca:	f000 8088 	beq.w	80085de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	330c      	adds	r3, #12
 80084d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	330c      	adds	r3, #12
 80084f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008506:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1d9      	bne.n	80084ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3314      	adds	r3, #20
 8008520:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800852a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800852c:	f023 0301 	bic.w	r3, r3, #1
 8008530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3314      	adds	r3, #20
 800853a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800853e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008542:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008546:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e1      	bne.n	800851a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3314      	adds	r3, #20
 800855c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800856c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3314      	adds	r3, #20
 8008576:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800857a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800857c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008580:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e3      	bne.n	8008556 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ae:	f023 0310 	bic.w	r3, r3, #16
 80085b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	330c      	adds	r3, #12
 80085bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80085c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80085c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e3      	bne.n	800859c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fc fd84 	bl	80050e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f8b7 	bl	8008768 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085fa:	e09b      	b.n	8008734 <HAL_UART_IRQHandler+0x518>
 80085fc:	0800896d 	.word	0x0800896d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008608:	b29b      	uxth	r3, r3
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 808e 	beq.w	8008738 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800861c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 8089 	beq.w	8008738 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	330c      	adds	r3, #12
 800862c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800863c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	330c      	adds	r3, #12
 8008646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800864a:	647a      	str	r2, [r7, #68]	; 0x44
 800864c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e3      	bne.n	8008626 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3314      	adds	r3, #20
 8008664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	623b      	str	r3, [r7, #32]
   return(result);
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3314      	adds	r3, #20
 800867e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008682:	633a      	str	r2, [r7, #48]	; 0x30
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e3      	bne.n	800865e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	330c      	adds	r3, #12
 80086aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	e853 3f00 	ldrex	r3, [r3]
 80086b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0310 	bic.w	r3, r3, #16
 80086ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80086c8:	61fa      	str	r2, [r7, #28]
 80086ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	69b9      	ldr	r1, [r7, #24]
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	617b      	str	r3, [r7, #20]
   return(result);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e3      	bne.n	80086a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2202      	movs	r2, #2
 80086e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f83d 	bl	8008768 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086ee:	e023      	b.n	8008738 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <HAL_UART_IRQHandler+0x4f4>
 80086fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f943 	bl	8008994 <UART_Transmit_IT>
    return;
 800870e:	e014      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00e      	beq.n	800873a <HAL_UART_IRQHandler+0x51e>
 800871c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	d008      	beq.n	800873a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f983 	bl	8008a34 <UART_EndTransmit_IT>
    return;
 800872e:	e004      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
    return;
 8008730:	bf00      	nop
 8008732:	e002      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
      return;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
      return;
 8008738:	bf00      	nop
  }
}
 800873a:	37e8      	adds	r7, #232	; 0xe8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	4613      	mov	r3, r2
 800878e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008790:	e03b      	b.n	800880a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d037      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800879a:	f7fc fb63 	bl	8004e64 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	6a3a      	ldr	r2, [r7, #32]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d302      	bcc.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e03a      	b.n	800882a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	f003 0304 	and.w	r3, r3, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d023      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0x8a>
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b80      	cmp	r3, #128	; 0x80
 80087c6:	d020      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0x8a>
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2b40      	cmp	r3, #64	; 0x40
 80087cc:	d01d      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0308 	and.w	r3, r3, #8
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d116      	bne.n	800880a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 f857 	bl	80088a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2208      	movs	r2, #8
 80087fc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e00f      	b.n	800882a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4013      	ands	r3, r2
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	429a      	cmp	r2, r3
 8008818:	bf0c      	ite	eq
 800881a:	2301      	moveq	r3, #1
 800881c:	2300      	movne	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	461a      	mov	r2, r3
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	429a      	cmp	r2, r3
 8008826:	d0b4      	beq.n	8008792 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	4613      	mov	r3, r2
 800883e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	88fa      	ldrh	r2, [r7, #6]
 800884a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	88fa      	ldrh	r2, [r7, #6]
 8008850:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2222      	movs	r2, #34	; 0x22
 800885c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008876:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695a      	ldr	r2, [r3, #20]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0201 	orr.w	r2, r2, #1
 8008886:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0220 	orr.w	r2, r2, #32
 8008896:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b095      	sub	sp, #84	; 0x54
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	330c      	adds	r3, #12
 80088b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	330c      	adds	r3, #12
 80088cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088ce:	643a      	str	r2, [r7, #64]	; 0x40
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e5      	bne.n	80088ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3314      	adds	r3, #20
 80088e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3314      	adds	r3, #20
 8008900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e5      	bne.n	80088e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	2b01      	cmp	r3, #1
 800891c:	d119      	bne.n	8008952 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	330c      	adds	r3, #12
 8008924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	60bb      	str	r3, [r7, #8]
   return(result);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f023 0310 	bic.w	r3, r3, #16
 8008934:	647b      	str	r3, [r7, #68]	; 0x44
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	330c      	adds	r3, #12
 800893c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800893e:	61ba      	str	r2, [r7, #24]
 8008940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6979      	ldr	r1, [r7, #20]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	613b      	str	r3, [r7, #16]
   return(result);
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e5      	bne.n	800891e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008960:	bf00      	nop
 8008962:	3754      	adds	r7, #84	; 0x54
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff fee4 	bl	8008754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800898c:	bf00      	nop
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b21      	cmp	r3, #33	; 0x21
 80089a6:	d13e      	bne.n	8008a26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b0:	d114      	bne.n	80089dc <UART_Transmit_IT+0x48>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d110      	bne.n	80089dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	461a      	mov	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	1c9a      	adds	r2, r3, #2
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	621a      	str	r2, [r3, #32]
 80089da:	e008      	b.n	80089ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	1c59      	adds	r1, r3, #1
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6211      	str	r1, [r2, #32]
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	3b01      	subs	r3, #1
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	4619      	mov	r1, r3
 80089fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10f      	bne.n	8008a22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	e000      	b.n	8008a28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a26:	2302      	movs	r3, #2
  }
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff fe73 	bl	8008740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	; 0x30
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b22      	cmp	r3, #34	; 0x22
 8008a76:	f040 80ae 	bne.w	8008bd6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a82:	d117      	bne.n	8008ab4 <UART_Receive_IT+0x50>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d113      	bne.n	8008ab4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	1c9a      	adds	r2, r3, #2
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8008ab2:	e026      	b.n	8008b02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac6:	d007      	beq.n	8008ad8 <UART_Receive_IT+0x74>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <UART_Receive_IT+0x82>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	e008      	b.n	8008af8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d15d      	bne.n	8008bd2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 0220 	bic.w	r2, r2, #32
 8008b24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68da      	ldr	r2, [r3, #12]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695a      	ldr	r2, [r3, #20]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0201 	bic.w	r2, r2, #1
 8008b44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d135      	bne.n	8008bc8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	330c      	adds	r3, #12
 8008b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	613b      	str	r3, [r7, #16]
   return(result);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f023 0310 	bic.w	r3, r3, #16
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	330c      	adds	r3, #12
 8008b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b82:	623a      	str	r2, [r7, #32]
 8008b84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	69f9      	ldr	r1, [r7, #28]
 8008b88:	6a3a      	ldr	r2, [r7, #32]
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e5      	bne.n	8008b62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0310 	and.w	r3, r3, #16
 8008ba0:	2b10      	cmp	r3, #16
 8008ba2:	d10a      	bne.n	8008bba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff fdd1 	bl	8008768 <HAL_UARTEx_RxEventCallback>
 8008bc6:	e002      	b.n	8008bce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7f8 fae1 	bl	8001190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e002      	b.n	8008bd8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e000      	b.n	8008bd8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008bd6:	2302      	movs	r3, #2
  }
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3730      	adds	r7, #48	; 0x30
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008be4:	b0c0      	sub	sp, #256	; 0x100
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfc:	68d9      	ldr	r1, [r3, #12]
 8008bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	ea40 0301 	orr.w	r3, r0, r1
 8008c08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	431a      	orrs	r2, r3
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c38:	f021 010c 	bic.w	r1, r1, #12
 8008c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c46:	430b      	orrs	r3, r1
 8008c48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5a:	6999      	ldr	r1, [r3, #24]
 8008c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	ea40 0301 	orr.w	r3, r0, r1
 8008c66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	4b8f      	ldr	r3, [pc, #572]	; (8008eac <UART_SetConfig+0x2cc>)
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d005      	beq.n	8008c80 <UART_SetConfig+0xa0>
 8008c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	4b8d      	ldr	r3, [pc, #564]	; (8008eb0 <UART_SetConfig+0x2d0>)
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d104      	bne.n	8008c8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c80:	f7fe f8ea 	bl	8006e58 <HAL_RCC_GetPCLK2Freq>
 8008c84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c88:	e003      	b.n	8008c92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c8a:	f7fe f8d1 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8008c8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c9c:	f040 810c 	bne.w	8008eb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008caa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	1891      	adds	r1, r2, r2
 8008cb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cba:	415b      	adcs	r3, r3
 8008cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	eb12 0801 	adds.w	r8, r2, r1
 8008cc8:	4629      	mov	r1, r5
 8008cca:	eb43 0901 	adc.w	r9, r3, r1
 8008cce:	f04f 0200 	mov.w	r2, #0
 8008cd2:	f04f 0300 	mov.w	r3, #0
 8008cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ce2:	4690      	mov	r8, r2
 8008ce4:	4699      	mov	r9, r3
 8008ce6:	4623      	mov	r3, r4
 8008ce8:	eb18 0303 	adds.w	r3, r8, r3
 8008cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cf0:	462b      	mov	r3, r5
 8008cf2:	eb49 0303 	adc.w	r3, r9, r3
 8008cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d0e:	460b      	mov	r3, r1
 8008d10:	18db      	adds	r3, r3, r3
 8008d12:	653b      	str	r3, [r7, #80]	; 0x50
 8008d14:	4613      	mov	r3, r2
 8008d16:	eb42 0303 	adc.w	r3, r2, r3
 8008d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8008d1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d24:	f7f7 ff0c 	bl	8000b40 <__aeabi_uldivmod>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4b61      	ldr	r3, [pc, #388]	; (8008eb4 <UART_SetConfig+0x2d4>)
 8008d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008d32:	095b      	lsrs	r3, r3, #5
 8008d34:	011c      	lsls	r4, r3, #4
 8008d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d48:	4642      	mov	r2, r8
 8008d4a:	464b      	mov	r3, r9
 8008d4c:	1891      	adds	r1, r2, r2
 8008d4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d50:	415b      	adcs	r3, r3
 8008d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d58:	4641      	mov	r1, r8
 8008d5a:	eb12 0a01 	adds.w	sl, r2, r1
 8008d5e:	4649      	mov	r1, r9
 8008d60:	eb43 0b01 	adc.w	fp, r3, r1
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	f04f 0300 	mov.w	r3, #0
 8008d6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d78:	4692      	mov	sl, r2
 8008d7a:	469b      	mov	fp, r3
 8008d7c:	4643      	mov	r3, r8
 8008d7e:	eb1a 0303 	adds.w	r3, sl, r3
 8008d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d86:	464b      	mov	r3, r9
 8008d88:	eb4b 0303 	adc.w	r3, fp, r3
 8008d8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008da0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008da4:	460b      	mov	r3, r1
 8008da6:	18db      	adds	r3, r3, r3
 8008da8:	643b      	str	r3, [r7, #64]	; 0x40
 8008daa:	4613      	mov	r3, r2
 8008dac:	eb42 0303 	adc.w	r3, r2, r3
 8008db0:	647b      	str	r3, [r7, #68]	; 0x44
 8008db2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008db6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008dba:	f7f7 fec1 	bl	8000b40 <__aeabi_uldivmod>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4b3b      	ldr	r3, [pc, #236]	; (8008eb4 <UART_SetConfig+0x2d4>)
 8008dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8008dca:	095b      	lsrs	r3, r3, #5
 8008dcc:	2264      	movs	r2, #100	; 0x64
 8008dce:	fb02 f303 	mul.w	r3, r2, r3
 8008dd2:	1acb      	subs	r3, r1, r3
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008dda:	4b36      	ldr	r3, [pc, #216]	; (8008eb4 <UART_SetConfig+0x2d4>)
 8008ddc:	fba3 2302 	umull	r2, r3, r3, r2
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008de8:	441c      	add	r4, r3
 8008dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008df4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008df8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008dfc:	4642      	mov	r2, r8
 8008dfe:	464b      	mov	r3, r9
 8008e00:	1891      	adds	r1, r2, r2
 8008e02:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e04:	415b      	adcs	r3, r3
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e0c:	4641      	mov	r1, r8
 8008e0e:	1851      	adds	r1, r2, r1
 8008e10:	6339      	str	r1, [r7, #48]	; 0x30
 8008e12:	4649      	mov	r1, r9
 8008e14:	414b      	adcs	r3, r1
 8008e16:	637b      	str	r3, [r7, #52]	; 0x34
 8008e18:	f04f 0200 	mov.w	r2, #0
 8008e1c:	f04f 0300 	mov.w	r3, #0
 8008e20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e24:	4659      	mov	r1, fp
 8008e26:	00cb      	lsls	r3, r1, #3
 8008e28:	4651      	mov	r1, sl
 8008e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e2e:	4651      	mov	r1, sl
 8008e30:	00ca      	lsls	r2, r1, #3
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	4603      	mov	r3, r0
 8008e38:	4642      	mov	r2, r8
 8008e3a:	189b      	adds	r3, r3, r2
 8008e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e40:	464b      	mov	r3, r9
 8008e42:	460a      	mov	r2, r1
 8008e44:	eb42 0303 	adc.w	r3, r2, r3
 8008e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e60:	460b      	mov	r3, r1
 8008e62:	18db      	adds	r3, r3, r3
 8008e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e66:	4613      	mov	r3, r2
 8008e68:	eb42 0303 	adc.w	r3, r2, r3
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e76:	f7f7 fe63 	bl	8000b40 <__aeabi_uldivmod>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <UART_SetConfig+0x2d4>)
 8008e80:	fba3 1302 	umull	r1, r3, r3, r2
 8008e84:	095b      	lsrs	r3, r3, #5
 8008e86:	2164      	movs	r1, #100	; 0x64
 8008e88:	fb01 f303 	mul.w	r3, r1, r3
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	3332      	adds	r3, #50	; 0x32
 8008e92:	4a08      	ldr	r2, [pc, #32]	; (8008eb4 <UART_SetConfig+0x2d4>)
 8008e94:	fba2 2303 	umull	r2, r3, r2, r3
 8008e98:	095b      	lsrs	r3, r3, #5
 8008e9a:	f003 0207 	and.w	r2, r3, #7
 8008e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4422      	add	r2, r4
 8008ea6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ea8:	e106      	b.n	80090b8 <UART_SetConfig+0x4d8>
 8008eaa:	bf00      	nop
 8008eac:	40011000 	.word	0x40011000
 8008eb0:	40011400 	.word	0x40011400
 8008eb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ec2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ec6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008eca:	4642      	mov	r2, r8
 8008ecc:	464b      	mov	r3, r9
 8008ece:	1891      	adds	r1, r2, r2
 8008ed0:	6239      	str	r1, [r7, #32]
 8008ed2:	415b      	adcs	r3, r3
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eda:	4641      	mov	r1, r8
 8008edc:	1854      	adds	r4, r2, r1
 8008ede:	4649      	mov	r1, r9
 8008ee0:	eb43 0501 	adc.w	r5, r3, r1
 8008ee4:	f04f 0200 	mov.w	r2, #0
 8008ee8:	f04f 0300 	mov.w	r3, #0
 8008eec:	00eb      	lsls	r3, r5, #3
 8008eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ef2:	00e2      	lsls	r2, r4, #3
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	461d      	mov	r5, r3
 8008ef8:	4643      	mov	r3, r8
 8008efa:	18e3      	adds	r3, r4, r3
 8008efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f00:	464b      	mov	r3, r9
 8008f02:	eb45 0303 	adc.w	r3, r5, r3
 8008f06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f1a:	f04f 0200 	mov.w	r2, #0
 8008f1e:	f04f 0300 	mov.w	r3, #0
 8008f22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f26:	4629      	mov	r1, r5
 8008f28:	008b      	lsls	r3, r1, #2
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f30:	4621      	mov	r1, r4
 8008f32:	008a      	lsls	r2, r1, #2
 8008f34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f38:	f7f7 fe02 	bl	8000b40 <__aeabi_uldivmod>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4b60      	ldr	r3, [pc, #384]	; (80090c4 <UART_SetConfig+0x4e4>)
 8008f42:	fba3 2302 	umull	r2, r3, r3, r2
 8008f46:	095b      	lsrs	r3, r3, #5
 8008f48:	011c      	lsls	r4, r3, #4
 8008f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	1891      	adds	r1, r2, r2
 8008f62:	61b9      	str	r1, [r7, #24]
 8008f64:	415b      	adcs	r3, r3
 8008f66:	61fb      	str	r3, [r7, #28]
 8008f68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f6c:	4641      	mov	r1, r8
 8008f6e:	1851      	adds	r1, r2, r1
 8008f70:	6139      	str	r1, [r7, #16]
 8008f72:	4649      	mov	r1, r9
 8008f74:	414b      	adcs	r3, r1
 8008f76:	617b      	str	r3, [r7, #20]
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f84:	4659      	mov	r1, fp
 8008f86:	00cb      	lsls	r3, r1, #3
 8008f88:	4651      	mov	r1, sl
 8008f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f8e:	4651      	mov	r1, sl
 8008f90:	00ca      	lsls	r2, r1, #3
 8008f92:	4610      	mov	r0, r2
 8008f94:	4619      	mov	r1, r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	4642      	mov	r2, r8
 8008f9a:	189b      	adds	r3, r3, r2
 8008f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	460a      	mov	r2, r1
 8008fa4:	eb42 0303 	adc.w	r3, r2, r3
 8008fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	008b      	lsls	r3, r1, #2
 8008fc8:	4641      	mov	r1, r8
 8008fca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fce:	4641      	mov	r1, r8
 8008fd0:	008a      	lsls	r2, r1, #2
 8008fd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008fd6:	f7f7 fdb3 	bl	8000b40 <__aeabi_uldivmod>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4b38      	ldr	r3, [pc, #224]	; (80090c4 <UART_SetConfig+0x4e4>)
 8008fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8008fe6:	095b      	lsrs	r3, r3, #5
 8008fe8:	2264      	movs	r2, #100	; 0x64
 8008fea:	fb02 f303 	mul.w	r3, r2, r3
 8008fee:	1acb      	subs	r3, r1, r3
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	3332      	adds	r3, #50	; 0x32
 8008ff4:	4a33      	ldr	r2, [pc, #204]	; (80090c4 <UART_SetConfig+0x4e4>)
 8008ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffa:	095b      	lsrs	r3, r3, #5
 8008ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009000:	441c      	add	r4, r3
 8009002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009006:	2200      	movs	r2, #0
 8009008:	673b      	str	r3, [r7, #112]	; 0x70
 800900a:	677a      	str	r2, [r7, #116]	; 0x74
 800900c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009010:	4642      	mov	r2, r8
 8009012:	464b      	mov	r3, r9
 8009014:	1891      	adds	r1, r2, r2
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	415b      	adcs	r3, r3
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009020:	4641      	mov	r1, r8
 8009022:	1851      	adds	r1, r2, r1
 8009024:	6039      	str	r1, [r7, #0]
 8009026:	4649      	mov	r1, r9
 8009028:	414b      	adcs	r3, r1
 800902a:	607b      	str	r3, [r7, #4]
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	f04f 0300 	mov.w	r3, #0
 8009034:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009038:	4659      	mov	r1, fp
 800903a:	00cb      	lsls	r3, r1, #3
 800903c:	4651      	mov	r1, sl
 800903e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009042:	4651      	mov	r1, sl
 8009044:	00ca      	lsls	r2, r1, #3
 8009046:	4610      	mov	r0, r2
 8009048:	4619      	mov	r1, r3
 800904a:	4603      	mov	r3, r0
 800904c:	4642      	mov	r2, r8
 800904e:	189b      	adds	r3, r3, r2
 8009050:	66bb      	str	r3, [r7, #104]	; 0x68
 8009052:	464b      	mov	r3, r9
 8009054:	460a      	mov	r2, r1
 8009056:	eb42 0303 	adc.w	r3, r2, r3
 800905a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800905c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	663b      	str	r3, [r7, #96]	; 0x60
 8009066:	667a      	str	r2, [r7, #100]	; 0x64
 8009068:	f04f 0200 	mov.w	r2, #0
 800906c:	f04f 0300 	mov.w	r3, #0
 8009070:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009074:	4649      	mov	r1, r9
 8009076:	008b      	lsls	r3, r1, #2
 8009078:	4641      	mov	r1, r8
 800907a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800907e:	4641      	mov	r1, r8
 8009080:	008a      	lsls	r2, r1, #2
 8009082:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009086:	f7f7 fd5b 	bl	8000b40 <__aeabi_uldivmod>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <UART_SetConfig+0x4e4>)
 8009090:	fba3 1302 	umull	r1, r3, r3, r2
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	2164      	movs	r1, #100	; 0x64
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	011b      	lsls	r3, r3, #4
 80090a0:	3332      	adds	r3, #50	; 0x32
 80090a2:	4a08      	ldr	r2, [pc, #32]	; (80090c4 <UART_SetConfig+0x4e4>)
 80090a4:	fba2 2303 	umull	r2, r3, r2, r3
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	f003 020f 	and.w	r2, r3, #15
 80090ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4422      	add	r2, r4
 80090b6:	609a      	str	r2, [r3, #8]
}
 80090b8:	bf00      	nop
 80090ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090be:	46bd      	mov	sp, r7
 80090c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090c4:	51eb851f 	.word	0x51eb851f

080090c8 <std>:
 80090c8:	2300      	movs	r3, #0
 80090ca:	b510      	push	{r4, lr}
 80090cc:	4604      	mov	r4, r0
 80090ce:	e9c0 3300 	strd	r3, r3, [r0]
 80090d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090d6:	6083      	str	r3, [r0, #8]
 80090d8:	8181      	strh	r1, [r0, #12]
 80090da:	6643      	str	r3, [r0, #100]	; 0x64
 80090dc:	81c2      	strh	r2, [r0, #14]
 80090de:	6183      	str	r3, [r0, #24]
 80090e0:	4619      	mov	r1, r3
 80090e2:	2208      	movs	r2, #8
 80090e4:	305c      	adds	r0, #92	; 0x5c
 80090e6:	f000 f9e5 	bl	80094b4 <memset>
 80090ea:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <std+0x58>)
 80090ec:	6263      	str	r3, [r4, #36]	; 0x24
 80090ee:	4b0d      	ldr	r3, [pc, #52]	; (8009124 <std+0x5c>)
 80090f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090f2:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <std+0x60>)
 80090f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f6:	4b0d      	ldr	r3, [pc, #52]	; (800912c <std+0x64>)
 80090f8:	6323      	str	r3, [r4, #48]	; 0x30
 80090fa:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <std+0x68>)
 80090fc:	6224      	str	r4, [r4, #32]
 80090fe:	429c      	cmp	r4, r3
 8009100:	d006      	beq.n	8009110 <std+0x48>
 8009102:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009106:	4294      	cmp	r4, r2
 8009108:	d002      	beq.n	8009110 <std+0x48>
 800910a:	33d0      	adds	r3, #208	; 0xd0
 800910c:	429c      	cmp	r4, r3
 800910e:	d105      	bne.n	800911c <std+0x54>
 8009110:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009118:	f000 ba44 	b.w	80095a4 <__retarget_lock_init_recursive>
 800911c:	bd10      	pop	{r4, pc}
 800911e:	bf00      	nop
 8009120:	08009305 	.word	0x08009305
 8009124:	08009327 	.word	0x08009327
 8009128:	0800935f 	.word	0x0800935f
 800912c:	08009383 	.word	0x08009383
 8009130:	200005b8 	.word	0x200005b8

08009134 <stdio_exit_handler>:
 8009134:	4a02      	ldr	r2, [pc, #8]	; (8009140 <stdio_exit_handler+0xc>)
 8009136:	4903      	ldr	r1, [pc, #12]	; (8009144 <stdio_exit_handler+0x10>)
 8009138:	4803      	ldr	r0, [pc, #12]	; (8009148 <stdio_exit_handler+0x14>)
 800913a:	f000 b869 	b.w	8009210 <_fwalk_sglue>
 800913e:	bf00      	nop
 8009140:	20000014 	.word	0x20000014
 8009144:	080098a9 	.word	0x080098a9
 8009148:	20000020 	.word	0x20000020

0800914c <cleanup_stdio>:
 800914c:	6841      	ldr	r1, [r0, #4]
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <cleanup_stdio+0x34>)
 8009150:	4299      	cmp	r1, r3
 8009152:	b510      	push	{r4, lr}
 8009154:	4604      	mov	r4, r0
 8009156:	d001      	beq.n	800915c <cleanup_stdio+0x10>
 8009158:	f000 fba6 	bl	80098a8 <_fflush_r>
 800915c:	68a1      	ldr	r1, [r4, #8]
 800915e:	4b09      	ldr	r3, [pc, #36]	; (8009184 <cleanup_stdio+0x38>)
 8009160:	4299      	cmp	r1, r3
 8009162:	d002      	beq.n	800916a <cleanup_stdio+0x1e>
 8009164:	4620      	mov	r0, r4
 8009166:	f000 fb9f 	bl	80098a8 <_fflush_r>
 800916a:	68e1      	ldr	r1, [r4, #12]
 800916c:	4b06      	ldr	r3, [pc, #24]	; (8009188 <cleanup_stdio+0x3c>)
 800916e:	4299      	cmp	r1, r3
 8009170:	d004      	beq.n	800917c <cleanup_stdio+0x30>
 8009172:	4620      	mov	r0, r4
 8009174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009178:	f000 bb96 	b.w	80098a8 <_fflush_r>
 800917c:	bd10      	pop	{r4, pc}
 800917e:	bf00      	nop
 8009180:	200005b8 	.word	0x200005b8
 8009184:	20000620 	.word	0x20000620
 8009188:	20000688 	.word	0x20000688

0800918c <global_stdio_init.part.0>:
 800918c:	b510      	push	{r4, lr}
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <global_stdio_init.part.0+0x30>)
 8009190:	4c0b      	ldr	r4, [pc, #44]	; (80091c0 <global_stdio_init.part.0+0x34>)
 8009192:	4a0c      	ldr	r2, [pc, #48]	; (80091c4 <global_stdio_init.part.0+0x38>)
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	4620      	mov	r0, r4
 8009198:	2200      	movs	r2, #0
 800919a:	2104      	movs	r1, #4
 800919c:	f7ff ff94 	bl	80090c8 <std>
 80091a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80091a4:	2201      	movs	r2, #1
 80091a6:	2109      	movs	r1, #9
 80091a8:	f7ff ff8e 	bl	80090c8 <std>
 80091ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80091b0:	2202      	movs	r2, #2
 80091b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b6:	2112      	movs	r1, #18
 80091b8:	f7ff bf86 	b.w	80090c8 <std>
 80091bc:	200006f0 	.word	0x200006f0
 80091c0:	200005b8 	.word	0x200005b8
 80091c4:	08009135 	.word	0x08009135

080091c8 <__sfp_lock_acquire>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__sfp_lock_acquire+0x8>)
 80091ca:	f000 b9ec 	b.w	80095a6 <__retarget_lock_acquire_recursive>
 80091ce:	bf00      	nop
 80091d0:	200006f9 	.word	0x200006f9

080091d4 <__sfp_lock_release>:
 80091d4:	4801      	ldr	r0, [pc, #4]	; (80091dc <__sfp_lock_release+0x8>)
 80091d6:	f000 b9e7 	b.w	80095a8 <__retarget_lock_release_recursive>
 80091da:	bf00      	nop
 80091dc:	200006f9 	.word	0x200006f9

080091e0 <__sinit>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	4604      	mov	r4, r0
 80091e4:	f7ff fff0 	bl	80091c8 <__sfp_lock_acquire>
 80091e8:	6a23      	ldr	r3, [r4, #32]
 80091ea:	b11b      	cbz	r3, 80091f4 <__sinit+0x14>
 80091ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f0:	f7ff bff0 	b.w	80091d4 <__sfp_lock_release>
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <__sinit+0x28>)
 80091f6:	6223      	str	r3, [r4, #32]
 80091f8:	4b04      	ldr	r3, [pc, #16]	; (800920c <__sinit+0x2c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1f5      	bne.n	80091ec <__sinit+0xc>
 8009200:	f7ff ffc4 	bl	800918c <global_stdio_init.part.0>
 8009204:	e7f2      	b.n	80091ec <__sinit+0xc>
 8009206:	bf00      	nop
 8009208:	0800914d 	.word	0x0800914d
 800920c:	200006f0 	.word	0x200006f0

08009210 <_fwalk_sglue>:
 8009210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009214:	4607      	mov	r7, r0
 8009216:	4688      	mov	r8, r1
 8009218:	4614      	mov	r4, r2
 800921a:	2600      	movs	r6, #0
 800921c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009220:	f1b9 0901 	subs.w	r9, r9, #1
 8009224:	d505      	bpl.n	8009232 <_fwalk_sglue+0x22>
 8009226:	6824      	ldr	r4, [r4, #0]
 8009228:	2c00      	cmp	r4, #0
 800922a:	d1f7      	bne.n	800921c <_fwalk_sglue+0xc>
 800922c:	4630      	mov	r0, r6
 800922e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d907      	bls.n	8009248 <_fwalk_sglue+0x38>
 8009238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800923c:	3301      	adds	r3, #1
 800923e:	d003      	beq.n	8009248 <_fwalk_sglue+0x38>
 8009240:	4629      	mov	r1, r5
 8009242:	4638      	mov	r0, r7
 8009244:	47c0      	blx	r8
 8009246:	4306      	orrs	r6, r0
 8009248:	3568      	adds	r5, #104	; 0x68
 800924a:	e7e9      	b.n	8009220 <_fwalk_sglue+0x10>

0800924c <_puts_r>:
 800924c:	6a03      	ldr	r3, [r0, #32]
 800924e:	b570      	push	{r4, r5, r6, lr}
 8009250:	6884      	ldr	r4, [r0, #8]
 8009252:	4605      	mov	r5, r0
 8009254:	460e      	mov	r6, r1
 8009256:	b90b      	cbnz	r3, 800925c <_puts_r+0x10>
 8009258:	f7ff ffc2 	bl	80091e0 <__sinit>
 800925c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800925e:	07db      	lsls	r3, r3, #31
 8009260:	d405      	bmi.n	800926e <_puts_r+0x22>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	0598      	lsls	r0, r3, #22
 8009266:	d402      	bmi.n	800926e <_puts_r+0x22>
 8009268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800926a:	f000 f99c 	bl	80095a6 <__retarget_lock_acquire_recursive>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	0719      	lsls	r1, r3, #28
 8009272:	d513      	bpl.n	800929c <_puts_r+0x50>
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	b18b      	cbz	r3, 800929c <_puts_r+0x50>
 8009278:	3e01      	subs	r6, #1
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009280:	3b01      	subs	r3, #1
 8009282:	60a3      	str	r3, [r4, #8]
 8009284:	b9e9      	cbnz	r1, 80092c2 <_puts_r+0x76>
 8009286:	2b00      	cmp	r3, #0
 8009288:	da2e      	bge.n	80092e8 <_puts_r+0x9c>
 800928a:	4622      	mov	r2, r4
 800928c:	210a      	movs	r1, #10
 800928e:	4628      	mov	r0, r5
 8009290:	f000 f87b 	bl	800938a <__swbuf_r>
 8009294:	3001      	adds	r0, #1
 8009296:	d007      	beq.n	80092a8 <_puts_r+0x5c>
 8009298:	250a      	movs	r5, #10
 800929a:	e007      	b.n	80092ac <_puts_r+0x60>
 800929c:	4621      	mov	r1, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 f8b0 	bl	8009404 <__swsetup_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d0e7      	beq.n	8009278 <_puts_r+0x2c>
 80092a8:	f04f 35ff 	mov.w	r5, #4294967295
 80092ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092ae:	07da      	lsls	r2, r3, #31
 80092b0:	d405      	bmi.n	80092be <_puts_r+0x72>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	059b      	lsls	r3, r3, #22
 80092b6:	d402      	bmi.n	80092be <_puts_r+0x72>
 80092b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ba:	f000 f975 	bl	80095a8 <__retarget_lock_release_recursive>
 80092be:	4628      	mov	r0, r5
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	da04      	bge.n	80092d0 <_puts_r+0x84>
 80092c6:	69a2      	ldr	r2, [r4, #24]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	dc06      	bgt.n	80092da <_puts_r+0x8e>
 80092cc:	290a      	cmp	r1, #10
 80092ce:	d004      	beq.n	80092da <_puts_r+0x8e>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	6022      	str	r2, [r4, #0]
 80092d6:	7019      	strb	r1, [r3, #0]
 80092d8:	e7cf      	b.n	800927a <_puts_r+0x2e>
 80092da:	4622      	mov	r2, r4
 80092dc:	4628      	mov	r0, r5
 80092de:	f000 f854 	bl	800938a <__swbuf_r>
 80092e2:	3001      	adds	r0, #1
 80092e4:	d1c9      	bne.n	800927a <_puts_r+0x2e>
 80092e6:	e7df      	b.n	80092a8 <_puts_r+0x5c>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	250a      	movs	r5, #10
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	6022      	str	r2, [r4, #0]
 80092f0:	701d      	strb	r5, [r3, #0]
 80092f2:	e7db      	b.n	80092ac <_puts_r+0x60>

080092f4 <puts>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <puts+0xc>)
 80092f6:	4601      	mov	r1, r0
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f7ff bfa7 	b.w	800924c <_puts_r>
 80092fe:	bf00      	nop
 8009300:	2000006c 	.word	0x2000006c

08009304 <__sread>:
 8009304:	b510      	push	{r4, lr}
 8009306:	460c      	mov	r4, r1
 8009308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800930c:	f000 f8fc 	bl	8009508 <_read_r>
 8009310:	2800      	cmp	r0, #0
 8009312:	bfab      	itete	ge
 8009314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009316:	89a3      	ldrhlt	r3, [r4, #12]
 8009318:	181b      	addge	r3, r3, r0
 800931a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800931e:	bfac      	ite	ge
 8009320:	6563      	strge	r3, [r4, #84]	; 0x54
 8009322:	81a3      	strhlt	r3, [r4, #12]
 8009324:	bd10      	pop	{r4, pc}

08009326 <__swrite>:
 8009326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	461f      	mov	r7, r3
 800932c:	898b      	ldrh	r3, [r1, #12]
 800932e:	05db      	lsls	r3, r3, #23
 8009330:	4605      	mov	r5, r0
 8009332:	460c      	mov	r4, r1
 8009334:	4616      	mov	r6, r2
 8009336:	d505      	bpl.n	8009344 <__swrite+0x1e>
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	2302      	movs	r3, #2
 800933e:	2200      	movs	r2, #0
 8009340:	f000 f8d0 	bl	80094e4 <_lseek_r>
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800934a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	4632      	mov	r2, r6
 8009352:	463b      	mov	r3, r7
 8009354:	4628      	mov	r0, r5
 8009356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800935a:	f000 b8e7 	b.w	800952c <_write_r>

0800935e <__sseek>:
 800935e:	b510      	push	{r4, lr}
 8009360:	460c      	mov	r4, r1
 8009362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009366:	f000 f8bd 	bl	80094e4 <_lseek_r>
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	bf15      	itete	ne
 8009370:	6560      	strne	r0, [r4, #84]	; 0x54
 8009372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800937a:	81a3      	strheq	r3, [r4, #12]
 800937c:	bf18      	it	ne
 800937e:	81a3      	strhne	r3, [r4, #12]
 8009380:	bd10      	pop	{r4, pc}

08009382 <__sclose>:
 8009382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009386:	f000 b89d 	b.w	80094c4 <_close_r>

0800938a <__swbuf_r>:
 800938a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938c:	460e      	mov	r6, r1
 800938e:	4614      	mov	r4, r2
 8009390:	4605      	mov	r5, r0
 8009392:	b118      	cbz	r0, 800939c <__swbuf_r+0x12>
 8009394:	6a03      	ldr	r3, [r0, #32]
 8009396:	b90b      	cbnz	r3, 800939c <__swbuf_r+0x12>
 8009398:	f7ff ff22 	bl	80091e0 <__sinit>
 800939c:	69a3      	ldr	r3, [r4, #24]
 800939e:	60a3      	str	r3, [r4, #8]
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	071a      	lsls	r2, r3, #28
 80093a4:	d525      	bpl.n	80093f2 <__swbuf_r+0x68>
 80093a6:	6923      	ldr	r3, [r4, #16]
 80093a8:	b31b      	cbz	r3, 80093f2 <__swbuf_r+0x68>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	6922      	ldr	r2, [r4, #16]
 80093ae:	1a98      	subs	r0, r3, r2
 80093b0:	6963      	ldr	r3, [r4, #20]
 80093b2:	b2f6      	uxtb	r6, r6
 80093b4:	4283      	cmp	r3, r0
 80093b6:	4637      	mov	r7, r6
 80093b8:	dc04      	bgt.n	80093c4 <__swbuf_r+0x3a>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4628      	mov	r0, r5
 80093be:	f000 fa73 	bl	80098a8 <_fflush_r>
 80093c2:	b9e0      	cbnz	r0, 80093fe <__swbuf_r+0x74>
 80093c4:	68a3      	ldr	r3, [r4, #8]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	60a3      	str	r3, [r4, #8]
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	6022      	str	r2, [r4, #0]
 80093d0:	701e      	strb	r6, [r3, #0]
 80093d2:	6962      	ldr	r2, [r4, #20]
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d004      	beq.n	80093e4 <__swbuf_r+0x5a>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	07db      	lsls	r3, r3, #31
 80093de:	d506      	bpl.n	80093ee <__swbuf_r+0x64>
 80093e0:	2e0a      	cmp	r6, #10
 80093e2:	d104      	bne.n	80093ee <__swbuf_r+0x64>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 fa5e 	bl	80098a8 <_fflush_r>
 80093ec:	b938      	cbnz	r0, 80093fe <__swbuf_r+0x74>
 80093ee:	4638      	mov	r0, r7
 80093f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f000 f805 	bl	8009404 <__swsetup_r>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d0d5      	beq.n	80093aa <__swbuf_r+0x20>
 80093fe:	f04f 37ff 	mov.w	r7, #4294967295
 8009402:	e7f4      	b.n	80093ee <__swbuf_r+0x64>

08009404 <__swsetup_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4b2a      	ldr	r3, [pc, #168]	; (80094b0 <__swsetup_r+0xac>)
 8009408:	4605      	mov	r5, r0
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	460c      	mov	r4, r1
 800940e:	b118      	cbz	r0, 8009418 <__swsetup_r+0x14>
 8009410:	6a03      	ldr	r3, [r0, #32]
 8009412:	b90b      	cbnz	r3, 8009418 <__swsetup_r+0x14>
 8009414:	f7ff fee4 	bl	80091e0 <__sinit>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800941e:	0718      	lsls	r0, r3, #28
 8009420:	d422      	bmi.n	8009468 <__swsetup_r+0x64>
 8009422:	06d9      	lsls	r1, r3, #27
 8009424:	d407      	bmi.n	8009436 <__swsetup_r+0x32>
 8009426:	2309      	movs	r3, #9
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	e034      	b.n	80094a0 <__swsetup_r+0x9c>
 8009436:	0758      	lsls	r0, r3, #29
 8009438:	d512      	bpl.n	8009460 <__swsetup_r+0x5c>
 800943a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800943c:	b141      	cbz	r1, 8009450 <__swsetup_r+0x4c>
 800943e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009442:	4299      	cmp	r1, r3
 8009444:	d002      	beq.n	800944c <__swsetup_r+0x48>
 8009446:	4628      	mov	r0, r5
 8009448:	f000 f8b0 	bl	80095ac <_free_r>
 800944c:	2300      	movs	r3, #0
 800944e:	6363      	str	r3, [r4, #52]	; 0x34
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009456:	81a3      	strh	r3, [r4, #12]
 8009458:	2300      	movs	r3, #0
 800945a:	6063      	str	r3, [r4, #4]
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	f043 0308 	orr.w	r3, r3, #8
 8009466:	81a3      	strh	r3, [r4, #12]
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	b94b      	cbnz	r3, 8009480 <__swsetup_r+0x7c>
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009476:	d003      	beq.n	8009480 <__swsetup_r+0x7c>
 8009478:	4621      	mov	r1, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f000 fa62 	bl	8009944 <__smakebuf_r>
 8009480:	89a0      	ldrh	r0, [r4, #12]
 8009482:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009486:	f010 0301 	ands.w	r3, r0, #1
 800948a:	d00a      	beq.n	80094a2 <__swsetup_r+0x9e>
 800948c:	2300      	movs	r3, #0
 800948e:	60a3      	str	r3, [r4, #8]
 8009490:	6963      	ldr	r3, [r4, #20]
 8009492:	425b      	negs	r3, r3
 8009494:	61a3      	str	r3, [r4, #24]
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	b943      	cbnz	r3, 80094ac <__swsetup_r+0xa8>
 800949a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800949e:	d1c4      	bne.n	800942a <__swsetup_r+0x26>
 80094a0:	bd38      	pop	{r3, r4, r5, pc}
 80094a2:	0781      	lsls	r1, r0, #30
 80094a4:	bf58      	it	pl
 80094a6:	6963      	ldrpl	r3, [r4, #20]
 80094a8:	60a3      	str	r3, [r4, #8]
 80094aa:	e7f4      	b.n	8009496 <__swsetup_r+0x92>
 80094ac:	2000      	movs	r0, #0
 80094ae:	e7f7      	b.n	80094a0 <__swsetup_r+0x9c>
 80094b0:	2000006c 	.word	0x2000006c

080094b4 <memset>:
 80094b4:	4402      	add	r2, r0
 80094b6:	4603      	mov	r3, r0
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d100      	bne.n	80094be <memset+0xa>
 80094bc:	4770      	bx	lr
 80094be:	f803 1b01 	strb.w	r1, [r3], #1
 80094c2:	e7f9      	b.n	80094b8 <memset+0x4>

080094c4 <_close_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	4d06      	ldr	r5, [pc, #24]	; (80094e0 <_close_r+0x1c>)
 80094c8:	2300      	movs	r3, #0
 80094ca:	4604      	mov	r4, r0
 80094cc:	4608      	mov	r0, r1
 80094ce:	602b      	str	r3, [r5, #0]
 80094d0:	f7fb fbbb 	bl	8004c4a <_close>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	d102      	bne.n	80094de <_close_r+0x1a>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b103      	cbz	r3, 80094de <_close_r+0x1a>
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	200006f4 	.word	0x200006f4

080094e4 <_lseek_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d07      	ldr	r5, [pc, #28]	; (8009504 <_lseek_r+0x20>)
 80094e8:	4604      	mov	r4, r0
 80094ea:	4608      	mov	r0, r1
 80094ec:	4611      	mov	r1, r2
 80094ee:	2200      	movs	r2, #0
 80094f0:	602a      	str	r2, [r5, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	f7fb fbd0 	bl	8004c98 <_lseek>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_lseek_r+0x1e>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_lseek_r+0x1e>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	200006f4 	.word	0x200006f4

08009508 <_read_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d07      	ldr	r5, [pc, #28]	; (8009528 <_read_r+0x20>)
 800950c:	4604      	mov	r4, r0
 800950e:	4608      	mov	r0, r1
 8009510:	4611      	mov	r1, r2
 8009512:	2200      	movs	r2, #0
 8009514:	602a      	str	r2, [r5, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	f7fb fb5e 	bl	8004bd8 <_read>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_read_r+0x1e>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_read_r+0x1e>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	200006f4 	.word	0x200006f4

0800952c <_write_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d07      	ldr	r5, [pc, #28]	; (800954c <_write_r+0x20>)
 8009530:	4604      	mov	r4, r0
 8009532:	4608      	mov	r0, r1
 8009534:	4611      	mov	r1, r2
 8009536:	2200      	movs	r2, #0
 8009538:	602a      	str	r2, [r5, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	f7fb fb69 	bl	8004c12 <_write>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_write_r+0x1e>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_write_r+0x1e>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	200006f4 	.word	0x200006f4

08009550 <__errno>:
 8009550:	4b01      	ldr	r3, [pc, #4]	; (8009558 <__errno+0x8>)
 8009552:	6818      	ldr	r0, [r3, #0]
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	2000006c 	.word	0x2000006c

0800955c <__libc_init_array>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	4d0d      	ldr	r5, [pc, #52]	; (8009594 <__libc_init_array+0x38>)
 8009560:	4c0d      	ldr	r4, [pc, #52]	; (8009598 <__libc_init_array+0x3c>)
 8009562:	1b64      	subs	r4, r4, r5
 8009564:	10a4      	asrs	r4, r4, #2
 8009566:	2600      	movs	r6, #0
 8009568:	42a6      	cmp	r6, r4
 800956a:	d109      	bne.n	8009580 <__libc_init_array+0x24>
 800956c:	4d0b      	ldr	r5, [pc, #44]	; (800959c <__libc_init_array+0x40>)
 800956e:	4c0c      	ldr	r4, [pc, #48]	; (80095a0 <__libc_init_array+0x44>)
 8009570:	f000 ffa0 	bl	800a4b4 <_init>
 8009574:	1b64      	subs	r4, r4, r5
 8009576:	10a4      	asrs	r4, r4, #2
 8009578:	2600      	movs	r6, #0
 800957a:	42a6      	cmp	r6, r4
 800957c:	d105      	bne.n	800958a <__libc_init_array+0x2e>
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	f855 3b04 	ldr.w	r3, [r5], #4
 8009584:	4798      	blx	r3
 8009586:	3601      	adds	r6, #1
 8009588:	e7ee      	b.n	8009568 <__libc_init_array+0xc>
 800958a:	f855 3b04 	ldr.w	r3, [r5], #4
 800958e:	4798      	blx	r3
 8009590:	3601      	adds	r6, #1
 8009592:	e7f2      	b.n	800957a <__libc_init_array+0x1e>
 8009594:	0800a634 	.word	0x0800a634
 8009598:	0800a634 	.word	0x0800a634
 800959c:	0800a634 	.word	0x0800a634
 80095a0:	0800a638 	.word	0x0800a638

080095a4 <__retarget_lock_init_recursive>:
 80095a4:	4770      	bx	lr

080095a6 <__retarget_lock_acquire_recursive>:
 80095a6:	4770      	bx	lr

080095a8 <__retarget_lock_release_recursive>:
 80095a8:	4770      	bx	lr
	...

080095ac <_free_r>:
 80095ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ae:	2900      	cmp	r1, #0
 80095b0:	d044      	beq.n	800963c <_free_r+0x90>
 80095b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b6:	9001      	str	r0, [sp, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f1a1 0404 	sub.w	r4, r1, #4
 80095be:	bfb8      	it	lt
 80095c0:	18e4      	addlt	r4, r4, r3
 80095c2:	f000 f8df 	bl	8009784 <__malloc_lock>
 80095c6:	4a1e      	ldr	r2, [pc, #120]	; (8009640 <_free_r+0x94>)
 80095c8:	9801      	ldr	r0, [sp, #4]
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	b933      	cbnz	r3, 80095dc <_free_r+0x30>
 80095ce:	6063      	str	r3, [r4, #4]
 80095d0:	6014      	str	r4, [r2, #0]
 80095d2:	b003      	add	sp, #12
 80095d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095d8:	f000 b8da 	b.w	8009790 <__malloc_unlock>
 80095dc:	42a3      	cmp	r3, r4
 80095de:	d908      	bls.n	80095f2 <_free_r+0x46>
 80095e0:	6825      	ldr	r5, [r4, #0]
 80095e2:	1961      	adds	r1, r4, r5
 80095e4:	428b      	cmp	r3, r1
 80095e6:	bf01      	itttt	eq
 80095e8:	6819      	ldreq	r1, [r3, #0]
 80095ea:	685b      	ldreq	r3, [r3, #4]
 80095ec:	1949      	addeq	r1, r1, r5
 80095ee:	6021      	streq	r1, [r4, #0]
 80095f0:	e7ed      	b.n	80095ce <_free_r+0x22>
 80095f2:	461a      	mov	r2, r3
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	b10b      	cbz	r3, 80095fc <_free_r+0x50>
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	d9fa      	bls.n	80095f2 <_free_r+0x46>
 80095fc:	6811      	ldr	r1, [r2, #0]
 80095fe:	1855      	adds	r5, r2, r1
 8009600:	42a5      	cmp	r5, r4
 8009602:	d10b      	bne.n	800961c <_free_r+0x70>
 8009604:	6824      	ldr	r4, [r4, #0]
 8009606:	4421      	add	r1, r4
 8009608:	1854      	adds	r4, r2, r1
 800960a:	42a3      	cmp	r3, r4
 800960c:	6011      	str	r1, [r2, #0]
 800960e:	d1e0      	bne.n	80095d2 <_free_r+0x26>
 8009610:	681c      	ldr	r4, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	6053      	str	r3, [r2, #4]
 8009616:	440c      	add	r4, r1
 8009618:	6014      	str	r4, [r2, #0]
 800961a:	e7da      	b.n	80095d2 <_free_r+0x26>
 800961c:	d902      	bls.n	8009624 <_free_r+0x78>
 800961e:	230c      	movs	r3, #12
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	e7d6      	b.n	80095d2 <_free_r+0x26>
 8009624:	6825      	ldr	r5, [r4, #0]
 8009626:	1961      	adds	r1, r4, r5
 8009628:	428b      	cmp	r3, r1
 800962a:	bf04      	itt	eq
 800962c:	6819      	ldreq	r1, [r3, #0]
 800962e:	685b      	ldreq	r3, [r3, #4]
 8009630:	6063      	str	r3, [r4, #4]
 8009632:	bf04      	itt	eq
 8009634:	1949      	addeq	r1, r1, r5
 8009636:	6021      	streq	r1, [r4, #0]
 8009638:	6054      	str	r4, [r2, #4]
 800963a:	e7ca      	b.n	80095d2 <_free_r+0x26>
 800963c:	b003      	add	sp, #12
 800963e:	bd30      	pop	{r4, r5, pc}
 8009640:	200006fc 	.word	0x200006fc

08009644 <sbrk_aligned>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	4e0e      	ldr	r6, [pc, #56]	; (8009680 <sbrk_aligned+0x3c>)
 8009648:	460c      	mov	r4, r1
 800964a:	6831      	ldr	r1, [r6, #0]
 800964c:	4605      	mov	r5, r0
 800964e:	b911      	cbnz	r1, 8009656 <sbrk_aligned+0x12>
 8009650:	f000 f9d6 	bl	8009a00 <_sbrk_r>
 8009654:	6030      	str	r0, [r6, #0]
 8009656:	4621      	mov	r1, r4
 8009658:	4628      	mov	r0, r5
 800965a:	f000 f9d1 	bl	8009a00 <_sbrk_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	d00a      	beq.n	8009678 <sbrk_aligned+0x34>
 8009662:	1cc4      	adds	r4, r0, #3
 8009664:	f024 0403 	bic.w	r4, r4, #3
 8009668:	42a0      	cmp	r0, r4
 800966a:	d007      	beq.n	800967c <sbrk_aligned+0x38>
 800966c:	1a21      	subs	r1, r4, r0
 800966e:	4628      	mov	r0, r5
 8009670:	f000 f9c6 	bl	8009a00 <_sbrk_r>
 8009674:	3001      	adds	r0, #1
 8009676:	d101      	bne.n	800967c <sbrk_aligned+0x38>
 8009678:	f04f 34ff 	mov.w	r4, #4294967295
 800967c:	4620      	mov	r0, r4
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	20000700 	.word	0x20000700

08009684 <_malloc_r>:
 8009684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009688:	1ccd      	adds	r5, r1, #3
 800968a:	f025 0503 	bic.w	r5, r5, #3
 800968e:	3508      	adds	r5, #8
 8009690:	2d0c      	cmp	r5, #12
 8009692:	bf38      	it	cc
 8009694:	250c      	movcc	r5, #12
 8009696:	2d00      	cmp	r5, #0
 8009698:	4607      	mov	r7, r0
 800969a:	db01      	blt.n	80096a0 <_malloc_r+0x1c>
 800969c:	42a9      	cmp	r1, r5
 800969e:	d905      	bls.n	80096ac <_malloc_r+0x28>
 80096a0:	230c      	movs	r3, #12
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	2600      	movs	r6, #0
 80096a6:	4630      	mov	r0, r6
 80096a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009780 <_malloc_r+0xfc>
 80096b0:	f000 f868 	bl	8009784 <__malloc_lock>
 80096b4:	f8d8 3000 	ldr.w	r3, [r8]
 80096b8:	461c      	mov	r4, r3
 80096ba:	bb5c      	cbnz	r4, 8009714 <_malloc_r+0x90>
 80096bc:	4629      	mov	r1, r5
 80096be:	4638      	mov	r0, r7
 80096c0:	f7ff ffc0 	bl	8009644 <sbrk_aligned>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	4604      	mov	r4, r0
 80096c8:	d155      	bne.n	8009776 <_malloc_r+0xf2>
 80096ca:	f8d8 4000 	ldr.w	r4, [r8]
 80096ce:	4626      	mov	r6, r4
 80096d0:	2e00      	cmp	r6, #0
 80096d2:	d145      	bne.n	8009760 <_malloc_r+0xdc>
 80096d4:	2c00      	cmp	r4, #0
 80096d6:	d048      	beq.n	800976a <_malloc_r+0xe6>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	4631      	mov	r1, r6
 80096dc:	4638      	mov	r0, r7
 80096de:	eb04 0903 	add.w	r9, r4, r3
 80096e2:	f000 f98d 	bl	8009a00 <_sbrk_r>
 80096e6:	4581      	cmp	r9, r0
 80096e8:	d13f      	bne.n	800976a <_malloc_r+0xe6>
 80096ea:	6821      	ldr	r1, [r4, #0]
 80096ec:	1a6d      	subs	r5, r5, r1
 80096ee:	4629      	mov	r1, r5
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff ffa7 	bl	8009644 <sbrk_aligned>
 80096f6:	3001      	adds	r0, #1
 80096f8:	d037      	beq.n	800976a <_malloc_r+0xe6>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	442b      	add	r3, r5
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	f8d8 3000 	ldr.w	r3, [r8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d038      	beq.n	800977a <_malloc_r+0xf6>
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	42a2      	cmp	r2, r4
 800970c:	d12b      	bne.n	8009766 <_malloc_r+0xe2>
 800970e:	2200      	movs	r2, #0
 8009710:	605a      	str	r2, [r3, #4]
 8009712:	e00f      	b.n	8009734 <_malloc_r+0xb0>
 8009714:	6822      	ldr	r2, [r4, #0]
 8009716:	1b52      	subs	r2, r2, r5
 8009718:	d41f      	bmi.n	800975a <_malloc_r+0xd6>
 800971a:	2a0b      	cmp	r2, #11
 800971c:	d917      	bls.n	800974e <_malloc_r+0xca>
 800971e:	1961      	adds	r1, r4, r5
 8009720:	42a3      	cmp	r3, r4
 8009722:	6025      	str	r5, [r4, #0]
 8009724:	bf18      	it	ne
 8009726:	6059      	strne	r1, [r3, #4]
 8009728:	6863      	ldr	r3, [r4, #4]
 800972a:	bf08      	it	eq
 800972c:	f8c8 1000 	streq.w	r1, [r8]
 8009730:	5162      	str	r2, [r4, r5]
 8009732:	604b      	str	r3, [r1, #4]
 8009734:	4638      	mov	r0, r7
 8009736:	f104 060b 	add.w	r6, r4, #11
 800973a:	f000 f829 	bl	8009790 <__malloc_unlock>
 800973e:	f026 0607 	bic.w	r6, r6, #7
 8009742:	1d23      	adds	r3, r4, #4
 8009744:	1af2      	subs	r2, r6, r3
 8009746:	d0ae      	beq.n	80096a6 <_malloc_r+0x22>
 8009748:	1b9b      	subs	r3, r3, r6
 800974a:	50a3      	str	r3, [r4, r2]
 800974c:	e7ab      	b.n	80096a6 <_malloc_r+0x22>
 800974e:	42a3      	cmp	r3, r4
 8009750:	6862      	ldr	r2, [r4, #4]
 8009752:	d1dd      	bne.n	8009710 <_malloc_r+0x8c>
 8009754:	f8c8 2000 	str.w	r2, [r8]
 8009758:	e7ec      	b.n	8009734 <_malloc_r+0xb0>
 800975a:	4623      	mov	r3, r4
 800975c:	6864      	ldr	r4, [r4, #4]
 800975e:	e7ac      	b.n	80096ba <_malloc_r+0x36>
 8009760:	4634      	mov	r4, r6
 8009762:	6876      	ldr	r6, [r6, #4]
 8009764:	e7b4      	b.n	80096d0 <_malloc_r+0x4c>
 8009766:	4613      	mov	r3, r2
 8009768:	e7cc      	b.n	8009704 <_malloc_r+0x80>
 800976a:	230c      	movs	r3, #12
 800976c:	603b      	str	r3, [r7, #0]
 800976e:	4638      	mov	r0, r7
 8009770:	f000 f80e 	bl	8009790 <__malloc_unlock>
 8009774:	e797      	b.n	80096a6 <_malloc_r+0x22>
 8009776:	6025      	str	r5, [r4, #0]
 8009778:	e7dc      	b.n	8009734 <_malloc_r+0xb0>
 800977a:	605b      	str	r3, [r3, #4]
 800977c:	deff      	udf	#255	; 0xff
 800977e:	bf00      	nop
 8009780:	200006fc 	.word	0x200006fc

08009784 <__malloc_lock>:
 8009784:	4801      	ldr	r0, [pc, #4]	; (800978c <__malloc_lock+0x8>)
 8009786:	f7ff bf0e 	b.w	80095a6 <__retarget_lock_acquire_recursive>
 800978a:	bf00      	nop
 800978c:	200006f8 	.word	0x200006f8

08009790 <__malloc_unlock>:
 8009790:	4801      	ldr	r0, [pc, #4]	; (8009798 <__malloc_unlock+0x8>)
 8009792:	f7ff bf09 	b.w	80095a8 <__retarget_lock_release_recursive>
 8009796:	bf00      	nop
 8009798:	200006f8 	.word	0x200006f8

0800979c <__sflush_r>:
 800979c:	898a      	ldrh	r2, [r1, #12]
 800979e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a2:	4605      	mov	r5, r0
 80097a4:	0710      	lsls	r0, r2, #28
 80097a6:	460c      	mov	r4, r1
 80097a8:	d458      	bmi.n	800985c <__sflush_r+0xc0>
 80097aa:	684b      	ldr	r3, [r1, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dc05      	bgt.n	80097bc <__sflush_r+0x20>
 80097b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dc02      	bgt.n	80097bc <__sflush_r+0x20>
 80097b6:	2000      	movs	r0, #0
 80097b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097be:	2e00      	cmp	r6, #0
 80097c0:	d0f9      	beq.n	80097b6 <__sflush_r+0x1a>
 80097c2:	2300      	movs	r3, #0
 80097c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097c8:	682f      	ldr	r7, [r5, #0]
 80097ca:	6a21      	ldr	r1, [r4, #32]
 80097cc:	602b      	str	r3, [r5, #0]
 80097ce:	d032      	beq.n	8009836 <__sflush_r+0x9a>
 80097d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	075a      	lsls	r2, r3, #29
 80097d6:	d505      	bpl.n	80097e4 <__sflush_r+0x48>
 80097d8:	6863      	ldr	r3, [r4, #4]
 80097da:	1ac0      	subs	r0, r0, r3
 80097dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097de:	b10b      	cbz	r3, 80097e4 <__sflush_r+0x48>
 80097e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097e2:	1ac0      	subs	r0, r0, r3
 80097e4:	2300      	movs	r3, #0
 80097e6:	4602      	mov	r2, r0
 80097e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ea:	6a21      	ldr	r1, [r4, #32]
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b0      	blx	r6
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	d106      	bne.n	8009804 <__sflush_r+0x68>
 80097f6:	6829      	ldr	r1, [r5, #0]
 80097f8:	291d      	cmp	r1, #29
 80097fa:	d82b      	bhi.n	8009854 <__sflush_r+0xb8>
 80097fc:	4a29      	ldr	r2, [pc, #164]	; (80098a4 <__sflush_r+0x108>)
 80097fe:	410a      	asrs	r2, r1
 8009800:	07d6      	lsls	r6, r2, #31
 8009802:	d427      	bmi.n	8009854 <__sflush_r+0xb8>
 8009804:	2200      	movs	r2, #0
 8009806:	6062      	str	r2, [r4, #4]
 8009808:	04d9      	lsls	r1, r3, #19
 800980a:	6922      	ldr	r2, [r4, #16]
 800980c:	6022      	str	r2, [r4, #0]
 800980e:	d504      	bpl.n	800981a <__sflush_r+0x7e>
 8009810:	1c42      	adds	r2, r0, #1
 8009812:	d101      	bne.n	8009818 <__sflush_r+0x7c>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b903      	cbnz	r3, 800981a <__sflush_r+0x7e>
 8009818:	6560      	str	r0, [r4, #84]	; 0x54
 800981a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800981c:	602f      	str	r7, [r5, #0]
 800981e:	2900      	cmp	r1, #0
 8009820:	d0c9      	beq.n	80097b6 <__sflush_r+0x1a>
 8009822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009826:	4299      	cmp	r1, r3
 8009828:	d002      	beq.n	8009830 <__sflush_r+0x94>
 800982a:	4628      	mov	r0, r5
 800982c:	f7ff febe 	bl	80095ac <_free_r>
 8009830:	2000      	movs	r0, #0
 8009832:	6360      	str	r0, [r4, #52]	; 0x34
 8009834:	e7c0      	b.n	80097b8 <__sflush_r+0x1c>
 8009836:	2301      	movs	r3, #1
 8009838:	4628      	mov	r0, r5
 800983a:	47b0      	blx	r6
 800983c:	1c41      	adds	r1, r0, #1
 800983e:	d1c8      	bne.n	80097d2 <__sflush_r+0x36>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0c5      	beq.n	80097d2 <__sflush_r+0x36>
 8009846:	2b1d      	cmp	r3, #29
 8009848:	d001      	beq.n	800984e <__sflush_r+0xb2>
 800984a:	2b16      	cmp	r3, #22
 800984c:	d101      	bne.n	8009852 <__sflush_r+0xb6>
 800984e:	602f      	str	r7, [r5, #0]
 8009850:	e7b1      	b.n	80097b6 <__sflush_r+0x1a>
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	e7ad      	b.n	80097b8 <__sflush_r+0x1c>
 800985c:	690f      	ldr	r7, [r1, #16]
 800985e:	2f00      	cmp	r7, #0
 8009860:	d0a9      	beq.n	80097b6 <__sflush_r+0x1a>
 8009862:	0793      	lsls	r3, r2, #30
 8009864:	680e      	ldr	r6, [r1, #0]
 8009866:	bf08      	it	eq
 8009868:	694b      	ldreq	r3, [r1, #20]
 800986a:	600f      	str	r7, [r1, #0]
 800986c:	bf18      	it	ne
 800986e:	2300      	movne	r3, #0
 8009870:	eba6 0807 	sub.w	r8, r6, r7
 8009874:	608b      	str	r3, [r1, #8]
 8009876:	f1b8 0f00 	cmp.w	r8, #0
 800987a:	dd9c      	ble.n	80097b6 <__sflush_r+0x1a>
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009880:	4643      	mov	r3, r8
 8009882:	463a      	mov	r2, r7
 8009884:	4628      	mov	r0, r5
 8009886:	47b0      	blx	r6
 8009888:	2800      	cmp	r0, #0
 800988a:	dc06      	bgt.n	800989a <__sflush_r+0xfe>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	e78e      	b.n	80097b8 <__sflush_r+0x1c>
 800989a:	4407      	add	r7, r0
 800989c:	eba8 0800 	sub.w	r8, r8, r0
 80098a0:	e7e9      	b.n	8009876 <__sflush_r+0xda>
 80098a2:	bf00      	nop
 80098a4:	dfbffffe 	.word	0xdfbffffe

080098a8 <_fflush_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	690b      	ldr	r3, [r1, #16]
 80098ac:	4605      	mov	r5, r0
 80098ae:	460c      	mov	r4, r1
 80098b0:	b913      	cbnz	r3, 80098b8 <_fflush_r+0x10>
 80098b2:	2500      	movs	r5, #0
 80098b4:	4628      	mov	r0, r5
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	b118      	cbz	r0, 80098c2 <_fflush_r+0x1a>
 80098ba:	6a03      	ldr	r3, [r0, #32]
 80098bc:	b90b      	cbnz	r3, 80098c2 <_fflush_r+0x1a>
 80098be:	f7ff fc8f 	bl	80091e0 <__sinit>
 80098c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0f3      	beq.n	80098b2 <_fflush_r+0xa>
 80098ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098cc:	07d0      	lsls	r0, r2, #31
 80098ce:	d404      	bmi.n	80098da <_fflush_r+0x32>
 80098d0:	0599      	lsls	r1, r3, #22
 80098d2:	d402      	bmi.n	80098da <_fflush_r+0x32>
 80098d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098d6:	f7ff fe66 	bl	80095a6 <__retarget_lock_acquire_recursive>
 80098da:	4628      	mov	r0, r5
 80098dc:	4621      	mov	r1, r4
 80098de:	f7ff ff5d 	bl	800979c <__sflush_r>
 80098e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098e4:	07da      	lsls	r2, r3, #31
 80098e6:	4605      	mov	r5, r0
 80098e8:	d4e4      	bmi.n	80098b4 <_fflush_r+0xc>
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	059b      	lsls	r3, r3, #22
 80098ee:	d4e1      	bmi.n	80098b4 <_fflush_r+0xc>
 80098f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098f2:	f7ff fe59 	bl	80095a8 <__retarget_lock_release_recursive>
 80098f6:	e7dd      	b.n	80098b4 <_fflush_r+0xc>

080098f8 <__swhatbuf_r>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	460c      	mov	r4, r1
 80098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009900:	2900      	cmp	r1, #0
 8009902:	b096      	sub	sp, #88	; 0x58
 8009904:	4615      	mov	r5, r2
 8009906:	461e      	mov	r6, r3
 8009908:	da0d      	bge.n	8009926 <__swhatbuf_r+0x2e>
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009910:	f04f 0100 	mov.w	r1, #0
 8009914:	bf0c      	ite	eq
 8009916:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800991a:	2340      	movne	r3, #64	; 0x40
 800991c:	2000      	movs	r0, #0
 800991e:	6031      	str	r1, [r6, #0]
 8009920:	602b      	str	r3, [r5, #0]
 8009922:	b016      	add	sp, #88	; 0x58
 8009924:	bd70      	pop	{r4, r5, r6, pc}
 8009926:	466a      	mov	r2, sp
 8009928:	f000 f848 	bl	80099bc <_fstat_r>
 800992c:	2800      	cmp	r0, #0
 800992e:	dbec      	blt.n	800990a <__swhatbuf_r+0x12>
 8009930:	9901      	ldr	r1, [sp, #4]
 8009932:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009936:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800993a:	4259      	negs	r1, r3
 800993c:	4159      	adcs	r1, r3
 800993e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009942:	e7eb      	b.n	800991c <__swhatbuf_r+0x24>

08009944 <__smakebuf_r>:
 8009944:	898b      	ldrh	r3, [r1, #12]
 8009946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009948:	079d      	lsls	r5, r3, #30
 800994a:	4606      	mov	r6, r0
 800994c:	460c      	mov	r4, r1
 800994e:	d507      	bpl.n	8009960 <__smakebuf_r+0x1c>
 8009950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	2301      	movs	r3, #1
 800995a:	6163      	str	r3, [r4, #20]
 800995c:	b002      	add	sp, #8
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	ab01      	add	r3, sp, #4
 8009962:	466a      	mov	r2, sp
 8009964:	f7ff ffc8 	bl	80098f8 <__swhatbuf_r>
 8009968:	9900      	ldr	r1, [sp, #0]
 800996a:	4605      	mov	r5, r0
 800996c:	4630      	mov	r0, r6
 800996e:	f7ff fe89 	bl	8009684 <_malloc_r>
 8009972:	b948      	cbnz	r0, 8009988 <__smakebuf_r+0x44>
 8009974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009978:	059a      	lsls	r2, r3, #22
 800997a:	d4ef      	bmi.n	800995c <__smakebuf_r+0x18>
 800997c:	f023 0303 	bic.w	r3, r3, #3
 8009980:	f043 0302 	orr.w	r3, r3, #2
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	e7e3      	b.n	8009950 <__smakebuf_r+0xc>
 8009988:	89a3      	ldrh	r3, [r4, #12]
 800998a:	6020      	str	r0, [r4, #0]
 800998c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	9b00      	ldr	r3, [sp, #0]
 8009994:	6163      	str	r3, [r4, #20]
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	6120      	str	r0, [r4, #16]
 800999a:	b15b      	cbz	r3, 80099b4 <__smakebuf_r+0x70>
 800999c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a0:	4630      	mov	r0, r6
 80099a2:	f000 f81d 	bl	80099e0 <_isatty_r>
 80099a6:	b128      	cbz	r0, 80099b4 <__smakebuf_r+0x70>
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	f023 0303 	bic.w	r3, r3, #3
 80099ae:	f043 0301 	orr.w	r3, r3, #1
 80099b2:	81a3      	strh	r3, [r4, #12]
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	431d      	orrs	r5, r3
 80099b8:	81a5      	strh	r5, [r4, #12]
 80099ba:	e7cf      	b.n	800995c <__smakebuf_r+0x18>

080099bc <_fstat_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d07      	ldr	r5, [pc, #28]	; (80099dc <_fstat_r+0x20>)
 80099c0:	2300      	movs	r3, #0
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	4611      	mov	r1, r2
 80099c8:	602b      	str	r3, [r5, #0]
 80099ca:	f7fb f94a 	bl	8004c62 <_fstat>
 80099ce:	1c43      	adds	r3, r0, #1
 80099d0:	d102      	bne.n	80099d8 <_fstat_r+0x1c>
 80099d2:	682b      	ldr	r3, [r5, #0]
 80099d4:	b103      	cbz	r3, 80099d8 <_fstat_r+0x1c>
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	bd38      	pop	{r3, r4, r5, pc}
 80099da:	bf00      	nop
 80099dc:	200006f4 	.word	0x200006f4

080099e0 <_isatty_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d06      	ldr	r5, [pc, #24]	; (80099fc <_isatty_r+0x1c>)
 80099e4:	2300      	movs	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	602b      	str	r3, [r5, #0]
 80099ec:	f7fb f949 	bl	8004c82 <_isatty>
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	d102      	bne.n	80099fa <_isatty_r+0x1a>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	b103      	cbz	r3, 80099fa <_isatty_r+0x1a>
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	200006f4 	.word	0x200006f4

08009a00 <_sbrk_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4d06      	ldr	r5, [pc, #24]	; (8009a1c <_sbrk_r+0x1c>)
 8009a04:	2300      	movs	r3, #0
 8009a06:	4604      	mov	r4, r0
 8009a08:	4608      	mov	r0, r1
 8009a0a:	602b      	str	r3, [r5, #0]
 8009a0c:	f7fb f952 	bl	8004cb4 <_sbrk>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d102      	bne.n	8009a1a <_sbrk_r+0x1a>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	b103      	cbz	r3, 8009a1a <_sbrk_r+0x1a>
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	200006f4 	.word	0x200006f4

08009a20 <sqrt>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	ed2d 8b02 	vpush	{d8}
 8009a26:	ec55 4b10 	vmov	r4, r5, d0
 8009a2a:	f000 fa0b 	bl	8009e44 <__ieee754_sqrt>
 8009a2e:	4622      	mov	r2, r4
 8009a30:	462b      	mov	r3, r5
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	eeb0 8a40 	vmov.f32	s16, s0
 8009a3a:	eef0 8a60 	vmov.f32	s17, s1
 8009a3e:	f7f7 f819 	bl	8000a74 <__aeabi_dcmpun>
 8009a42:	b990      	cbnz	r0, 8009a6a <sqrt+0x4a>
 8009a44:	2200      	movs	r2, #0
 8009a46:	2300      	movs	r3, #0
 8009a48:	4620      	mov	r0, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	f7f6 ffea 	bl	8000a24 <__aeabi_dcmplt>
 8009a50:	b158      	cbz	r0, 8009a6a <sqrt+0x4a>
 8009a52:	f7ff fd7d 	bl	8009550 <__errno>
 8009a56:	2321      	movs	r3, #33	; 0x21
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4610      	mov	r0, r2
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7f6 fe97 	bl	8000794 <__aeabi_ddiv>
 8009a66:	ec41 0b18 	vmov	d8, r0, r1
 8009a6a:	eeb0 0a48 	vmov.f32	s0, s16
 8009a6e:	eef0 0a68 	vmov.f32	s1, s17
 8009a72:	ecbd 8b02 	vpop	{d8}
 8009a76:	bd38      	pop	{r3, r4, r5, pc}

08009a78 <atan>:
 8009a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	ec55 4b10 	vmov	r4, r5, d0
 8009a80:	4bc3      	ldr	r3, [pc, #780]	; (8009d90 <atan+0x318>)
 8009a82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009a86:	429e      	cmp	r6, r3
 8009a88:	46ab      	mov	fp, r5
 8009a8a:	dd18      	ble.n	8009abe <atan+0x46>
 8009a8c:	4bc1      	ldr	r3, [pc, #772]	; (8009d94 <atan+0x31c>)
 8009a8e:	429e      	cmp	r6, r3
 8009a90:	dc01      	bgt.n	8009a96 <atan+0x1e>
 8009a92:	d109      	bne.n	8009aa8 <atan+0x30>
 8009a94:	b144      	cbz	r4, 8009aa8 <atan+0x30>
 8009a96:	4622      	mov	r2, r4
 8009a98:	462b      	mov	r3, r5
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7f6 fb99 	bl	80001d4 <__adddf3>
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	e006      	b.n	8009ab6 <atan+0x3e>
 8009aa8:	f1bb 0f00 	cmp.w	fp, #0
 8009aac:	f300 8131 	bgt.w	8009d12 <atan+0x29a>
 8009ab0:	a59b      	add	r5, pc, #620	; (adr r5, 8009d20 <atan+0x2a8>)
 8009ab2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ab6:	ec45 4b10 	vmov	d0, r4, r5
 8009aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abe:	4bb6      	ldr	r3, [pc, #728]	; (8009d98 <atan+0x320>)
 8009ac0:	429e      	cmp	r6, r3
 8009ac2:	dc14      	bgt.n	8009aee <atan+0x76>
 8009ac4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009ac8:	429e      	cmp	r6, r3
 8009aca:	dc0d      	bgt.n	8009ae8 <atan+0x70>
 8009acc:	a396      	add	r3, pc, #600	; (adr r3, 8009d28 <atan+0x2b0>)
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	ee10 0a10 	vmov	r0, s0
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f7f6 fb7c 	bl	80001d4 <__adddf3>
 8009adc:	4baf      	ldr	r3, [pc, #700]	; (8009d9c <atan+0x324>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f7f6 ffbe 	bl	8000a60 <__aeabi_dcmpgt>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d1e6      	bne.n	8009ab6 <atan+0x3e>
 8009ae8:	f04f 3aff 	mov.w	sl, #4294967295
 8009aec:	e02b      	b.n	8009b46 <atan+0xce>
 8009aee:	f000 f963 	bl	8009db8 <fabs>
 8009af2:	4bab      	ldr	r3, [pc, #684]	; (8009da0 <atan+0x328>)
 8009af4:	429e      	cmp	r6, r3
 8009af6:	ec55 4b10 	vmov	r4, r5, d0
 8009afa:	f300 80bf 	bgt.w	8009c7c <atan+0x204>
 8009afe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009b02:	429e      	cmp	r6, r3
 8009b04:	f300 80a0 	bgt.w	8009c48 <atan+0x1d0>
 8009b08:	ee10 2a10 	vmov	r2, s0
 8009b0c:	ee10 0a10 	vmov	r0, s0
 8009b10:	462b      	mov	r3, r5
 8009b12:	4629      	mov	r1, r5
 8009b14:	f7f6 fb5e 	bl	80001d4 <__adddf3>
 8009b18:	4ba0      	ldr	r3, [pc, #640]	; (8009d9c <atan+0x324>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f7f6 fb58 	bl	80001d0 <__aeabi_dsub>
 8009b20:	2200      	movs	r2, #0
 8009b22:	4606      	mov	r6, r0
 8009b24:	460f      	mov	r7, r1
 8009b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	f7f6 fb51 	bl	80001d4 <__adddf3>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4630      	mov	r0, r6
 8009b38:	4639      	mov	r1, r7
 8009b3a:	f7f6 fe2b 	bl	8000794 <__aeabi_ddiv>
 8009b3e:	f04f 0a00 	mov.w	sl, #0
 8009b42:	4604      	mov	r4, r0
 8009b44:	460d      	mov	r5, r1
 8009b46:	4622      	mov	r2, r4
 8009b48:	462b      	mov	r3, r5
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	f7f6 fcf7 	bl	8000540 <__aeabi_dmul>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	4680      	mov	r8, r0
 8009b58:	4689      	mov	r9, r1
 8009b5a:	f7f6 fcf1 	bl	8000540 <__aeabi_dmul>
 8009b5e:	a374      	add	r3, pc, #464	; (adr r3, 8009d30 <atan+0x2b8>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	4606      	mov	r6, r0
 8009b66:	460f      	mov	r7, r1
 8009b68:	f7f6 fcea 	bl	8000540 <__aeabi_dmul>
 8009b6c:	a372      	add	r3, pc, #456	; (adr r3, 8009d38 <atan+0x2c0>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	f7f6 fb2f 	bl	80001d4 <__adddf3>
 8009b76:	4632      	mov	r2, r6
 8009b78:	463b      	mov	r3, r7
 8009b7a:	f7f6 fce1 	bl	8000540 <__aeabi_dmul>
 8009b7e:	a370      	add	r3, pc, #448	; (adr r3, 8009d40 <atan+0x2c8>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	f7f6 fb26 	bl	80001d4 <__adddf3>
 8009b88:	4632      	mov	r2, r6
 8009b8a:	463b      	mov	r3, r7
 8009b8c:	f7f6 fcd8 	bl	8000540 <__aeabi_dmul>
 8009b90:	a36d      	add	r3, pc, #436	; (adr r3, 8009d48 <atan+0x2d0>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	f7f6 fb1d 	bl	80001d4 <__adddf3>
 8009b9a:	4632      	mov	r2, r6
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	f7f6 fccf 	bl	8000540 <__aeabi_dmul>
 8009ba2:	a36b      	add	r3, pc, #428	; (adr r3, 8009d50 <atan+0x2d8>)
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f7f6 fb14 	bl	80001d4 <__adddf3>
 8009bac:	4632      	mov	r2, r6
 8009bae:	463b      	mov	r3, r7
 8009bb0:	f7f6 fcc6 	bl	8000540 <__aeabi_dmul>
 8009bb4:	a368      	add	r3, pc, #416	; (adr r3, 8009d58 <atan+0x2e0>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	f7f6 fb0b 	bl	80001d4 <__adddf3>
 8009bbe:	4642      	mov	r2, r8
 8009bc0:	464b      	mov	r3, r9
 8009bc2:	f7f6 fcbd 	bl	8000540 <__aeabi_dmul>
 8009bc6:	a366      	add	r3, pc, #408	; (adr r3, 8009d60 <atan+0x2e8>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	4680      	mov	r8, r0
 8009bce:	4689      	mov	r9, r1
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	f7f6 fcb4 	bl	8000540 <__aeabi_dmul>
 8009bd8:	a363      	add	r3, pc, #396	; (adr r3, 8009d68 <atan+0x2f0>)
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f7f6 faf7 	bl	80001d0 <__aeabi_dsub>
 8009be2:	4632      	mov	r2, r6
 8009be4:	463b      	mov	r3, r7
 8009be6:	f7f6 fcab 	bl	8000540 <__aeabi_dmul>
 8009bea:	a361      	add	r3, pc, #388	; (adr r3, 8009d70 <atan+0x2f8>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f7f6 faee 	bl	80001d0 <__aeabi_dsub>
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	f7f6 fca2 	bl	8000540 <__aeabi_dmul>
 8009bfc:	a35e      	add	r3, pc, #376	; (adr r3, 8009d78 <atan+0x300>)
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	f7f6 fae5 	bl	80001d0 <__aeabi_dsub>
 8009c06:	4632      	mov	r2, r6
 8009c08:	463b      	mov	r3, r7
 8009c0a:	f7f6 fc99 	bl	8000540 <__aeabi_dmul>
 8009c0e:	a35c      	add	r3, pc, #368	; (adr r3, 8009d80 <atan+0x308>)
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	f7f6 fadc 	bl	80001d0 <__aeabi_dsub>
 8009c18:	4632      	mov	r2, r6
 8009c1a:	463b      	mov	r3, r7
 8009c1c:	f7f6 fc90 	bl	8000540 <__aeabi_dmul>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4640      	mov	r0, r8
 8009c26:	4649      	mov	r1, r9
 8009c28:	f7f6 fad4 	bl	80001d4 <__adddf3>
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	462b      	mov	r3, r5
 8009c30:	f7f6 fc86 	bl	8000540 <__aeabi_dmul>
 8009c34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	d14b      	bne.n	8009cd6 <atan+0x25e>
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	f7f6 fac5 	bl	80001d0 <__aeabi_dsub>
 8009c46:	e72c      	b.n	8009aa2 <atan+0x2a>
 8009c48:	ee10 0a10 	vmov	r0, s0
 8009c4c:	4b53      	ldr	r3, [pc, #332]	; (8009d9c <atan+0x324>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7f6 fabd 	bl	80001d0 <__aeabi_dsub>
 8009c56:	4b51      	ldr	r3, [pc, #324]	; (8009d9c <atan+0x324>)
 8009c58:	4606      	mov	r6, r0
 8009c5a:	460f      	mov	r7, r1
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4620      	mov	r0, r4
 8009c60:	4629      	mov	r1, r5
 8009c62:	f7f6 fab7 	bl	80001d4 <__adddf3>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	f7f6 fd91 	bl	8000794 <__aeabi_ddiv>
 8009c72:	f04f 0a01 	mov.w	sl, #1
 8009c76:	4604      	mov	r4, r0
 8009c78:	460d      	mov	r5, r1
 8009c7a:	e764      	b.n	8009b46 <atan+0xce>
 8009c7c:	4b49      	ldr	r3, [pc, #292]	; (8009da4 <atan+0x32c>)
 8009c7e:	429e      	cmp	r6, r3
 8009c80:	da1d      	bge.n	8009cbe <atan+0x246>
 8009c82:	ee10 0a10 	vmov	r0, s0
 8009c86:	4b48      	ldr	r3, [pc, #288]	; (8009da8 <atan+0x330>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7f6 faa0 	bl	80001d0 <__aeabi_dsub>
 8009c90:	4b45      	ldr	r3, [pc, #276]	; (8009da8 <atan+0x330>)
 8009c92:	4606      	mov	r6, r0
 8009c94:	460f      	mov	r7, r1
 8009c96:	2200      	movs	r2, #0
 8009c98:	4620      	mov	r0, r4
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f7f6 fc50 	bl	8000540 <__aeabi_dmul>
 8009ca0:	4b3e      	ldr	r3, [pc, #248]	; (8009d9c <atan+0x324>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f7f6 fa96 	bl	80001d4 <__adddf3>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4630      	mov	r0, r6
 8009cae:	4639      	mov	r1, r7
 8009cb0:	f7f6 fd70 	bl	8000794 <__aeabi_ddiv>
 8009cb4:	f04f 0a02 	mov.w	sl, #2
 8009cb8:	4604      	mov	r4, r0
 8009cba:	460d      	mov	r5, r1
 8009cbc:	e743      	b.n	8009b46 <atan+0xce>
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	ee10 2a10 	vmov	r2, s0
 8009cc4:	4939      	ldr	r1, [pc, #228]	; (8009dac <atan+0x334>)
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	f7f6 fd64 	bl	8000794 <__aeabi_ddiv>
 8009ccc:	f04f 0a03 	mov.w	sl, #3
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	e737      	b.n	8009b46 <atan+0xce>
 8009cd6:	4b36      	ldr	r3, [pc, #216]	; (8009db0 <atan+0x338>)
 8009cd8:	4e36      	ldr	r6, [pc, #216]	; (8009db4 <atan+0x33c>)
 8009cda:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	f7f6 fa75 	bl	80001d0 <__aeabi_dsub>
 8009ce6:	4622      	mov	r2, r4
 8009ce8:	462b      	mov	r3, r5
 8009cea:	f7f6 fa71 	bl	80001d0 <__aeabi_dsub>
 8009cee:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009cfa:	f7f6 fa69 	bl	80001d0 <__aeabi_dsub>
 8009cfe:	f1bb 0f00 	cmp.w	fp, #0
 8009d02:	4604      	mov	r4, r0
 8009d04:	460d      	mov	r5, r1
 8009d06:	f6bf aed6 	bge.w	8009ab6 <atan+0x3e>
 8009d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d0e:	461d      	mov	r5, r3
 8009d10:	e6d1      	b.n	8009ab6 <atan+0x3e>
 8009d12:	a51d      	add	r5, pc, #116	; (adr r5, 8009d88 <atan+0x310>)
 8009d14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d18:	e6cd      	b.n	8009ab6 <atan+0x3e>
 8009d1a:	bf00      	nop
 8009d1c:	f3af 8000 	nop.w
 8009d20:	54442d18 	.word	0x54442d18
 8009d24:	bff921fb 	.word	0xbff921fb
 8009d28:	8800759c 	.word	0x8800759c
 8009d2c:	7e37e43c 	.word	0x7e37e43c
 8009d30:	e322da11 	.word	0xe322da11
 8009d34:	3f90ad3a 	.word	0x3f90ad3a
 8009d38:	24760deb 	.word	0x24760deb
 8009d3c:	3fa97b4b 	.word	0x3fa97b4b
 8009d40:	a0d03d51 	.word	0xa0d03d51
 8009d44:	3fb10d66 	.word	0x3fb10d66
 8009d48:	c54c206e 	.word	0xc54c206e
 8009d4c:	3fb745cd 	.word	0x3fb745cd
 8009d50:	920083ff 	.word	0x920083ff
 8009d54:	3fc24924 	.word	0x3fc24924
 8009d58:	5555550d 	.word	0x5555550d
 8009d5c:	3fd55555 	.word	0x3fd55555
 8009d60:	2c6a6c2f 	.word	0x2c6a6c2f
 8009d64:	bfa2b444 	.word	0xbfa2b444
 8009d68:	52defd9a 	.word	0x52defd9a
 8009d6c:	3fadde2d 	.word	0x3fadde2d
 8009d70:	af749a6d 	.word	0xaf749a6d
 8009d74:	3fb3b0f2 	.word	0x3fb3b0f2
 8009d78:	fe231671 	.word	0xfe231671
 8009d7c:	3fbc71c6 	.word	0x3fbc71c6
 8009d80:	9998ebc4 	.word	0x9998ebc4
 8009d84:	3fc99999 	.word	0x3fc99999
 8009d88:	54442d18 	.word	0x54442d18
 8009d8c:	3ff921fb 	.word	0x3ff921fb
 8009d90:	440fffff 	.word	0x440fffff
 8009d94:	7ff00000 	.word	0x7ff00000
 8009d98:	3fdbffff 	.word	0x3fdbffff
 8009d9c:	3ff00000 	.word	0x3ff00000
 8009da0:	3ff2ffff 	.word	0x3ff2ffff
 8009da4:	40038000 	.word	0x40038000
 8009da8:	3ff80000 	.word	0x3ff80000
 8009dac:	bff00000 	.word	0xbff00000
 8009db0:	0800a5d0 	.word	0x0800a5d0
 8009db4:	0800a5b0 	.word	0x0800a5b0

08009db8 <fabs>:
 8009db8:	ec51 0b10 	vmov	r0, r1, d0
 8009dbc:	ee10 2a10 	vmov	r2, s0
 8009dc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dc4:	ec43 2b10 	vmov	d0, r2, r3
 8009dc8:	4770      	bx	lr
	...

08009dcc <asinf>:
 8009dcc:	b508      	push	{r3, lr}
 8009dce:	ed2d 8b02 	vpush	{d8}
 8009dd2:	eeb0 8a40 	vmov.f32	s16, s0
 8009dd6:	f000 f90f 	bl	8009ff8 <__ieee754_asinf>
 8009dda:	eeb4 8a48 	vcmp.f32	s16, s16
 8009dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de2:	eef0 8a40 	vmov.f32	s17, s0
 8009de6:	d615      	bvs.n	8009e14 <asinf+0x48>
 8009de8:	eeb0 0a48 	vmov.f32	s0, s16
 8009dec:	f000 f81c 	bl	8009e28 <fabsf>
 8009df0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009df4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfc:	dd0a      	ble.n	8009e14 <asinf+0x48>
 8009dfe:	f7ff fba7 	bl	8009550 <__errno>
 8009e02:	ecbd 8b02 	vpop	{d8}
 8009e06:	2321      	movs	r3, #33	; 0x21
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e0e:	4804      	ldr	r0, [pc, #16]	; (8009e20 <asinf+0x54>)
 8009e10:	f000 b812 	b.w	8009e38 <nanf>
 8009e14:	eeb0 0a68 	vmov.f32	s0, s17
 8009e18:	ecbd 8b02 	vpop	{d8}
 8009e1c:	bd08      	pop	{r3, pc}
 8009e1e:	bf00      	nop
 8009e20:	0800a5f0 	.word	0x0800a5f0

08009e24 <atan2f>:
 8009e24:	f000 b9ce 	b.w	800a1c4 <__ieee754_atan2f>

08009e28 <fabsf>:
 8009e28:	ee10 3a10 	vmov	r3, s0
 8009e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e30:	ee00 3a10 	vmov	s0, r3
 8009e34:	4770      	bx	lr
	...

08009e38 <nanf>:
 8009e38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e40 <nanf+0x8>
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	7fc00000 	.word	0x7fc00000

08009e44 <__ieee754_sqrt>:
 8009e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	ec55 4b10 	vmov	r4, r5, d0
 8009e4c:	4e67      	ldr	r6, [pc, #412]	; (8009fec <__ieee754_sqrt+0x1a8>)
 8009e4e:	43ae      	bics	r6, r5
 8009e50:	ee10 0a10 	vmov	r0, s0
 8009e54:	ee10 2a10 	vmov	r2, s0
 8009e58:	4629      	mov	r1, r5
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	d10d      	bne.n	8009e7a <__ieee754_sqrt+0x36>
 8009e5e:	f7f6 fb6f 	bl	8000540 <__aeabi_dmul>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7f6 f9b3 	bl	80001d4 <__adddf3>
 8009e6e:	4604      	mov	r4, r0
 8009e70:	460d      	mov	r5, r1
 8009e72:	ec45 4b10 	vmov	d0, r4, r5
 8009e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7a:	2d00      	cmp	r5, #0
 8009e7c:	dc0b      	bgt.n	8009e96 <__ieee754_sqrt+0x52>
 8009e7e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e82:	4326      	orrs	r6, r4
 8009e84:	d0f5      	beq.n	8009e72 <__ieee754_sqrt+0x2e>
 8009e86:	b135      	cbz	r5, 8009e96 <__ieee754_sqrt+0x52>
 8009e88:	f7f6 f9a2 	bl	80001d0 <__aeabi_dsub>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	f7f6 fc80 	bl	8000794 <__aeabi_ddiv>
 8009e94:	e7eb      	b.n	8009e6e <__ieee754_sqrt+0x2a>
 8009e96:	1509      	asrs	r1, r1, #20
 8009e98:	f000 808d 	beq.w	8009fb6 <__ieee754_sqrt+0x172>
 8009e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ea0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ea8:	07c9      	lsls	r1, r1, #31
 8009eaa:	bf5c      	itt	pl
 8009eac:	005b      	lslpl	r3, r3, #1
 8009eae:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009eb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009eb6:	bf58      	it	pl
 8009eb8:	0052      	lslpl	r2, r2, #1
 8009eba:	2500      	movs	r5, #0
 8009ebc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009ec0:	1076      	asrs	r6, r6, #1
 8009ec2:	0052      	lsls	r2, r2, #1
 8009ec4:	f04f 0e16 	mov.w	lr, #22
 8009ec8:	46ac      	mov	ip, r5
 8009eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ece:	eb0c 0001 	add.w	r0, ip, r1
 8009ed2:	4298      	cmp	r0, r3
 8009ed4:	bfde      	ittt	le
 8009ed6:	1a1b      	suble	r3, r3, r0
 8009ed8:	eb00 0c01 	addle.w	ip, r0, r1
 8009edc:	186d      	addle	r5, r5, r1
 8009ede:	005b      	lsls	r3, r3, #1
 8009ee0:	f1be 0e01 	subs.w	lr, lr, #1
 8009ee4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009ee8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009eec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009ef0:	d1ed      	bne.n	8009ece <__ieee754_sqrt+0x8a>
 8009ef2:	4674      	mov	r4, lr
 8009ef4:	2720      	movs	r7, #32
 8009ef6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009efa:	4563      	cmp	r3, ip
 8009efc:	eb01 000e 	add.w	r0, r1, lr
 8009f00:	dc02      	bgt.n	8009f08 <__ieee754_sqrt+0xc4>
 8009f02:	d113      	bne.n	8009f2c <__ieee754_sqrt+0xe8>
 8009f04:	4290      	cmp	r0, r2
 8009f06:	d811      	bhi.n	8009f2c <__ieee754_sqrt+0xe8>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	eb00 0e01 	add.w	lr, r0, r1
 8009f0e:	da57      	bge.n	8009fc0 <__ieee754_sqrt+0x17c>
 8009f10:	f1be 0f00 	cmp.w	lr, #0
 8009f14:	db54      	blt.n	8009fc0 <__ieee754_sqrt+0x17c>
 8009f16:	f10c 0801 	add.w	r8, ip, #1
 8009f1a:	eba3 030c 	sub.w	r3, r3, ip
 8009f1e:	4290      	cmp	r0, r2
 8009f20:	bf88      	it	hi
 8009f22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009f26:	1a12      	subs	r2, r2, r0
 8009f28:	440c      	add	r4, r1
 8009f2a:	46c4      	mov	ip, r8
 8009f2c:	005b      	lsls	r3, r3, #1
 8009f2e:	3f01      	subs	r7, #1
 8009f30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009f34:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009f38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009f3c:	d1dd      	bne.n	8009efa <__ieee754_sqrt+0xb6>
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	d01b      	beq.n	8009f7a <__ieee754_sqrt+0x136>
 8009f42:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009ff0 <__ieee754_sqrt+0x1ac>
 8009f46:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009ff4 <__ieee754_sqrt+0x1b0>
 8009f4a:	e9da 0100 	ldrd	r0, r1, [sl]
 8009f4e:	e9db 2300 	ldrd	r2, r3, [fp]
 8009f52:	f7f6 f93d 	bl	80001d0 <__aeabi_dsub>
 8009f56:	e9da 8900 	ldrd	r8, r9, [sl]
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4640      	mov	r0, r8
 8009f60:	4649      	mov	r1, r9
 8009f62:	f7f6 fd69 	bl	8000a38 <__aeabi_dcmple>
 8009f66:	b140      	cbz	r0, 8009f7a <__ieee754_sqrt+0x136>
 8009f68:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009f6c:	e9da 0100 	ldrd	r0, r1, [sl]
 8009f70:	e9db 2300 	ldrd	r2, r3, [fp]
 8009f74:	d126      	bne.n	8009fc4 <__ieee754_sqrt+0x180>
 8009f76:	3501      	adds	r5, #1
 8009f78:	463c      	mov	r4, r7
 8009f7a:	106a      	asrs	r2, r5, #1
 8009f7c:	0863      	lsrs	r3, r4, #1
 8009f7e:	07e9      	lsls	r1, r5, #31
 8009f80:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009f84:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009f88:	bf48      	it	mi
 8009f8a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009f8e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009f92:	461c      	mov	r4, r3
 8009f94:	e76d      	b.n	8009e72 <__ieee754_sqrt+0x2e>
 8009f96:	0ad3      	lsrs	r3, r2, #11
 8009f98:	3815      	subs	r0, #21
 8009f9a:	0552      	lsls	r2, r2, #21
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0fa      	beq.n	8009f96 <__ieee754_sqrt+0x152>
 8009fa0:	02dc      	lsls	r4, r3, #11
 8009fa2:	d50a      	bpl.n	8009fba <__ieee754_sqrt+0x176>
 8009fa4:	f1c1 0420 	rsb	r4, r1, #32
 8009fa8:	fa22 f404 	lsr.w	r4, r2, r4
 8009fac:	1e4d      	subs	r5, r1, #1
 8009fae:	408a      	lsls	r2, r1
 8009fb0:	4323      	orrs	r3, r4
 8009fb2:	1b41      	subs	r1, r0, r5
 8009fb4:	e772      	b.n	8009e9c <__ieee754_sqrt+0x58>
 8009fb6:	4608      	mov	r0, r1
 8009fb8:	e7f0      	b.n	8009f9c <__ieee754_sqrt+0x158>
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	3101      	adds	r1, #1
 8009fbe:	e7ef      	b.n	8009fa0 <__ieee754_sqrt+0x15c>
 8009fc0:	46e0      	mov	r8, ip
 8009fc2:	e7aa      	b.n	8009f1a <__ieee754_sqrt+0xd6>
 8009fc4:	f7f6 f906 	bl	80001d4 <__adddf3>
 8009fc8:	e9da 8900 	ldrd	r8, r9, [sl]
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	f7f6 fd26 	bl	8000a24 <__aeabi_dcmplt>
 8009fd8:	b120      	cbz	r0, 8009fe4 <__ieee754_sqrt+0x1a0>
 8009fda:	1ca0      	adds	r0, r4, #2
 8009fdc:	bf08      	it	eq
 8009fde:	3501      	addeq	r5, #1
 8009fe0:	3402      	adds	r4, #2
 8009fe2:	e7ca      	b.n	8009f7a <__ieee754_sqrt+0x136>
 8009fe4:	3401      	adds	r4, #1
 8009fe6:	f024 0401 	bic.w	r4, r4, #1
 8009fea:	e7c6      	b.n	8009f7a <__ieee754_sqrt+0x136>
 8009fec:	7ff00000 	.word	0x7ff00000
 8009ff0:	20000070 	.word	0x20000070
 8009ff4:	20000078 	.word	0x20000078

08009ff8 <__ieee754_asinf>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	ee10 5a10 	vmov	r5, s0
 8009ffe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a002:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a006:	ed2d 8b04 	vpush	{d8-d9}
 800a00a:	d10c      	bne.n	800a026 <__ieee754_asinf+0x2e>
 800a00c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a184 <__ieee754_asinf+0x18c>
 800a010:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a188 <__ieee754_asinf+0x190>
 800a014:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a018:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a01c:	eeb0 0a67 	vmov.f32	s0, s15
 800a020:	ecbd 8b04 	vpop	{d8-d9}
 800a024:	bd38      	pop	{r3, r4, r5, pc}
 800a026:	dd04      	ble.n	800a032 <__ieee754_asinf+0x3a>
 800a028:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a02c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a030:	e7f6      	b.n	800a020 <__ieee754_asinf+0x28>
 800a032:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a036:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a03a:	da0b      	bge.n	800a054 <__ieee754_asinf+0x5c>
 800a03c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a040:	da52      	bge.n	800a0e8 <__ieee754_asinf+0xf0>
 800a042:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a18c <__ieee754_asinf+0x194>
 800a046:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a04a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a052:	dce5      	bgt.n	800a020 <__ieee754_asinf+0x28>
 800a054:	f7ff fee8 	bl	8009e28 <fabsf>
 800a058:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a05c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a060:	ee20 8a27 	vmul.f32	s16, s0, s15
 800a064:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a190 <__ieee754_asinf+0x198>
 800a068:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a194 <__ieee754_asinf+0x19c>
 800a06c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a198 <__ieee754_asinf+0x1a0>
 800a070:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a074:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a19c <__ieee754_asinf+0x1a4>
 800a078:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a07c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a1a0 <__ieee754_asinf+0x1a8>
 800a080:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a084:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a1a4 <__ieee754_asinf+0x1ac>
 800a088:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a08c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a1a8 <__ieee754_asinf+0x1b0>
 800a090:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a094:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a1ac <__ieee754_asinf+0x1b4>
 800a098:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a09c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a1b0 <__ieee754_asinf+0x1b8>
 800a0a0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a0a4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a1b4 <__ieee754_asinf+0x1bc>
 800a0a8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a0ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a0b0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a0b4:	f000 f9fa 	bl	800a4ac <__ieee754_sqrtf>
 800a0b8:	4b3f      	ldr	r3, [pc, #252]	; (800a1b8 <__ieee754_asinf+0x1c0>)
 800a0ba:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a0be:	429c      	cmp	r4, r3
 800a0c0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a0c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a0c8:	dd3d      	ble.n	800a146 <__ieee754_asinf+0x14e>
 800a0ca:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a0ce:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a1bc <__ieee754_asinf+0x1c4>
 800a0d2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a0d6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a188 <__ieee754_asinf+0x190>
 800a0da:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	bfd8      	it	le
 800a0e2:	eeb1 0a40 	vnegle.f32	s0, s0
 800a0e6:	e79b      	b.n	800a020 <__ieee754_asinf+0x28>
 800a0e8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a0ec:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a194 <__ieee754_asinf+0x19c>
 800a0f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800a190 <__ieee754_asinf+0x198>
 800a0f4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a1a8 <__ieee754_asinf+0x1b0>
 800a0f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a0fc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a19c <__ieee754_asinf+0x1a4>
 800a100:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a104:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a1a0 <__ieee754_asinf+0x1a8>
 800a108:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a10c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a1a4 <__ieee754_asinf+0x1ac>
 800a110:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a114:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a198 <__ieee754_asinf+0x1a0>
 800a118:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a11c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a1ac <__ieee754_asinf+0x1b4>
 800a120:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a124:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a1b0 <__ieee754_asinf+0x1b8>
 800a128:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a12c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a1b4 <__ieee754_asinf+0x1bc>
 800a130:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a134:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a138:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a13c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a140:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a144:	e76c      	b.n	800a020 <__ieee754_asinf+0x28>
 800a146:	ee10 3a10 	vmov	r3, s0
 800a14a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a14e:	f023 030f 	bic.w	r3, r3, #15
 800a152:	ee07 3a10 	vmov	s14, r3
 800a156:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a15a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a15e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a162:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a166:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a184 <__ieee754_asinf+0x18c>
 800a16a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a16e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a172:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a1c0 <__ieee754_asinf+0x1c8>
 800a176:	eeb0 6a40 	vmov.f32	s12, s0
 800a17a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a17e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a182:	e7aa      	b.n	800a0da <__ieee754_asinf+0xe2>
 800a184:	b33bbd2e 	.word	0xb33bbd2e
 800a188:	3fc90fdb 	.word	0x3fc90fdb
 800a18c:	7149f2ca 	.word	0x7149f2ca
 800a190:	3a4f7f04 	.word	0x3a4f7f04
 800a194:	3811ef08 	.word	0x3811ef08
 800a198:	3e2aaaab 	.word	0x3e2aaaab
 800a19c:	bd241146 	.word	0xbd241146
 800a1a0:	3e4e0aa8 	.word	0x3e4e0aa8
 800a1a4:	bea6b090 	.word	0xbea6b090
 800a1a8:	3d9dc62e 	.word	0x3d9dc62e
 800a1ac:	bf303361 	.word	0xbf303361
 800a1b0:	4001572d 	.word	0x4001572d
 800a1b4:	c019d139 	.word	0xc019d139
 800a1b8:	3f799999 	.word	0x3f799999
 800a1bc:	333bbd2e 	.word	0x333bbd2e
 800a1c0:	3f490fdb 	.word	0x3f490fdb

0800a1c4 <__ieee754_atan2f>:
 800a1c4:	ee10 2a90 	vmov	r2, s1
 800a1c8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a1cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	eef0 7a40 	vmov.f32	s15, s0
 800a1d6:	dc06      	bgt.n	800a1e6 <__ieee754_atan2f+0x22>
 800a1d8:	ee10 0a10 	vmov	r0, s0
 800a1dc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a1e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1e4:	dd04      	ble.n	800a1f0 <__ieee754_atan2f+0x2c>
 800a1e6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a1ea:	eeb0 0a67 	vmov.f32	s0, s15
 800a1ee:	bd10      	pop	{r4, pc}
 800a1f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a1f4:	d103      	bne.n	800a1fe <__ieee754_atan2f+0x3a>
 800a1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1fa:	f000 b883 	b.w	800a304 <atanf>
 800a1fe:	1794      	asrs	r4, r2, #30
 800a200:	f004 0402 	and.w	r4, r4, #2
 800a204:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a208:	b943      	cbnz	r3, 800a21c <__ieee754_atan2f+0x58>
 800a20a:	2c02      	cmp	r4, #2
 800a20c:	d05e      	beq.n	800a2cc <__ieee754_atan2f+0x108>
 800a20e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a2e0 <__ieee754_atan2f+0x11c>
 800a212:	2c03      	cmp	r4, #3
 800a214:	bf08      	it	eq
 800a216:	eef0 7a47 	vmoveq.f32	s15, s14
 800a21a:	e7e6      	b.n	800a1ea <__ieee754_atan2f+0x26>
 800a21c:	b941      	cbnz	r1, 800a230 <__ieee754_atan2f+0x6c>
 800a21e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a2e4 <__ieee754_atan2f+0x120>
 800a222:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a2e8 <__ieee754_atan2f+0x124>
 800a226:	2800      	cmp	r0, #0
 800a228:	bfb8      	it	lt
 800a22a:	eef0 7a47 	vmovlt.f32	s15, s14
 800a22e:	e7dc      	b.n	800a1ea <__ieee754_atan2f+0x26>
 800a230:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a234:	d110      	bne.n	800a258 <__ieee754_atan2f+0x94>
 800a236:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a23a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a23e:	d107      	bne.n	800a250 <__ieee754_atan2f+0x8c>
 800a240:	2c02      	cmp	r4, #2
 800a242:	d846      	bhi.n	800a2d2 <__ieee754_atan2f+0x10e>
 800a244:	4b29      	ldr	r3, [pc, #164]	; (800a2ec <__ieee754_atan2f+0x128>)
 800a246:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a24a:	edd3 7a00 	vldr	s15, [r3]
 800a24e:	e7cc      	b.n	800a1ea <__ieee754_atan2f+0x26>
 800a250:	2c02      	cmp	r4, #2
 800a252:	d841      	bhi.n	800a2d8 <__ieee754_atan2f+0x114>
 800a254:	4b26      	ldr	r3, [pc, #152]	; (800a2f0 <__ieee754_atan2f+0x12c>)
 800a256:	e7f6      	b.n	800a246 <__ieee754_atan2f+0x82>
 800a258:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a25c:	d0df      	beq.n	800a21e <__ieee754_atan2f+0x5a>
 800a25e:	1a5b      	subs	r3, r3, r1
 800a260:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a264:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a268:	da1a      	bge.n	800a2a0 <__ieee754_atan2f+0xdc>
 800a26a:	2a00      	cmp	r2, #0
 800a26c:	da01      	bge.n	800a272 <__ieee754_atan2f+0xae>
 800a26e:	313c      	adds	r1, #60	; 0x3c
 800a270:	db19      	blt.n	800a2a6 <__ieee754_atan2f+0xe2>
 800a272:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a276:	f7ff fdd7 	bl	8009e28 <fabsf>
 800a27a:	f000 f843 	bl	800a304 <atanf>
 800a27e:	eef0 7a40 	vmov.f32	s15, s0
 800a282:	2c01      	cmp	r4, #1
 800a284:	d012      	beq.n	800a2ac <__ieee754_atan2f+0xe8>
 800a286:	2c02      	cmp	r4, #2
 800a288:	d017      	beq.n	800a2ba <__ieee754_atan2f+0xf6>
 800a28a:	2c00      	cmp	r4, #0
 800a28c:	d0ad      	beq.n	800a1ea <__ieee754_atan2f+0x26>
 800a28e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a2f4 <__ieee754_atan2f+0x130>
 800a292:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a296:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a2f8 <__ieee754_atan2f+0x134>
 800a29a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a29e:	e7a4      	b.n	800a1ea <__ieee754_atan2f+0x26>
 800a2a0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a2e4 <__ieee754_atan2f+0x120>
 800a2a4:	e7ed      	b.n	800a282 <__ieee754_atan2f+0xbe>
 800a2a6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a2fc <__ieee754_atan2f+0x138>
 800a2aa:	e7ea      	b.n	800a282 <__ieee754_atan2f+0xbe>
 800a2ac:	ee17 3a90 	vmov	r3, s15
 800a2b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2b4:	ee07 3a90 	vmov	s15, r3
 800a2b8:	e797      	b.n	800a1ea <__ieee754_atan2f+0x26>
 800a2ba:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a2f4 <__ieee754_atan2f+0x130>
 800a2be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a2f8 <__ieee754_atan2f+0x134>
 800a2c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2ca:	e78e      	b.n	800a1ea <__ieee754_atan2f+0x26>
 800a2cc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a2f8 <__ieee754_atan2f+0x134>
 800a2d0:	e78b      	b.n	800a1ea <__ieee754_atan2f+0x26>
 800a2d2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a300 <__ieee754_atan2f+0x13c>
 800a2d6:	e788      	b.n	800a1ea <__ieee754_atan2f+0x26>
 800a2d8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a2fc <__ieee754_atan2f+0x138>
 800a2dc:	e785      	b.n	800a1ea <__ieee754_atan2f+0x26>
 800a2de:	bf00      	nop
 800a2e0:	c0490fdb 	.word	0xc0490fdb
 800a2e4:	3fc90fdb 	.word	0x3fc90fdb
 800a2e8:	bfc90fdb 	.word	0xbfc90fdb
 800a2ec:	0800a5f4 	.word	0x0800a5f4
 800a2f0:	0800a600 	.word	0x0800a600
 800a2f4:	33bbbd2e 	.word	0x33bbbd2e
 800a2f8:	40490fdb 	.word	0x40490fdb
 800a2fc:	00000000 	.word	0x00000000
 800a300:	3f490fdb 	.word	0x3f490fdb

0800a304 <atanf>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	ee10 5a10 	vmov	r5, s0
 800a30a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a30e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a312:	eef0 7a40 	vmov.f32	s15, s0
 800a316:	db10      	blt.n	800a33a <atanf+0x36>
 800a318:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a31c:	dd04      	ble.n	800a328 <atanf+0x24>
 800a31e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a322:	eeb0 0a67 	vmov.f32	s0, s15
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a460 <atanf+0x15c>
 800a32c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a464 <atanf+0x160>
 800a330:	2d00      	cmp	r5, #0
 800a332:	bfd8      	it	le
 800a334:	eef0 7a47 	vmovle.f32	s15, s14
 800a338:	e7f3      	b.n	800a322 <atanf+0x1e>
 800a33a:	4b4b      	ldr	r3, [pc, #300]	; (800a468 <atanf+0x164>)
 800a33c:	429c      	cmp	r4, r3
 800a33e:	dc10      	bgt.n	800a362 <atanf+0x5e>
 800a340:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a344:	da0a      	bge.n	800a35c <atanf+0x58>
 800a346:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a46c <atanf+0x168>
 800a34a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a352:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35a:	dce2      	bgt.n	800a322 <atanf+0x1e>
 800a35c:	f04f 33ff 	mov.w	r3, #4294967295
 800a360:	e013      	b.n	800a38a <atanf+0x86>
 800a362:	f7ff fd61 	bl	8009e28 <fabsf>
 800a366:	4b42      	ldr	r3, [pc, #264]	; (800a470 <atanf+0x16c>)
 800a368:	429c      	cmp	r4, r3
 800a36a:	dc4f      	bgt.n	800a40c <atanf+0x108>
 800a36c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a370:	429c      	cmp	r4, r3
 800a372:	dc41      	bgt.n	800a3f8 <atanf+0xf4>
 800a374:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a378:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a37c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a380:	2300      	movs	r3, #0
 800a382:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a386:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a390:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a474 <atanf+0x170>
 800a394:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a478 <atanf+0x174>
 800a398:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a47c <atanf+0x178>
 800a39c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a3a0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a3a4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a480 <atanf+0x17c>
 800a3a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a3ac:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a484 <atanf+0x180>
 800a3b0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a3b4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a488 <atanf+0x184>
 800a3b8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a3bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a48c <atanf+0x188>
 800a3c0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a3c4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a490 <atanf+0x18c>
 800a3c8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a3cc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a494 <atanf+0x190>
 800a3d0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a3d4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a498 <atanf+0x194>
 800a3d8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a3dc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a49c <atanf+0x198>
 800a3e0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a3e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a3e8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a3ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a3f0:	d121      	bne.n	800a436 <atanf+0x132>
 800a3f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3f6:	e794      	b.n	800a322 <atanf+0x1e>
 800a3f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a3fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a400:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a404:	2301      	movs	r3, #1
 800a406:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a40a:	e7be      	b.n	800a38a <atanf+0x86>
 800a40c:	4b24      	ldr	r3, [pc, #144]	; (800a4a0 <atanf+0x19c>)
 800a40e:	429c      	cmp	r4, r3
 800a410:	dc0b      	bgt.n	800a42a <atanf+0x126>
 800a412:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a41a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a41e:	2302      	movs	r3, #2
 800a420:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a428:	e7af      	b.n	800a38a <atanf+0x86>
 800a42a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a42e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a432:	2303      	movs	r3, #3
 800a434:	e7a9      	b.n	800a38a <atanf+0x86>
 800a436:	4a1b      	ldr	r2, [pc, #108]	; (800a4a4 <atanf+0x1a0>)
 800a438:	491b      	ldr	r1, [pc, #108]	; (800a4a8 <atanf+0x1a4>)
 800a43a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a43e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a442:	edd3 6a00 	vldr	s13, [r3]
 800a446:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a44a:	2d00      	cmp	r5, #0
 800a44c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a450:	edd2 7a00 	vldr	s15, [r2]
 800a454:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a458:	bfb8      	it	lt
 800a45a:	eef1 7a67 	vneglt.f32	s15, s15
 800a45e:	e760      	b.n	800a322 <atanf+0x1e>
 800a460:	3fc90fdb 	.word	0x3fc90fdb
 800a464:	bfc90fdb 	.word	0xbfc90fdb
 800a468:	3edfffff 	.word	0x3edfffff
 800a46c:	7149f2ca 	.word	0x7149f2ca
 800a470:	3f97ffff 	.word	0x3f97ffff
 800a474:	3c8569d7 	.word	0x3c8569d7
 800a478:	3d4bda59 	.word	0x3d4bda59
 800a47c:	bd6ef16b 	.word	0xbd6ef16b
 800a480:	3d886b35 	.word	0x3d886b35
 800a484:	3dba2e6e 	.word	0x3dba2e6e
 800a488:	3e124925 	.word	0x3e124925
 800a48c:	3eaaaaab 	.word	0x3eaaaaab
 800a490:	bd15a221 	.word	0xbd15a221
 800a494:	bd9d8795 	.word	0xbd9d8795
 800a498:	bde38e38 	.word	0xbde38e38
 800a49c:	be4ccccd 	.word	0xbe4ccccd
 800a4a0:	401bffff 	.word	0x401bffff
 800a4a4:	0800a60c 	.word	0x0800a60c
 800a4a8:	0800a61c 	.word	0x0800a61c

0800a4ac <__ieee754_sqrtf>:
 800a4ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a4b0:	4770      	bx	lr
	...

0800a4b4 <_init>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	bf00      	nop
 800a4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ba:	bc08      	pop	{r3}
 800a4bc:	469e      	mov	lr, r3
 800a4be:	4770      	bx	lr

0800a4c0 <_fini>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr
